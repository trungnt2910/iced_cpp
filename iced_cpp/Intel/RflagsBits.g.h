/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(INSTR_INFO)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class RflagsBits {
		/// <summary>No bit is set</summary>
		None  = 0x00000000,
		/// <summary><c>RFLAGS.OF</c></summary>
		OF  = 0x00000001,
		/// <summary><c>RFLAGS.SF</c></summary>
		SF  = 0x00000002,
		/// <summary><c>RFLAGS.ZF</c></summary>
		ZF  = 0x00000004,
		/// <summary><c>RFLAGS.AF</c></summary>
		AF  = 0x00000008,
		/// <summary><c>RFLAGS.CF</c></summary>
		CF  = 0x00000010,
		/// <summary><c>RFLAGS.PF</c></summary>
		PF  = 0x00000020,
		/// <summary><c>RFLAGS.DF</c></summary>
		DF  = 0x00000040,
		/// <summary><c>RFLAGS.IF</c></summary>
		IF  = 0x00000080,
		/// <summary><c>RFLAGS.AC</c></summary>
		AC  = 0x00000100,
		/// <summary><c>UIF</c></summary>
		UIF  = 0x00000200,
		/// <summary>FPU status word bit <c>C0</c></summary>
		C0  = 0x00000400,
		/// <summary>FPU status word bit <c>C1</c></summary>
		C1  = 0x00000800,
		/// <summary>FPU status word bit <c>C2</c></summary>
		C2  = 0x00001000,
		/// <summary>FPU status word bit <c>C3</c></summary>
		C3  = 0x00002000,
	};
	constexpr RflagsBits& operator^=(RflagsBits& a, const RflagsBits& b) { return a = (RflagsBits)((int)a ^ (int)b); }
	constexpr RflagsBits operator^(const RflagsBits& a, const RflagsBits& b) { return (RflagsBits)((int)a ^ (int)b); }
	constexpr RflagsBits& operator|=(RflagsBits& a, const RflagsBits& b) { return a = (RflagsBits)((int)a | (int)b); }
	constexpr RflagsBits operator|(const RflagsBits& a, const RflagsBits& b) { return (RflagsBits)((int)a | (int)b); }
	constexpr RflagsBits& operator&=(RflagsBits& a, const RflagsBits& b) { return a = (RflagsBits)((int)a & (int)b); }
	constexpr RflagsBits operator&(const RflagsBits& a, const RflagsBits& b) { return (RflagsBits)((int)a & (int)b); }
	constexpr int operator+(const RflagsBits& a, const RflagsBits& b) { return ((int)a + (int)b); }
	constexpr int operator+(const RflagsBits& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const RflagsBits& b) { return (a + (int)b); }
	constexpr int operator-(const RflagsBits& a, const RflagsBits& b) { return ((int)a - (int)b); }
	constexpr int operator-(const RflagsBits& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const RflagsBits& b) { return (a - (int)b); }
	constexpr RflagsBits operator++(RflagsBits& a, int) { auto temp = a; a = RflagsBits(a + 1); return temp; }
	constexpr RflagsBits& operator++(RflagsBits& a) { return a = RflagsBits(a + 1); }
	constexpr RflagsBits operator--(RflagsBits& a, int) { auto temp = a; a = RflagsBits(a - 1); return temp; }
	constexpr RflagsBits& operator--(RflagsBits& a) { return a = RflagsBits(a - 1); }
	constexpr bool operator==(const RflagsBits& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const RflagsBits& b) { return (a == (int)b); }
	constexpr bool operator>=(const RflagsBits& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const RflagsBits& b) { return (a >= (int)b); }
	constexpr bool operator<=(const RflagsBits& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const RflagsBits& b) { return (a <= (int)b); }
	constexpr bool operator>(const RflagsBits& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const RflagsBits& b) { return (a > (int)b); }
	constexpr bool operator<(const RflagsBits& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const RflagsBits& b) { return (a < (int)b); }
	constexpr bool operator!=(const RflagsBits& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const RflagsBits& b) { return (a != (int)b); }
	template <>
	constexpr std::string ToString(const RflagsBits& e) {
		std::string result;
		auto temp = e;
		if (temp == RflagsBits::None) {
			return "None";
		}
		if ((temp & RflagsBits::OF) == RflagsBits::OF) {
			temp ^= RflagsBits::OF;
			result += "OF, ";
		}
		if ((temp & RflagsBits::SF) == RflagsBits::SF) {
			temp ^= RflagsBits::SF;
			result += "SF, ";
		}
		if ((temp & RflagsBits::ZF) == RflagsBits::ZF) {
			temp ^= RflagsBits::ZF;
			result += "ZF, ";
		}
		if ((temp & RflagsBits::AF) == RflagsBits::AF) {
			temp ^= RflagsBits::AF;
			result += "AF, ";
		}
		if ((temp & RflagsBits::CF) == RflagsBits::CF) {
			temp ^= RflagsBits::CF;
			result += "CF, ";
		}
		if ((temp & RflagsBits::PF) == RflagsBits::PF) {
			temp ^= RflagsBits::PF;
			result += "PF, ";
		}
		if ((temp & RflagsBits::DF) == RflagsBits::DF) {
			temp ^= RflagsBits::DF;
			result += "DF, ";
		}
		if ((temp & RflagsBits::IF) == RflagsBits::IF) {
			temp ^= RflagsBits::IF;
			result += "IF, ";
		}
		if ((temp & RflagsBits::AC) == RflagsBits::AC) {
			temp ^= RflagsBits::AC;
			result += "AC, ";
		}
		if ((temp & RflagsBits::UIF) == RflagsBits::UIF) {
			temp ^= RflagsBits::UIF;
			result += "UIF, ";
		}
		if ((temp & RflagsBits::C0) == RflagsBits::C0) {
			temp ^= RflagsBits::C0;
			result += "C0, ";
		}
		if ((temp & RflagsBits::C1) == RflagsBits::C1) {
			temp ^= RflagsBits::C1;
			result += "C1, ";
		}
		if ((temp & RflagsBits::C2) == RflagsBits::C2) {
			temp ^= RflagsBits::C2;
			result += "C2, ";
		}
		if ((temp & RflagsBits::C3) == RflagsBits::C3) {
			temp ^= RflagsBits::C3;
			result += "C3, ";
		}
		if (temp != 0 || result.empty()) return Internal::StringHelpers::ToDec((int)e);
		return result.substr(0, result.size() - 2);
		}
}
#endif
