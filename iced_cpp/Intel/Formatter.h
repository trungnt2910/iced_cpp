// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

#pragma once
#if defined(GAS) || defined(INTEL) || defined(MASM) || defined(NASM)

#include "FormatterOptions.h"
#include "FormatterOutput.h"
#include "Iced.Intel.Instruction.h"
#include "OpAccess.g.h"
#include "Register.g.h"
#include "IFormatterOptionsProvider.h"
#include <string>

namespace Iced::Intel
{
	// GENERATOR-BEGIN: FormatMnemonicOptions
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	enum class FormatMnemonicOptions : std::uint32_t {
		/// <summary>No option is set</summary>
		None  = 0x00000000,
		/// <summary>Don&apos;t add any prefixes</summary>
		NoPrefixes  = 0x00000001,
		/// <summary>Don&apos;t add the mnemonic</summary>
		NoMnemonic  = 0x00000002,
	};
	constexpr FormatMnemonicOptions& operator^=(FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return a = (FormatMnemonicOptions)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr FormatMnemonicOptions operator^(const FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return (FormatMnemonicOptions)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr FormatMnemonicOptions& operator|=(FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return a = (FormatMnemonicOptions)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr FormatMnemonicOptions operator|(const FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return (FormatMnemonicOptions)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr FormatMnemonicOptions& operator&=(FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return a = (FormatMnemonicOptions)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr FormatMnemonicOptions operator&(const FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return (FormatMnemonicOptions)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr FormatMnemonicOptions operator~(const FormatMnemonicOptions& a) { return (FormatMnemonicOptions)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const FormatMnemonicOptions& a, const FormatMnemonicOptions& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a - (std::uint32_t)b); }
	constexpr FormatMnemonicOptions operator++(FormatMnemonicOptions& a, int) { auto temp = a; a = FormatMnemonicOptions(a + 1); return temp; }
	constexpr FormatMnemonicOptions& operator++(FormatMnemonicOptions& a) { return a = FormatMnemonicOptions(a + 1); }
	constexpr FormatMnemonicOptions operator--(FormatMnemonicOptions& a, int) { auto temp = a; a = FormatMnemonicOptions(a - 1); return temp; }
	constexpr FormatMnemonicOptions& operator--(FormatMnemonicOptions& a) { return a = FormatMnemonicOptions(a - 1); }
	constexpr bool operator==(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const FormatMnemonicOptions& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const FormatMnemonicOptions& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: FormatMnemonicOptions

	/// <summary>
	/// Formats instructions
	/// </summary>
	class Formatter
	{
		/// <summary>
		/// Gets the formatter options
		/// </summary>
	public:
		constexpr virtual const FormatterOptions& GetOptions() const = 0;
		/// <summary>
		/// Gets the formatter options
		/// </summary>
		constexpr virtual FormatterOptions& GetOptions() = 0;
		/// <summary>
		/// Formats the mnemonic and any prefixes
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="output">Output</param>
		constexpr void FormatMnemonic(const Instruction& instruction, FormatterOutput& output);
		/// <summary>
		/// Formats the mnemonic and/or any prefixes
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="output">Output</param>
		/// <param name="options">Options</param>
		constexpr virtual void FormatMnemonic(const Instruction& instruction, FormatterOutput& output, FormatMnemonicOptions options) = 0;
		/// <summary>
		/// Gets the number of operands that will be formatted. A formatter can add and remove operands
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <returns></returns>
		constexpr virtual std::int32_t GetOperandCount(const Instruction& instruction) = 0;
#if defined(INSTR_INFO)
		/// <summary>
		/// Returns the operand access but only if it's an operand added by the formatter. If it's an
		/// operand that is part of <see cref="Instruction"/>, you should call eg. <see cref="InstructionInfoFactory.GetInfo(in Instruction)"/>.
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.
		/// See <see cref="GetOperandCount(in Instruction)"/></param>
		/// <param name="access">Updated with operand access if successful</param>
		/// <returns></returns>
		constexpr virtual bool TryGetOpAccess(const Instruction& instruction, std::int32_t operand, OpAccess& access) = 0;
#endif
		/// <summary>
		/// Converts a formatter operand index to an instruction operand index. Returns -1 if it's an operand added by the formatter
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.
		/// See <see cref="GetOperandCount(in Instruction)"/></param>
		/// <returns></returns>
		constexpr virtual std::int32_t GetInstructionOperand(const Instruction& instruction, std::int32_t operand) = 0;
		/// <summary>
		/// Converts an instruction operand index to a formatter operand index. Returns -1 if the instruction operand isn't used by the formatter
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="instructionOperand">Instruction operand</param>
		/// <returns></returns>
		constexpr virtual std::int32_t GetFormatterOperand(const Instruction& instruction, std::int32_t instructionOperand) = 0;
		/// <summary>
		/// Formats an operand. This is a formatter operand and not necessarily a real instruction operand.
		/// A formatter can add and remove operands.
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="output">Output</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.
		/// See <see cref="GetOperandCount(in Instruction)"/></param>
		constexpr virtual void FormatOperand(const Instruction& instruction, FormatterOutput& output, std::int32_t operand) = 0;
		/// <summary>
		/// Formats an operand separator
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="output">Output</param>
		constexpr virtual void FormatOperandSeparator(const Instruction& instruction, FormatterOutput& output) = 0;
		/// <summary>
		/// Formats all operands
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="output">Output</param>
		constexpr virtual void FormatAllOperands(const Instruction& instruction, FormatterOutput& output) = 0;
		/// <summary>
		/// Formats the whole instruction: prefixes, mnemonic, operands
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="output">Output</param>
		constexpr virtual void Format(const Instruction& instruction, FormatterOutput& output) = 0;
		/// <summary>
		/// Formats a register
		/// </summary>
		/// <param name="register">Register</param>
		/// <returns></returns>
		constexpr virtual std::string Format(Register register_) = 0;
		/// <summary>
		/// Formats a <see cref="sbyte"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatInt8(std::int8_t value);
		/// <summary>
		/// Formats a <see cref="short"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatInt16(std::int16_t value);
		/// <summary>
		/// Formats a <see cref="int"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatInt32(std::int32_t value);
		/// <summary>
		/// Formats a <see cref="long"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatInt64(std::int64_t value);
		/// <summary>
		/// Formats a <see cref="byte"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatUInt8(std::uint8_t value);
		/// <summary>
		/// Formats a <see cref="ushort"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatUInt16(std::uint16_t value);
		/// <summary>
		/// Formats a <see cref="uint"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatUInt32(std::uint32_t value);
		/// <summary>
		/// Formats a <see cref="ulong"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <returns></returns>
		constexpr std::string FormatUInt64(std::uint64_t value);
		/// <summary>
		/// Formats a <see cref="sbyte"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatInt8(std::int8_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="short"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatInt16(std::int16_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="int"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatInt32(std::int32_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="long"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatInt64(std::int64_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="byte"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatUInt8(std::uint8_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="ushort"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatUInt16(std::uint16_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="uint"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatUInt32(std::uint32_t value, const NumberFormattingOptions& numberOptions) = 0;
		/// <summary>
		/// Formats a <see cref="ulong"/>
		/// </summary>
		/// <param name="value">Value</param>
		/// <param name="numberOptions">Options</param>
		/// <returns></returns>
		constexpr virtual std::string FormatUInt64(std::uint64_t value, const NumberFormattingOptions& numberOptions) = 0;
	};

	constexpr void Formatter::FormatMnemonic(const Instruction& instruction, FormatterOutput& output)
	{
		FormatMnemonic(instruction, output, FormatMnemonicOptions::None);
	}

	constexpr std::string Formatter::FormatInt8(std::int8_t value)
	{
		return FormatInt8(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatInt16(std::int16_t value)
	{
		return FormatInt16(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatInt32(std::int32_t value)
	{
		return FormatInt32(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatInt64(std::int64_t value)
	{
		return FormatInt64(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatUInt8(std::uint8_t value)
	{
		return FormatUInt8(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatUInt16(std::uint16_t value)
	{
		return FormatUInt16(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatUInt32(std::uint32_t value)
	{
		return FormatUInt32(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}

	constexpr std::string Formatter::FormatUInt64(std::uint64_t value)
	{
		return FormatUInt64(value, NumberFormattingOptions::CreateImmediateInternal(GetOptions()));
	}
}
#endif
