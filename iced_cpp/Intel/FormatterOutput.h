// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

#pragma once
#if defined(GAS) || defined(INTEL) || defined(MASM) || defined(NASM)

#include "FormatterTextKind.g.h"
#include "Iced.Intel.Instruction.h"
#include "Register.g.h"
#include "ISymbolResolver.h"
#include "FormatterOptions.h"
#include "IFormatterOptionsProvider.h"
#include "NumberFormatter.h"
#include <string>
#include <limits>

namespace Iced::Intel
{
	// GENERATOR-BEGIN: PrefixKind
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	/// <summary>Prefix</summary>
	enum class PrefixKind {
		ES  = 0,
		CS  = 1,
		SS  = 2,
		DS  = 3,
		FS  = 4,
		GS  = 5,
		Lock  = 6,
		Rep  = 7,
		Repe  = 8,
		Repne  = 9,
		OperandSize  = 10,
		AddressSize  = 11,
		HintNotTaken  = 12,
		HintTaken  = 13,
		Bnd  = 14,
		Notrack  = 15,
		Xacquire  = 16,
		Xrelease  = 17,
	};
	constexpr int operator+(const PrefixKind& a, const PrefixKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const PrefixKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const PrefixKind& b) { return (a + (int)b); }
	constexpr int operator-(const PrefixKind& a, const PrefixKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const PrefixKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const PrefixKind& b) { return (a - (int)b); }
	constexpr PrefixKind operator++(PrefixKind& a, int) { auto temp = a; a = PrefixKind(a + 1); return temp; }
	constexpr PrefixKind& operator++(PrefixKind& a) { return a = PrefixKind(a + 1); }
	constexpr PrefixKind operator--(PrefixKind& a, int) { auto temp = a; a = PrefixKind(a - 1); return temp; }
	constexpr PrefixKind& operator--(PrefixKind& a) { return a = PrefixKind(a - 1); }
	constexpr bool operator==(const PrefixKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const PrefixKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const PrefixKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const PrefixKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const PrefixKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const PrefixKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const PrefixKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const PrefixKind& b) { return (a > (int)b); }
	constexpr bool operator<(const PrefixKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const PrefixKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const PrefixKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const PrefixKind& b) { return (a != (int)b); }
	// GENERATOR-END: PrefixKind
	// GENERATOR-BEGIN: DecoratorKind
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	enum class DecoratorKind {
		/// <summary>Broadcast decorator, eg. <c>{1to4}</c></summary>
		Broadcast  = 0,
		/// <summary>Rounding control, eg. <c>{rd-sae}</c></summary>
		RoundingControl  = 1,
		/// <summary>Suppress all exceptions: <c>{sae}</c></summary>
		SuppressAllExceptions  = 2,
		/// <summary>Zeroing masking: <c>{z}</c></summary>
		ZeroingMasking  = 3,
		/// <summary>MVEX swizzle or memory up/down conversion: <c>{dacb}</c> or <c>{sint16}</c></summary>
		SwizzleMemConv  = 4,
		/// <summary>MVEX eviction hint: <c>{eh}</c></summary>
		EvictionHint  = 5,
	};
	constexpr int operator+(const DecoratorKind& a, const DecoratorKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const DecoratorKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const DecoratorKind& b) { return (a + (int)b); }
	constexpr int operator-(const DecoratorKind& a, const DecoratorKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const DecoratorKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const DecoratorKind& b) { return (a - (int)b); }
	constexpr DecoratorKind operator++(DecoratorKind& a, int) { auto temp = a; a = DecoratorKind(a + 1); return temp; }
	constexpr DecoratorKind& operator++(DecoratorKind& a) { return a = DecoratorKind(a + 1); }
	constexpr DecoratorKind operator--(DecoratorKind& a, int) { auto temp = a; a = DecoratorKind(a - 1); return temp; }
	constexpr DecoratorKind& operator--(DecoratorKind& a) { return a = DecoratorKind(a - 1); }
	constexpr bool operator==(const DecoratorKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const DecoratorKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const DecoratorKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const DecoratorKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const DecoratorKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const DecoratorKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const DecoratorKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const DecoratorKind& b) { return (a > (int)b); }
	constexpr bool operator<(const DecoratorKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const DecoratorKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const DecoratorKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const DecoratorKind& b) { return (a != (int)b); }
	// GENERATOR-END: DecoratorKind
	// GENERATOR-BEGIN: NumberKind
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	/// <summary>Number kind</summary>
	enum class NumberKind {
		Int8  = 0,
		UInt8  = 1,
		Int16  = 2,
		UInt16  = 3,
		Int32  = 4,
		UInt32  = 5,
		Int64  = 6,
		UInt64  = 7,
	};
	constexpr int operator+(const NumberKind& a, const NumberKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const NumberKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const NumberKind& b) { return (a + (int)b); }
	constexpr int operator-(const NumberKind& a, const NumberKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const NumberKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const NumberKind& b) { return (a - (int)b); }
	constexpr NumberKind operator++(NumberKind& a, int) { auto temp = a; a = NumberKind(a + 1); return temp; }
	constexpr NumberKind& operator++(NumberKind& a) { return a = NumberKind(a + 1); }
	constexpr NumberKind operator--(NumberKind& a, int) { auto temp = a; a = NumberKind(a - 1); return temp; }
	constexpr NumberKind& operator--(NumberKind& a) { return a = NumberKind(a - 1); }
	constexpr bool operator==(const NumberKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const NumberKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const NumberKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const NumberKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const NumberKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const NumberKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const NumberKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const NumberKind& b) { return (a > (int)b); }
	constexpr bool operator<(const NumberKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const NumberKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const NumberKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const NumberKind& b) { return (a != (int)b); }
	// GENERATOR-END: NumberKind

	/// <summary>
	/// Used by a <see cref="Formatter"/> to write all text
	/// </summary>
	class FormatterOutput
	{
		/// <summary>
		/// Writes text and text kind
		/// </summary>
		/// <param name="text">Text</param>
		/// <param name="kind">Text kind</param>
	public:
		constexpr virtual void Write(const std::string& text, FormatterTextKind kind) = 0;
		/// <summary>
		/// Writes a prefix
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="text">Prefix text</param>
		/// <param name="prefix">Prefix</param>
		constexpr virtual void WritePrefix(const Instruction& instruction, const std::string& text, PrefixKind prefix);
		/// <summary>
		/// Writes a mnemonic (see <see cref="Instruction.Mnemonic"/>)
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="text">Mnemonic text</param>
		constexpr virtual void WriteMnemonic(const Instruction& instruction, const std::string& text);
		/// <summary>
		/// Writes a number
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.</param>
		/// <param name="instructionOperand">Instruction operand number, 0-based, or -1 if it's an operand created by the formatter.</param>
		/// <param name="text">Number text</param>
		/// <param name="value">Value</param>
		/// <param name="numberKind">Number kind</param>
		/// <param name="kind">Text kind</param>
		constexpr virtual void WriteNumber(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const std::string& text, std::uint64_t value, NumberKind numberKind, FormatterTextKind kind);
		/// <summary>
		/// Writes a decorator
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.</param>
		/// <param name="instructionOperand">Instruction operand number, 0-based, or -1 if it's an operand created by the formatter.</param>
		/// <param name="text">Decorator text</param>
		/// <param name="decorator">Decorator</param>
		constexpr virtual void WriteDecorator(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const std::string& text, DecoratorKind decorator);
		/// <summary>
		/// Writes a register
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.</param>
		/// <param name="instructionOperand">Instruction operand number, 0-based, or -1 if it's an operand created by the formatter.</param>
		/// <param name="text">Register text</param>
		/// <param name="register">Register</param>
		constexpr virtual void WriteRegister(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const std::string& text, Register register_);
		/// <summary>
		/// Writes a symbol
		/// </summary>
		/// <param name="instruction">Instruction</param>
		/// <param name="operand">Operand number, 0-based. This is a formatter operand and isn't necessarily the same as an instruction operand.</param>
		/// <param name="instructionOperand">Instruction operand number, 0-based, or -1 if it's an operand created by the formatter.</param>
		/// <param name="address">Address</param>
		/// <param name="symbol">Symbol</param>
		constexpr virtual void WriteSymbol(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, std::uint64_t address, const SymbolResult& symbol);
		constexpr void Write(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const FormatterOptions& options, NumberFormatter const numberFormatter, const NumberFormattingOptions& numberOptions, std::uint64_t address, const SymbolResult& symbol, bool showSymbolAddress);
		constexpr void Write(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const FormatterOptions& options, NumberFormatter const numberFormatter, const NumberFormattingOptions& numberOptions, std::uint64_t address, const SymbolResult& symbol, bool showSymbolAddress, bool writeMinusIfSigned, bool spacesBetweenOp);
	};

	constexpr void FormatterOutput::WritePrefix(const Instruction& instruction, const std::string& text, PrefixKind prefix)
	{
		Write(text, FormatterTextKind::Prefix);
	}

	constexpr void FormatterOutput::WriteMnemonic(const Instruction& instruction, const std::string& text)
	{
		Write(text, FormatterTextKind::Mnemonic);
	}

	constexpr void FormatterOutput::WriteNumber(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const std::string& text, std::uint64_t value, NumberKind numberKind, FormatterTextKind kind)
	{
		Write(text, kind);
	}

	constexpr void FormatterOutput::WriteDecorator(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const std::string& text, DecoratorKind decorator)
	{
		Write(text, FormatterTextKind::Decorator);
	}

	constexpr void FormatterOutput::WriteRegister(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const std::string& text, Register register_)
	{
		Write(text, FormatterTextKind::Register);
	}

	constexpr void FormatterOutput::WriteSymbol(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, std::uint64_t address, const SymbolResult& symbol)
	{
		const auto& text = symbol.Text;
		auto array = text.TextArray;
		if (array != nullptr)
		{
			for (const auto& part : *array)
			{
				Write(part.Text, part.Color);
			}
		}
		else
		{
			const std::string& s = text.Text.Text;
			if (s != "")
			{
				Write(s, text.Text.Color);
			}
		}
	}

	constexpr void FormatterOutput::Write(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const FormatterOptions& options, NumberFormatter const numberFormatter, const NumberFormattingOptions& numberOptions, std::uint64_t address, const SymbolResult& symbol, bool showSymbolAddress)
	{
		Write(instruction, operand, instructionOperand, options, numberFormatter, numberOptions, address, symbol, showSymbolAddress, true, false);
	}

	constexpr void FormatterOutput::Write(const Instruction& instruction, std::int32_t operand, std::int32_t instructionOperand, const FormatterOptions& options, NumberFormatter const numberFormatter, const NumberFormattingOptions& numberOptions, std::uint64_t address, const SymbolResult& symbol, bool showSymbolAddress, bool writeMinusIfSigned, bool spacesBetweenOp)
	{
		std::int64_t displ = static_cast<std::int64_t>(address - symbol.Address);
		if ((symbol.Flags & SymbolFlags::Signed) != 0)
		{
			if (writeMinusIfSigned)
			{
				Write("-", FormatterTextKind::Operator);
			}
			displ = -displ;
		}
		WriteSymbol(instruction, operand, instructionOperand, address, symbol);
		NumberKind numberKind;
		if (displ != 0)
		{
			if (spacesBetweenOp)
			{
				Write(" ", FormatterTextKind::Text);
			}
			std::uint64_t origDispl = static_cast<std::uint64_t>(displ);
			if (displ < 0)
			{
				Write("-", FormatterTextKind::Operator);
				displ = -displ;
				if (displ <= std::numeric_limits<std::int8_t>::max() + 1)
				{
					numberKind = NumberKind::Int8;
				}
				else if (displ <= std::numeric_limits<std::int16_t>::max() + 1)
				{
					numberKind = NumberKind::Int16;
				}
				else if (displ <= static_cast<std::int64_t>(std::numeric_limits<std::int32_t>::max()) + 1)
				{
					numberKind = NumberKind::Int32;
				}
				else
				{
					numberKind = NumberKind::Int64;
				}
			}
			else
			{
				Write("+", FormatterTextKind::Operator);
				if (displ <= std::numeric_limits<std::int8_t>::max())
				{
					numberKind = NumberKind::Int8;
				}
				else if (displ <= std::numeric_limits<std::int16_t>::max())
				{
					numberKind = NumberKind::Int16;
				}
				else if (displ <= std::numeric_limits<std::int32_t>::max())
				{
					numberKind = NumberKind::Int32;
				}
				else
				{
					numberKind = NumberKind::Int64;
				}
			}
			if (spacesBetweenOp)
			{
				Write(" ", FormatterTextKind::Text);
			}
			auto s = numberFormatter.FormatUInt64(options, numberOptions, static_cast<std::uint64_t>(displ), false);
			WriteNumber(instruction, operand, instructionOperand, s, origDispl, numberKind, FormatterTextKind::Number);
		}
		if (showSymbolAddress)
		{
			Write(" ", FormatterTextKind::Text);
			Write("(", FormatterTextKind::Punctuation);
			std::string s;
			if (address <= std::numeric_limits<std::uint16_t>::max())
			{
				s = numberFormatter.FormatUInt16(options, numberOptions, static_cast<std::uint16_t>(address), true);
				numberKind = NumberKind::UInt16;
			}
			else if (address <= std::numeric_limits<std::uint32_t>::max())
			{
				s = numberFormatter.FormatUInt32(options, numberOptions, static_cast<std::uint32_t>(address), true);
				numberKind = NumberKind::UInt32;
			}
			else
			{
				s = numberFormatter.FormatUInt64(options, numberOptions, address, true);
				numberKind = NumberKind::UInt64;
			}
			WriteNumber(instruction, operand, instructionOperand, s, address, numberKind, FormatterTextKind::Number);
			Write(")", FormatterTextKind::Punctuation);
		}
	}
}
#endif
