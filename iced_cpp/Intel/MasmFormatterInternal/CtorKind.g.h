/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(MASM)
#include <array>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel::MasmFormatterInternal {
	enum class CtorKind {
		Previous ,
		Normal_1 ,
		Normal_2 ,
		AamAad ,
		AX ,
		AY ,
		bnd ,
		STIG1 ,
		DeclareData ,
		DX ,
		fword ,
		Int3 ,
		imul ,
		invlpga ,
		CCa_1 ,
		CCa_2 ,
		CCa_3 ,
		CCb_1 ,
		CCb_2 ,
		CCb_3 ,
		jcc_1 ,
		jcc_2 ,
		jcc_3 ,
		Loopcc1 ,
		Loopcc2 ,
		maskmovq ,
		memsize ,
		YD ,
		YX ,
		monitor ,
		mwait ,
		mwaitx ,
		nop ,
		OpSize_1 ,
		OpSize_2 ,
		OpSize2 ,
		YA ,
		pblendvb ,
		pclmulqdq ,
		pops_2 ,
		pops_3 ,
		XY ,
		reg ,
		Reg16 ,
		Reg32 ,
		reverse ,
		ST_STi ,
		STi_ST ,
		XLAT ,
	};
	constexpr int operator+(const CtorKind& a, const CtorKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const CtorKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const CtorKind& b) { return (a + (int)b); }
	constexpr int operator-(const CtorKind& a, const CtorKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const CtorKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const CtorKind& b) { return (a - (int)b); }
	constexpr CtorKind operator++(CtorKind& a, int) { auto temp = a; a = CtorKind(a + 1); return temp; }
	constexpr CtorKind& operator++(CtorKind& a) { return a = CtorKind(a + 1); }
	constexpr CtorKind operator--(CtorKind& a, int) { auto temp = a; a = CtorKind(a - 1); return temp; }
	constexpr CtorKind& operator--(CtorKind& a) { return a = CtorKind(a - 1); }
	constexpr bool operator==(const CtorKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const CtorKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const CtorKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const CtorKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const CtorKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const CtorKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const CtorKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const CtorKind& b) { return (a > (int)b); }
	constexpr bool operator<(const CtorKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const CtorKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const CtorKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const CtorKind& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MasmFormatterInternal::CtorKind& e) {
	switch (e) {
		case Iced::Intel::MasmFormatterInternal::CtorKind::Previous: return "Previous";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Normal_1: return "Normal_1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Normal_2: return "Normal_2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::AamAad: return "AamAad";
		case Iced::Intel::MasmFormatterInternal::CtorKind::AX: return "AX";
		case Iced::Intel::MasmFormatterInternal::CtorKind::AY: return "AY";
		case Iced::Intel::MasmFormatterInternal::CtorKind::bnd: return "bnd";
		case Iced::Intel::MasmFormatterInternal::CtorKind::STIG1: return "STIG1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::DeclareData: return "DeclareData";
		case Iced::Intel::MasmFormatterInternal::CtorKind::DX: return "DX";
		case Iced::Intel::MasmFormatterInternal::CtorKind::fword: return "fword";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Int3: return "Int3";
		case Iced::Intel::MasmFormatterInternal::CtorKind::imul: return "imul";
		case Iced::Intel::MasmFormatterInternal::CtorKind::invlpga: return "invlpga";
		case Iced::Intel::MasmFormatterInternal::CtorKind::CCa_1: return "CCa_1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::CCa_2: return "CCa_2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::CCa_3: return "CCa_3";
		case Iced::Intel::MasmFormatterInternal::CtorKind::CCb_1: return "CCb_1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::CCb_2: return "CCb_2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::CCb_3: return "CCb_3";
		case Iced::Intel::MasmFormatterInternal::CtorKind::jcc_1: return "jcc_1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::jcc_2: return "jcc_2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::jcc_3: return "jcc_3";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Loopcc1: return "Loopcc1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Loopcc2: return "Loopcc2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::maskmovq: return "maskmovq";
		case Iced::Intel::MasmFormatterInternal::CtorKind::memsize: return "memsize";
		case Iced::Intel::MasmFormatterInternal::CtorKind::YD: return "YD";
		case Iced::Intel::MasmFormatterInternal::CtorKind::YX: return "YX";
		case Iced::Intel::MasmFormatterInternal::CtorKind::monitor: return "monitor";
		case Iced::Intel::MasmFormatterInternal::CtorKind::mwait: return "mwait";
		case Iced::Intel::MasmFormatterInternal::CtorKind::mwaitx: return "mwaitx";
		case Iced::Intel::MasmFormatterInternal::CtorKind::nop: return "nop";
		case Iced::Intel::MasmFormatterInternal::CtorKind::OpSize_1: return "OpSize_1";
		case Iced::Intel::MasmFormatterInternal::CtorKind::OpSize_2: return "OpSize_2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::OpSize2: return "OpSize2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::YA: return "YA";
		case Iced::Intel::MasmFormatterInternal::CtorKind::pblendvb: return "pblendvb";
		case Iced::Intel::MasmFormatterInternal::CtorKind::pclmulqdq: return "pclmulqdq";
		case Iced::Intel::MasmFormatterInternal::CtorKind::pops_2: return "pops_2";
		case Iced::Intel::MasmFormatterInternal::CtorKind::pops_3: return "pops_3";
		case Iced::Intel::MasmFormatterInternal::CtorKind::XY: return "XY";
		case Iced::Intel::MasmFormatterInternal::CtorKind::reg: return "reg";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Reg16: return "Reg16";
		case Iced::Intel::MasmFormatterInternal::CtorKind::Reg32: return "Reg32";
		case Iced::Intel::MasmFormatterInternal::CtorKind::reverse: return "reverse";
		case Iced::Intel::MasmFormatterInternal::CtorKind::ST_STi: return "ST_STi";
		case Iced::Intel::MasmFormatterInternal::CtorKind::STi_ST: return "STi_ST";
		case Iced::Intel::MasmFormatterInternal::CtorKind::XLAT: return "XLAT";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
