/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MemorySize {
		/// <summary>Unknown size or the instruction doesn&apos;t reference any memory (eg. <c>LEA</c>)</summary>
		Unknown  = 0,
		/// <summary>Memory location contains a <c>byte</c></summary>
		UInt8  = 1,
		/// <summary>Memory location contains a <c>ushort</c></summary>
		UInt16  = 2,
		/// <summary>Memory location contains a <c>uint</c></summary>
		UInt32  = 3,
		/// <summary>Memory location contains a <c>uint52</c></summary>
		UInt52  = 4,
		/// <summary>Memory location contains a <c>ulong</c></summary>
		UInt64  = 5,
		/// <summary>Memory location contains a <c>uint128</c></summary>
		UInt128  = 6,
		/// <summary>Memory location contains a <c>uint256</c></summary>
		UInt256  = 7,
		/// <summary>Memory location contains a <c>uint512</c></summary>
		UInt512  = 8,
		/// <summary>Memory location contains a <c>sbyte</c></summary>
		Int8  = 9,
		/// <summary>Memory location contains a <see cref="short_"/></summary>
		Int16  = 10,
		/// <summary>Memory location contains a <see cref="int_"/></summary>
		Int32  = 11,
		/// <summary>Memory location contains a <see cref="long_"/></summary>
		Int64  = 12,
		/// <summary>Memory location contains a <c>int128</c></summary>
		Int128  = 13,
		/// <summary>Memory location contains a <c>int256</c></summary>
		Int256  = 14,
		/// <summary>Memory location contains a <c>int512</c></summary>
		Int512  = 15,
		/// <summary>Memory location contains a seg:ptr pair, <c>ushort</c> (offset) + <c>ushort</c> (segment/selector)</summary>
		SegPtr16  = 16,
		/// <summary>Memory location contains a seg:ptr pair, <c>uint</c> (offset) + <c>ushort</c> (segment/selector)</summary>
		SegPtr32  = 17,
		/// <summary>Memory location contains a seg:ptr pair, <c>ulong</c> (offset) + <c>ushort</c> (segment/selector)</summary>
		SegPtr64  = 18,
		/// <summary>Memory location contains a 16-bit offset (<c>JMP/CALL WORD PTR [mem]</c>)</summary>
		WordOffset  = 19,
		/// <summary>Memory location contains a 32-bit offset (<c>JMP/CALL DWORD PTR [mem]</c>)</summary>
		DwordOffset  = 20,
		/// <summary>Memory location contains a 64-bit offset (<c>JMP/CALL QWORD PTR [mem]</c>)</summary>
		QwordOffset  = 21,
		/// <summary>Memory location contains two <c>ushort</c>s (16-bit <c>BOUND</c>)</summary>
		Bound16_WordWord  = 22,
		/// <summary>Memory location contains two <c>uint</c>s (32-bit <c>BOUND</c>)</summary>
		Bound32_DwordDword  = 23,
		/// <summary>32-bit <c>BNDMOV</c>, 2 x <c>uint</c></summary>
		Bnd32  = 24,
		/// <summary>64-bit <c>BNDMOV</c>, 2 x <c>ulong</c></summary>
		Bnd64  = 25,
		/// <summary>Memory location contains a 16-bit limit and a 32-bit address (eg. <c>LGDTW</c>, <c>LGDTD</c>)</summary>
		Fword6  = 26,
		/// <summary>Memory location contains a 16-bit limit and a 64-bit address (eg. <c>LGDTQ</c>)</summary>
		Fword10  = 27,
		/// <summary>Memory location contains a <c>float16</c></summary>
		Float16  = 28,
		/// <summary>Memory location contains a <see cref="float_"/></summary>
		Float32  = 29,
		/// <summary>Memory location contains a <see cref="double_"/></summary>
		Float64  = 30,
		/// <summary>Memory location contains a <c>float80</c></summary>
		Float80  = 31,
		/// <summary>Memory location contains a <c>float128</c></summary>
		Float128  = 32,
		/// <summary>Memory location contains a <c>bfloat16</c></summary>
		BFloat16  = 33,
		/// <summary>Memory location contains a 14-byte FPU environment (16-bit <c>FLDENV</c>/<c>FSTENV</c>)</summary>
		FpuEnv14  = 34,
		/// <summary>Memory location contains a 28-byte FPU environment (32/64-bit <c>FLDENV</c>/<c>FSTENV</c>)</summary>
		FpuEnv28  = 35,
		/// <summary>Memory location contains a 94-byte FPU environment (16-bit <c>FSAVE</c>/<c>FRSTOR</c>)</summary>
		FpuState94  = 36,
		/// <summary>Memory location contains a 108-byte FPU environment (32/64-bit <c>FSAVE</c>/<c>FRSTOR</c>)</summary>
		FpuState108  = 37,
		/// <summary>Memory location contains 512-bytes of <c>FXSAVE</c>/<c>FXRSTOR</c> data</summary>
		Fxsave_512Byte  = 38,
		/// <summary>Memory location contains 512-bytes of <c>FXSAVE64</c>/<c>FXRSTOR64</c> data</summary>
		Fxsave64_512Byte  = 39,
		/// <summary>32-bit <c>XSAVE</c> area</summary>
		Xsave  = 40,
		/// <summary>64-bit <c>XSAVE</c> area</summary>
		Xsave64  = 41,
		/// <summary>Memory location contains a 10-byte <c>bcd</c> value (<c>FBLD</c>/<c>FBSTP</c>)</summary>
		Bcd  = 42,
		/// <summary>64-bit location: TILECFG (<c>LDTILECFG</c>/<c>STTILECFG</c>)</summary>
		Tilecfg  = 43,
		/// <summary>Tile data</summary>
		Tile  = 44,
		/// <summary>80-bit segment descriptor and selector: 0-7 = descriptor, 8-9 = selector</summary>
		SegmentDescSelector  = 45,
		/// <summary>384-bit AES 128 handle (Key Locker)</summary>
		KLHandleAes128  = 46,
		/// <summary>512-bit AES 256 handle (Key Locker)</summary>
		KLHandleAes256  = 47,
		/// <summary>16-bit location: 2 x <c>byte</c></summary>
		Packed16_UInt8  = 48,
		/// <summary>16-bit location: 2 x <c>sbyte</c></summary>
		Packed16_Int8  = 49,
		/// <summary>32-bit location: 4 x <c>byte</c></summary>
		Packed32_UInt8  = 50,
		/// <summary>32-bit location: 4 x <c>sbyte</c></summary>
		Packed32_Int8  = 51,
		/// <summary>32-bit location: 2 x <c>ushort</c></summary>
		Packed32_UInt16  = 52,
		/// <summary>32-bit location: 2 x <see cref="short_"/></summary>
		Packed32_Int16  = 53,
		/// <summary>32-bit location: 2 x <c>float16</c></summary>
		Packed32_Float16  = 54,
		/// <summary>32-bit location: 2 x <c>bfloat16</c></summary>
		Packed32_BFloat16  = 55,
		/// <summary>64-bit location: 8 x <c>byte</c></summary>
		Packed64_UInt8  = 56,
		/// <summary>64-bit location: 8 x <c>sbyte</c></summary>
		Packed64_Int8  = 57,
		/// <summary>64-bit location: 4 x <c>ushort</c></summary>
		Packed64_UInt16  = 58,
		/// <summary>64-bit location: 4 x <see cref="short_"/></summary>
		Packed64_Int16  = 59,
		/// <summary>64-bit location: 2 x <c>uint</c></summary>
		Packed64_UInt32  = 60,
		/// <summary>64-bit location: 2 x <see cref="int_"/></summary>
		Packed64_Int32  = 61,
		/// <summary>64-bit location: 4 x <c>float16</c></summary>
		Packed64_Float16  = 62,
		/// <summary>64-bit location: 2 x <see cref="float_"/></summary>
		Packed64_Float32  = 63,
		/// <summary>128-bit location: 16 x <c>byte</c></summary>
		Packed128_UInt8  = 64,
		/// <summary>128-bit location: 16 x <c>sbyte</c></summary>
		Packed128_Int8  = 65,
		/// <summary>128-bit location: 8 x <c>ushort</c></summary>
		Packed128_UInt16  = 66,
		/// <summary>128-bit location: 8 x <see cref="short_"/></summary>
		Packed128_Int16  = 67,
		/// <summary>128-bit location: 4 x <c>uint</c></summary>
		Packed128_UInt32  = 68,
		/// <summary>128-bit location: 4 x <see cref="int_"/></summary>
		Packed128_Int32  = 69,
		/// <summary>128-bit location: 2 x <c>uint52</c></summary>
		Packed128_UInt52  = 70,
		/// <summary>128-bit location: 2 x <c>ulong</c></summary>
		Packed128_UInt64  = 71,
		/// <summary>128-bit location: 2 x <see cref="long_"/></summary>
		Packed128_Int64  = 72,
		/// <summary>128-bit location: 8 x <c>float16</c></summary>
		Packed128_Float16  = 73,
		/// <summary>128-bit location: 4 x <see cref="float_"/></summary>
		Packed128_Float32  = 74,
		/// <summary>128-bit location: 2 x <see cref="double_"/></summary>
		Packed128_Float64  = 75,
		/// <summary>128-bit location: 4 x (2 x <c>float16</c>)</summary>
		Packed128_2xFloat16  = 76,
		/// <summary>128-bit location: 4 x (2 x <c>bfloat16</c>)</summary>
		Packed128_2xBFloat16  = 77,
		/// <summary>256-bit location: 32 x <c>byte</c></summary>
		Packed256_UInt8  = 78,
		/// <summary>256-bit location: 32 x <c>sbyte</c></summary>
		Packed256_Int8  = 79,
		/// <summary>256-bit location: 16 x <c>ushort</c></summary>
		Packed256_UInt16  = 80,
		/// <summary>256-bit location: 16 x <see cref="short_"/></summary>
		Packed256_Int16  = 81,
		/// <summary>256-bit location: 8 x <c>uint</c></summary>
		Packed256_UInt32  = 82,
		/// <summary>256-bit location: 8 x <see cref="int_"/></summary>
		Packed256_Int32  = 83,
		/// <summary>256-bit location: 4 x <c>uint52</c></summary>
		Packed256_UInt52  = 84,
		/// <summary>256-bit location: 4 x <c>ulong</c></summary>
		Packed256_UInt64  = 85,
		/// <summary>256-bit location: 4 x <see cref="long_"/></summary>
		Packed256_Int64  = 86,
		/// <summary>256-bit location: 2 x <c>uint128</c></summary>
		Packed256_UInt128  = 87,
		/// <summary>256-bit location: 2 x <c>int128</c></summary>
		Packed256_Int128  = 88,
		/// <summary>256-bit location: 16 x <c>float16</c></summary>
		Packed256_Float16  = 89,
		/// <summary>256-bit location: 8 x <see cref="float_"/></summary>
		Packed256_Float32  = 90,
		/// <summary>256-bit location: 4 x <see cref="double_"/></summary>
		Packed256_Float64  = 91,
		/// <summary>256-bit location: 2 x <c>float128</c></summary>
		Packed256_Float128  = 92,
		/// <summary>256-bit location: 8 x (2 x <c>float16</c>)</summary>
		Packed256_2xFloat16  = 93,
		/// <summary>256-bit location: 8 x (2 x <c>bfloat16</c>)</summary>
		Packed256_2xBFloat16  = 94,
		/// <summary>512-bit location: 64 x <c>byte</c></summary>
		Packed512_UInt8  = 95,
		/// <summary>512-bit location: 64 x <c>sbyte</c></summary>
		Packed512_Int8  = 96,
		/// <summary>512-bit location: 32 x <c>ushort</c></summary>
		Packed512_UInt16  = 97,
		/// <summary>512-bit location: 32 x <see cref="short_"/></summary>
		Packed512_Int16  = 98,
		/// <summary>512-bit location: 16 x <c>uint</c></summary>
		Packed512_UInt32  = 99,
		/// <summary>512-bit location: 16 x <see cref="int_"/></summary>
		Packed512_Int32  = 100,
		/// <summary>512-bit location: 8 x <c>uint52</c></summary>
		Packed512_UInt52  = 101,
		/// <summary>512-bit location: 8 x <c>ulong</c></summary>
		Packed512_UInt64  = 102,
		/// <summary>512-bit location: 8 x <see cref="long_"/></summary>
		Packed512_Int64  = 103,
		/// <summary>256-bit location: 4 x <c>uint128</c></summary>
		Packed512_UInt128  = 104,
		/// <summary>512-bit location: 32 x <c>float16</c></summary>
		Packed512_Float16  = 105,
		/// <summary>512-bit location: 16 x <see cref="float_"/></summary>
		Packed512_Float32  = 106,
		/// <summary>512-bit location: 8 x <see cref="double_"/></summary>
		Packed512_Float64  = 107,
		/// <summary>512-bit location: 16 x (2 x <c>float16</c>)</summary>
		Packed512_2xFloat16  = 108,
		/// <summary>512-bit location: 16 x (2 x <c>bfloat16</c>)</summary>
		Packed512_2xBFloat16  = 109,
		/// <summary>Broadcast <c>float16</c> to 32-bits</summary>
		Broadcast32_Float16  = 110,
		/// <summary>Broadcast <c>uint</c> to 64-bits</summary>
		Broadcast64_UInt32  = 111,
		/// <summary>Broadcast <see cref="int_"/> to 64-bits</summary>
		Broadcast64_Int32  = 112,
		/// <summary>Broadcast <c>float16</c> to 64-bits</summary>
		Broadcast64_Float16  = 113,
		/// <summary>Broadcast <see cref="float_"/> to 64-bits</summary>
		Broadcast64_Float32  = 114,
		/// <summary>Broadcast <see cref="short_"/> to 128-bits</summary>
		Broadcast128_Int16  = 115,
		/// <summary>Broadcast <c>ushort</c> to 128-bits</summary>
		Broadcast128_UInt16  = 116,
		/// <summary>Broadcast <c>uint</c> to 128-bits</summary>
		Broadcast128_UInt32  = 117,
		/// <summary>Broadcast <see cref="int_"/> to 128-bits</summary>
		Broadcast128_Int32  = 118,
		/// <summary>Broadcast <c>uint52</c> to 128-bits</summary>
		Broadcast128_UInt52  = 119,
		/// <summary>Broadcast <c>ulong</c> to 128-bits</summary>
		Broadcast128_UInt64  = 120,
		/// <summary>Broadcast <see cref="long_"/> to 128-bits</summary>
		Broadcast128_Int64  = 121,
		/// <summary>Broadcast <c>float16</c> to 128-bits</summary>
		Broadcast128_Float16  = 122,
		/// <summary>Broadcast <see cref="float_"/> to 128-bits</summary>
		Broadcast128_Float32  = 123,
		/// <summary>Broadcast <see cref="double_"/> to 128-bits</summary>
		Broadcast128_Float64  = 124,
		/// <summary>Broadcast 2 x <see cref="short_"/> to 128-bits</summary>
		Broadcast128_2xInt16  = 125,
		/// <summary>Broadcast 2 x <see cref="int_"/> to 128-bits</summary>
		Broadcast128_2xInt32  = 126,
		/// <summary>Broadcast 2 x <c>uint</c> to 128-bits</summary>
		Broadcast128_2xUInt32  = 127,
		/// <summary>Broadcast 2 x <c>float16</c> to 128-bits</summary>
		Broadcast128_2xFloat16  = 128,
		/// <summary>Broadcast 2 x <c>bfloat16</c> to 128-bits</summary>
		Broadcast128_2xBFloat16  = 129,
		/// <summary>Broadcast <see cref="short_"/> to 256-bits</summary>
		Broadcast256_Int16  = 130,
		/// <summary>Broadcast <c>ushort</c> to 256-bits</summary>
		Broadcast256_UInt16  = 131,
		/// <summary>Broadcast <c>uint</c> to 256-bits</summary>
		Broadcast256_UInt32  = 132,
		/// <summary>Broadcast <see cref="int_"/> to 256-bits</summary>
		Broadcast256_Int32  = 133,
		/// <summary>Broadcast <c>uint52</c> to 256-bits</summary>
		Broadcast256_UInt52  = 134,
		/// <summary>Broadcast <c>ulong</c> to 256-bits</summary>
		Broadcast256_UInt64  = 135,
		/// <summary>Broadcast <see cref="long_"/> to 256-bits</summary>
		Broadcast256_Int64  = 136,
		/// <summary>Broadcast <c>float16</c> to 256-bits</summary>
		Broadcast256_Float16  = 137,
		/// <summary>Broadcast <see cref="float_"/> to 256-bits</summary>
		Broadcast256_Float32  = 138,
		/// <summary>Broadcast <see cref="double_"/> to 256-bits</summary>
		Broadcast256_Float64  = 139,
		/// <summary>Broadcast 2 x <see cref="short_"/> to 256-bits</summary>
		Broadcast256_2xInt16  = 140,
		/// <summary>Broadcast 2 x <see cref="int_"/> to 256-bits</summary>
		Broadcast256_2xInt32  = 141,
		/// <summary>Broadcast 2 x <c>uint</c> to 256-bits</summary>
		Broadcast256_2xUInt32  = 142,
		/// <summary>Broadcast 2 x <c>float16</c> to 256-bits</summary>
		Broadcast256_2xFloat16  = 143,
		/// <summary>Broadcast 2 x <c>bfloat16</c> to 256-bits</summary>
		Broadcast256_2xBFloat16  = 144,
		/// <summary>Broadcast <see cref="short_"/> to 512-bits</summary>
		Broadcast512_Int16  = 145,
		/// <summary>Broadcast <c>ushort</c> to 512-bits</summary>
		Broadcast512_UInt16  = 146,
		/// <summary>Broadcast <c>uint</c> to 512-bits</summary>
		Broadcast512_UInt32  = 147,
		/// <summary>Broadcast <see cref="int_"/> to 512-bits</summary>
		Broadcast512_Int32  = 148,
		/// <summary>Broadcast <c>uint52</c> to 512-bits</summary>
		Broadcast512_UInt52  = 149,
		/// <summary>Broadcast <c>ulong</c> to 512-bits</summary>
		Broadcast512_UInt64  = 150,
		/// <summary>Broadcast <see cref="long_"/> to 512-bits</summary>
		Broadcast512_Int64  = 151,
		/// <summary>Broadcast <c>float16</c> to 512-bits</summary>
		Broadcast512_Float16  = 152,
		/// <summary>Broadcast <see cref="float_"/> to 512-bits</summary>
		Broadcast512_Float32  = 153,
		/// <summary>Broadcast <see cref="double_"/> to 512-bits</summary>
		Broadcast512_Float64  = 154,
		/// <summary>Broadcast 2 x <c>float16</c> to 512-bits</summary>
		Broadcast512_2xFloat16  = 155,
		/// <summary>Broadcast 2 x <see cref="short_"/> to 512-bits</summary>
		Broadcast512_2xInt16  = 156,
		/// <summary>Broadcast 2 x <c>uint</c> to 512-bits</summary>
		Broadcast512_2xUInt32  = 157,
		/// <summary>Broadcast 2 x <see cref="int_"/> to 512-bits</summary>
		Broadcast512_2xInt32  = 158,
		/// <summary>Broadcast 2 x <c>bfloat16</c> to 512-bits</summary>
		Broadcast512_2xBFloat16  = 159,
	};
	constexpr int operator+(const MemorySize& a, const MemorySize& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MemorySize& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MemorySize& b) { return (a + (int)b); }
	constexpr int operator-(const MemorySize& a, const MemorySize& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MemorySize& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MemorySize& b) { return (a - (int)b); }
	constexpr MemorySize operator++(MemorySize& a, int) { auto temp = a; a = MemorySize(a + 1); return temp; }
	constexpr MemorySize& operator++(MemorySize& a) { return a = MemorySize(a + 1); }
	constexpr MemorySize operator--(MemorySize& a, int) { auto temp = a; a = MemorySize(a - 1); return temp; }
	constexpr MemorySize& operator--(MemorySize& a) { return a = MemorySize(a - 1); }
	constexpr bool operator==(const MemorySize& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MemorySize& b) { return (a == (int)b); }
	constexpr bool operator>=(const MemorySize& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MemorySize& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MemorySize& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MemorySize& b) { return (a <= (int)b); }
	constexpr bool operator>(const MemorySize& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MemorySize& b) { return (a > (int)b); }
	constexpr bool operator<(const MemorySize& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MemorySize& b) { return (a < (int)b); }
	constexpr bool operator!=(const MemorySize& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MemorySize& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MemorySize& e) {
	switch (e) {
		case Iced::Intel::MemorySize::Unknown: return "Unknown";
		case Iced::Intel::MemorySize::UInt8: return "UInt8";
		case Iced::Intel::MemorySize::UInt16: return "UInt16";
		case Iced::Intel::MemorySize::UInt32: return "UInt32";
		case Iced::Intel::MemorySize::UInt52: return "UInt52";
		case Iced::Intel::MemorySize::UInt64: return "UInt64";
		case Iced::Intel::MemorySize::UInt128: return "UInt128";
		case Iced::Intel::MemorySize::UInt256: return "UInt256";
		case Iced::Intel::MemorySize::UInt512: return "UInt512";
		case Iced::Intel::MemorySize::Int8: return "Int8";
		case Iced::Intel::MemorySize::Int16: return "Int16";
		case Iced::Intel::MemorySize::Int32: return "Int32";
		case Iced::Intel::MemorySize::Int64: return "Int64";
		case Iced::Intel::MemorySize::Int128: return "Int128";
		case Iced::Intel::MemorySize::Int256: return "Int256";
		case Iced::Intel::MemorySize::Int512: return "Int512";
		case Iced::Intel::MemorySize::SegPtr16: return "SegPtr16";
		case Iced::Intel::MemorySize::SegPtr32: return "SegPtr32";
		case Iced::Intel::MemorySize::SegPtr64: return "SegPtr64";
		case Iced::Intel::MemorySize::WordOffset: return "WordOffset";
		case Iced::Intel::MemorySize::DwordOffset: return "DwordOffset";
		case Iced::Intel::MemorySize::QwordOffset: return "QwordOffset";
		case Iced::Intel::MemorySize::Bound16_WordWord: return "Bound16_WordWord";
		case Iced::Intel::MemorySize::Bound32_DwordDword: return "Bound32_DwordDword";
		case Iced::Intel::MemorySize::Bnd32: return "Bnd32";
		case Iced::Intel::MemorySize::Bnd64: return "Bnd64";
		case Iced::Intel::MemorySize::Fword6: return "Fword6";
		case Iced::Intel::MemorySize::Fword10: return "Fword10";
		case Iced::Intel::MemorySize::Float16: return "Float16";
		case Iced::Intel::MemorySize::Float32: return "Float32";
		case Iced::Intel::MemorySize::Float64: return "Float64";
		case Iced::Intel::MemorySize::Float80: return "Float80";
		case Iced::Intel::MemorySize::Float128: return "Float128";
		case Iced::Intel::MemorySize::BFloat16: return "BFloat16";
		case Iced::Intel::MemorySize::FpuEnv14: return "FpuEnv14";
		case Iced::Intel::MemorySize::FpuEnv28: return "FpuEnv28";
		case Iced::Intel::MemorySize::FpuState94: return "FpuState94";
		case Iced::Intel::MemorySize::FpuState108: return "FpuState108";
		case Iced::Intel::MemorySize::Fxsave_512Byte: return "Fxsave_512Byte";
		case Iced::Intel::MemorySize::Fxsave64_512Byte: return "Fxsave64_512Byte";
		case Iced::Intel::MemorySize::Xsave: return "Xsave";
		case Iced::Intel::MemorySize::Xsave64: return "Xsave64";
		case Iced::Intel::MemorySize::Bcd: return "Bcd";
		case Iced::Intel::MemorySize::Tilecfg: return "Tilecfg";
		case Iced::Intel::MemorySize::Tile: return "Tile";
		case Iced::Intel::MemorySize::SegmentDescSelector: return "SegmentDescSelector";
		case Iced::Intel::MemorySize::KLHandleAes128: return "KLHandleAes128";
		case Iced::Intel::MemorySize::KLHandleAes256: return "KLHandleAes256";
		case Iced::Intel::MemorySize::Packed16_UInt8: return "Packed16_UInt8";
		case Iced::Intel::MemorySize::Packed16_Int8: return "Packed16_Int8";
		case Iced::Intel::MemorySize::Packed32_UInt8: return "Packed32_UInt8";
		case Iced::Intel::MemorySize::Packed32_Int8: return "Packed32_Int8";
		case Iced::Intel::MemorySize::Packed32_UInt16: return "Packed32_UInt16";
		case Iced::Intel::MemorySize::Packed32_Int16: return "Packed32_Int16";
		case Iced::Intel::MemorySize::Packed32_Float16: return "Packed32_Float16";
		case Iced::Intel::MemorySize::Packed32_BFloat16: return "Packed32_BFloat16";
		case Iced::Intel::MemorySize::Packed64_UInt8: return "Packed64_UInt8";
		case Iced::Intel::MemorySize::Packed64_Int8: return "Packed64_Int8";
		case Iced::Intel::MemorySize::Packed64_UInt16: return "Packed64_UInt16";
		case Iced::Intel::MemorySize::Packed64_Int16: return "Packed64_Int16";
		case Iced::Intel::MemorySize::Packed64_UInt32: return "Packed64_UInt32";
		case Iced::Intel::MemorySize::Packed64_Int32: return "Packed64_Int32";
		case Iced::Intel::MemorySize::Packed64_Float16: return "Packed64_Float16";
		case Iced::Intel::MemorySize::Packed64_Float32: return "Packed64_Float32";
		case Iced::Intel::MemorySize::Packed128_UInt8: return "Packed128_UInt8";
		case Iced::Intel::MemorySize::Packed128_Int8: return "Packed128_Int8";
		case Iced::Intel::MemorySize::Packed128_UInt16: return "Packed128_UInt16";
		case Iced::Intel::MemorySize::Packed128_Int16: return "Packed128_Int16";
		case Iced::Intel::MemorySize::Packed128_UInt32: return "Packed128_UInt32";
		case Iced::Intel::MemorySize::Packed128_Int32: return "Packed128_Int32";
		case Iced::Intel::MemorySize::Packed128_UInt52: return "Packed128_UInt52";
		case Iced::Intel::MemorySize::Packed128_UInt64: return "Packed128_UInt64";
		case Iced::Intel::MemorySize::Packed128_Int64: return "Packed128_Int64";
		case Iced::Intel::MemorySize::Packed128_Float16: return "Packed128_Float16";
		case Iced::Intel::MemorySize::Packed128_Float32: return "Packed128_Float32";
		case Iced::Intel::MemorySize::Packed128_Float64: return "Packed128_Float64";
		case Iced::Intel::MemorySize::Packed128_2xFloat16: return "Packed128_2xFloat16";
		case Iced::Intel::MemorySize::Packed128_2xBFloat16: return "Packed128_2xBFloat16";
		case Iced::Intel::MemorySize::Packed256_UInt8: return "Packed256_UInt8";
		case Iced::Intel::MemorySize::Packed256_Int8: return "Packed256_Int8";
		case Iced::Intel::MemorySize::Packed256_UInt16: return "Packed256_UInt16";
		case Iced::Intel::MemorySize::Packed256_Int16: return "Packed256_Int16";
		case Iced::Intel::MemorySize::Packed256_UInt32: return "Packed256_UInt32";
		case Iced::Intel::MemorySize::Packed256_Int32: return "Packed256_Int32";
		case Iced::Intel::MemorySize::Packed256_UInt52: return "Packed256_UInt52";
		case Iced::Intel::MemorySize::Packed256_UInt64: return "Packed256_UInt64";
		case Iced::Intel::MemorySize::Packed256_Int64: return "Packed256_Int64";
		case Iced::Intel::MemorySize::Packed256_UInt128: return "Packed256_UInt128";
		case Iced::Intel::MemorySize::Packed256_Int128: return "Packed256_Int128";
		case Iced::Intel::MemorySize::Packed256_Float16: return "Packed256_Float16";
		case Iced::Intel::MemorySize::Packed256_Float32: return "Packed256_Float32";
		case Iced::Intel::MemorySize::Packed256_Float64: return "Packed256_Float64";
		case Iced::Intel::MemorySize::Packed256_Float128: return "Packed256_Float128";
		case Iced::Intel::MemorySize::Packed256_2xFloat16: return "Packed256_2xFloat16";
		case Iced::Intel::MemorySize::Packed256_2xBFloat16: return "Packed256_2xBFloat16";
		case Iced::Intel::MemorySize::Packed512_UInt8: return "Packed512_UInt8";
		case Iced::Intel::MemorySize::Packed512_Int8: return "Packed512_Int8";
		case Iced::Intel::MemorySize::Packed512_UInt16: return "Packed512_UInt16";
		case Iced::Intel::MemorySize::Packed512_Int16: return "Packed512_Int16";
		case Iced::Intel::MemorySize::Packed512_UInt32: return "Packed512_UInt32";
		case Iced::Intel::MemorySize::Packed512_Int32: return "Packed512_Int32";
		case Iced::Intel::MemorySize::Packed512_UInt52: return "Packed512_UInt52";
		case Iced::Intel::MemorySize::Packed512_UInt64: return "Packed512_UInt64";
		case Iced::Intel::MemorySize::Packed512_Int64: return "Packed512_Int64";
		case Iced::Intel::MemorySize::Packed512_UInt128: return "Packed512_UInt128";
		case Iced::Intel::MemorySize::Packed512_Float16: return "Packed512_Float16";
		case Iced::Intel::MemorySize::Packed512_Float32: return "Packed512_Float32";
		case Iced::Intel::MemorySize::Packed512_Float64: return "Packed512_Float64";
		case Iced::Intel::MemorySize::Packed512_2xFloat16: return "Packed512_2xFloat16";
		case Iced::Intel::MemorySize::Packed512_2xBFloat16: return "Packed512_2xBFloat16";
		case Iced::Intel::MemorySize::Broadcast32_Float16: return "Broadcast32_Float16";
		case Iced::Intel::MemorySize::Broadcast64_UInt32: return "Broadcast64_UInt32";
		case Iced::Intel::MemorySize::Broadcast64_Int32: return "Broadcast64_Int32";
		case Iced::Intel::MemorySize::Broadcast64_Float16: return "Broadcast64_Float16";
		case Iced::Intel::MemorySize::Broadcast64_Float32: return "Broadcast64_Float32";
		case Iced::Intel::MemorySize::Broadcast128_Int16: return "Broadcast128_Int16";
		case Iced::Intel::MemorySize::Broadcast128_UInt16: return "Broadcast128_UInt16";
		case Iced::Intel::MemorySize::Broadcast128_UInt32: return "Broadcast128_UInt32";
		case Iced::Intel::MemorySize::Broadcast128_Int32: return "Broadcast128_Int32";
		case Iced::Intel::MemorySize::Broadcast128_UInt52: return "Broadcast128_UInt52";
		case Iced::Intel::MemorySize::Broadcast128_UInt64: return "Broadcast128_UInt64";
		case Iced::Intel::MemorySize::Broadcast128_Int64: return "Broadcast128_Int64";
		case Iced::Intel::MemorySize::Broadcast128_Float16: return "Broadcast128_Float16";
		case Iced::Intel::MemorySize::Broadcast128_Float32: return "Broadcast128_Float32";
		case Iced::Intel::MemorySize::Broadcast128_Float64: return "Broadcast128_Float64";
		case Iced::Intel::MemorySize::Broadcast128_2xInt16: return "Broadcast128_2xInt16";
		case Iced::Intel::MemorySize::Broadcast128_2xInt32: return "Broadcast128_2xInt32";
		case Iced::Intel::MemorySize::Broadcast128_2xUInt32: return "Broadcast128_2xUInt32";
		case Iced::Intel::MemorySize::Broadcast128_2xFloat16: return "Broadcast128_2xFloat16";
		case Iced::Intel::MemorySize::Broadcast128_2xBFloat16: return "Broadcast128_2xBFloat16";
		case Iced::Intel::MemorySize::Broadcast256_Int16: return "Broadcast256_Int16";
		case Iced::Intel::MemorySize::Broadcast256_UInt16: return "Broadcast256_UInt16";
		case Iced::Intel::MemorySize::Broadcast256_UInt32: return "Broadcast256_UInt32";
		case Iced::Intel::MemorySize::Broadcast256_Int32: return "Broadcast256_Int32";
		case Iced::Intel::MemorySize::Broadcast256_UInt52: return "Broadcast256_UInt52";
		case Iced::Intel::MemorySize::Broadcast256_UInt64: return "Broadcast256_UInt64";
		case Iced::Intel::MemorySize::Broadcast256_Int64: return "Broadcast256_Int64";
		case Iced::Intel::MemorySize::Broadcast256_Float16: return "Broadcast256_Float16";
		case Iced::Intel::MemorySize::Broadcast256_Float32: return "Broadcast256_Float32";
		case Iced::Intel::MemorySize::Broadcast256_Float64: return "Broadcast256_Float64";
		case Iced::Intel::MemorySize::Broadcast256_2xInt16: return "Broadcast256_2xInt16";
		case Iced::Intel::MemorySize::Broadcast256_2xInt32: return "Broadcast256_2xInt32";
		case Iced::Intel::MemorySize::Broadcast256_2xUInt32: return "Broadcast256_2xUInt32";
		case Iced::Intel::MemorySize::Broadcast256_2xFloat16: return "Broadcast256_2xFloat16";
		case Iced::Intel::MemorySize::Broadcast256_2xBFloat16: return "Broadcast256_2xBFloat16";
		case Iced::Intel::MemorySize::Broadcast512_Int16: return "Broadcast512_Int16";
		case Iced::Intel::MemorySize::Broadcast512_UInt16: return "Broadcast512_UInt16";
		case Iced::Intel::MemorySize::Broadcast512_UInt32: return "Broadcast512_UInt32";
		case Iced::Intel::MemorySize::Broadcast512_Int32: return "Broadcast512_Int32";
		case Iced::Intel::MemorySize::Broadcast512_UInt52: return "Broadcast512_UInt52";
		case Iced::Intel::MemorySize::Broadcast512_UInt64: return "Broadcast512_UInt64";
		case Iced::Intel::MemorySize::Broadcast512_Int64: return "Broadcast512_Int64";
		case Iced::Intel::MemorySize::Broadcast512_Float16: return "Broadcast512_Float16";
		case Iced::Intel::MemorySize::Broadcast512_Float32: return "Broadcast512_Float32";
		case Iced::Intel::MemorySize::Broadcast512_Float64: return "Broadcast512_Float64";
		case Iced::Intel::MemorySize::Broadcast512_2xFloat16: return "Broadcast512_2xFloat16";
		case Iced::Intel::MemorySize::Broadcast512_2xInt16: return "Broadcast512_2xInt16";
		case Iced::Intel::MemorySize::Broadcast512_2xUInt32: return "Broadcast512_2xUInt32";
		case Iced::Intel::MemorySize::Broadcast512_2xInt32: return "Broadcast512_2xInt32";
		case Iced::Intel::MemorySize::Broadcast512_2xBFloat16: return "Broadcast512_2xBFloat16";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
