// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

#if defined(ENCODER)
#pragma once

#include <cstdint>
#include "../ToString.h"

namespace Iced::Intel::EncoderInternal
{
	// GENERATOR-BEGIN: DisplSize
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class DisplSize {
		None ,
		Size1 ,
		Size2 ,
		Size4 ,
		Size8 ,
		RipRelSize4_Target32 ,
		RipRelSize4_Target64 ,
	};
	constexpr int operator+(const DisplSize& a, const DisplSize& b) { return ((int)a + (int)b); }
	constexpr int operator+(const DisplSize& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const DisplSize& b) { return (a + (int)b); }
	constexpr int operator-(const DisplSize& a, const DisplSize& b) { return ((int)a - (int)b); }
	constexpr int operator-(const DisplSize& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const DisplSize& b) { return (a - (int)b); }
	constexpr DisplSize operator++(DisplSize& a, int) { auto temp = a; a = DisplSize(a + 1); return temp; }
	constexpr DisplSize& operator++(DisplSize& a) { return a = DisplSize(a + 1); }
	constexpr DisplSize operator--(DisplSize& a, int) { auto temp = a; a = DisplSize(a - 1); return temp; }
	constexpr DisplSize& operator--(DisplSize& a) { return a = DisplSize(a - 1); }
	constexpr bool operator==(const DisplSize& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const DisplSize& b) { return (a == (int)b); }
	constexpr bool operator>=(const DisplSize& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const DisplSize& b) { return (a >= (int)b); }
	constexpr bool operator<=(const DisplSize& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const DisplSize& b) { return (a <= (int)b); }
	constexpr bool operator>(const DisplSize& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const DisplSize& b) { return (a > (int)b); }
	constexpr bool operator<(const DisplSize& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const DisplSize& b) { return (a < (int)b); }
	constexpr bool operator!=(const DisplSize& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const DisplSize& b) { return (a != (int)b); }
	// GENERATOR-END: DisplSize
	// GENERATOR-BEGIN: ImmSize
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class ImmSize {
		None ,
		Size1 ,
		Size2 ,
		Size4 ,
		Size8 ,
		/// <summary><c>ENTER xxxx,yy</c></summary>
		Size2_1 ,
		/// <summary><c>EXTRQ/INSERTQ xx,yy</c></summary>
		Size1_1 ,
		/// <summary><c>CALL16 FAR x:y</c></summary>
		Size2_2 ,
		/// <summary><c>CALL32 FAR x:y</c></summary>
		Size4_2 ,
		RipRelSize1_Target16 ,
		RipRelSize1_Target32 ,
		RipRelSize1_Target64 ,
		RipRelSize2_Target16 ,
		RipRelSize2_Target32 ,
		RipRelSize2_Target64 ,
		RipRelSize4_Target32 ,
		RipRelSize4_Target64 ,
		SizeIbReg ,
		Size1OpCode ,
	};
	constexpr int operator+(const ImmSize& a, const ImmSize& b) { return ((int)a + (int)b); }
	constexpr int operator+(const ImmSize& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const ImmSize& b) { return (a + (int)b); }
	constexpr int operator-(const ImmSize& a, const ImmSize& b) { return ((int)a - (int)b); }
	constexpr int operator-(const ImmSize& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const ImmSize& b) { return (a - (int)b); }
	constexpr ImmSize operator++(ImmSize& a, int) { auto temp = a; a = ImmSize(a + 1); return temp; }
	constexpr ImmSize& operator++(ImmSize& a) { return a = ImmSize(a + 1); }
	constexpr ImmSize operator--(ImmSize& a, int) { auto temp = a; a = ImmSize(a - 1); return temp; }
	constexpr ImmSize& operator--(ImmSize& a) { return a = ImmSize(a - 1); }
	constexpr bool operator==(const ImmSize& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const ImmSize& b) { return (a == (int)b); }
	constexpr bool operator>=(const ImmSize& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const ImmSize& b) { return (a >= (int)b); }
	constexpr bool operator<=(const ImmSize& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const ImmSize& b) { return (a <= (int)b); }
	constexpr bool operator>(const ImmSize& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const ImmSize& b) { return (a > (int)b); }
	constexpr bool operator<(const ImmSize& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const ImmSize& b) { return (a < (int)b); }
	constexpr bool operator!=(const ImmSize& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const ImmSize& b) { return (a != (int)b); }
	// GENERATOR-END: ImmSize
	// GENERATOR-BEGIN: EncoderFlags
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class EncoderFlags : std::uint32_t {
		None  = 0x00000000,
		B  = 0x00000001,
		X  = 0x00000002,
		R  = 0x00000004,
		W  = 0x00000008,
		ModRM  = 0x00000010,
		Sib  = 0x00000020,
		REX  = 0x00000040,
		P66  = 0x00000080,
		P67  = 0x00000100,
		/// <summary><c>EVEX.R&apos;</c></summary>
		R2  = 0x00000200,
		Broadcast  = 0x00000400,
		HighLegacy8BitRegs  = 0x00000800,
		Displ  = 0x00001000,
		PF0  = 0x00002000,
		RegIsMemory  = 0x00004000,
		MustUseSib  = 0x00008000,
		VvvvvShift  = 0x0000001B,
		VvvvvMask  = 0x0000001F,
	};
	constexpr EncoderFlags& operator^=(EncoderFlags& a, const EncoderFlags& b) { return a = (EncoderFlags)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncoderFlags operator^(const EncoderFlags& a, const EncoderFlags& b) { return (EncoderFlags)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncoderFlags& operator|=(EncoderFlags& a, const EncoderFlags& b) { return a = (EncoderFlags)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncoderFlags operator|(const EncoderFlags& a, const EncoderFlags& b) { return (EncoderFlags)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncoderFlags& operator&=(EncoderFlags& a, const EncoderFlags& b) { return a = (EncoderFlags)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncoderFlags operator&(const EncoderFlags& a, const EncoderFlags& b) { return (EncoderFlags)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncoderFlags operator~(const EncoderFlags& a) { return (EncoderFlags)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const EncoderFlags& a, const EncoderFlags& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const EncoderFlags& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncoderFlags& a, const EncoderFlags& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const EncoderFlags& b) { return (a - (std::uint32_t)b); }
	constexpr EncoderFlags operator++(EncoderFlags& a, int) { auto temp = a; a = EncoderFlags(a + 1); return temp; }
	constexpr EncoderFlags& operator++(EncoderFlags& a) { return a = EncoderFlags(a + 1); }
	constexpr EncoderFlags operator--(EncoderFlags& a, int) { auto temp = a; a = EncoderFlags(a - 1); return temp; }
	constexpr EncoderFlags& operator--(EncoderFlags& a) { return a = EncoderFlags(a - 1); }
	constexpr bool operator==(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const EncoderFlags& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const EncoderFlags& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const EncoderFlags& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const EncoderFlags& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const EncoderFlags& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const EncoderFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const EncoderFlags& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: EncoderFlags
	// GENERATOR-BEGIN: LegacyOpCodeTable
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class LegacyOpCodeTable {
		MAP0 ,
		MAP0F ,
		MAP0F38 ,
		MAP0F3A ,
	};
	constexpr int operator+(const LegacyOpCodeTable& a, const LegacyOpCodeTable& b) { return ((int)a + (int)b); }
	constexpr int operator+(const LegacyOpCodeTable& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const LegacyOpCodeTable& b) { return (a + (int)b); }
	constexpr int operator-(const LegacyOpCodeTable& a, const LegacyOpCodeTable& b) { return ((int)a - (int)b); }
	constexpr int operator-(const LegacyOpCodeTable& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const LegacyOpCodeTable& b) { return (a - (int)b); }
	constexpr LegacyOpCodeTable operator++(LegacyOpCodeTable& a, int) { auto temp = a; a = LegacyOpCodeTable(a + 1); return temp; }
	constexpr LegacyOpCodeTable& operator++(LegacyOpCodeTable& a) { return a = LegacyOpCodeTable(a + 1); }
	constexpr LegacyOpCodeTable operator--(LegacyOpCodeTable& a, int) { auto temp = a; a = LegacyOpCodeTable(a - 1); return temp; }
	constexpr LegacyOpCodeTable& operator--(LegacyOpCodeTable& a) { return a = LegacyOpCodeTable(a - 1); }
	constexpr bool operator==(const LegacyOpCodeTable& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const LegacyOpCodeTable& b) { return (a == (int)b); }
	constexpr bool operator>=(const LegacyOpCodeTable& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const LegacyOpCodeTable& b) { return (a >= (int)b); }
	constexpr bool operator<=(const LegacyOpCodeTable& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const LegacyOpCodeTable& b) { return (a <= (int)b); }
	constexpr bool operator>(const LegacyOpCodeTable& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const LegacyOpCodeTable& b) { return (a > (int)b); }
	constexpr bool operator<(const LegacyOpCodeTable& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const LegacyOpCodeTable& b) { return (a < (int)b); }
	constexpr bool operator!=(const LegacyOpCodeTable& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const LegacyOpCodeTable& b) { return (a != (int)b); }
	// GENERATOR-END: LegacyOpCodeTable
	// GENERATOR-BEGIN: VexOpCodeTable
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class VexOpCodeTable {
		MAP0 ,
		MAP0F ,
		MAP0F38 ,
		MAP0F3A ,
	};
	constexpr int operator+(const VexOpCodeTable& a, const VexOpCodeTable& b) { return ((int)a + (int)b); }
	constexpr int operator+(const VexOpCodeTable& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const VexOpCodeTable& b) { return (a + (int)b); }
	constexpr int operator-(const VexOpCodeTable& a, const VexOpCodeTable& b) { return ((int)a - (int)b); }
	constexpr int operator-(const VexOpCodeTable& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const VexOpCodeTable& b) { return (a - (int)b); }
	constexpr VexOpCodeTable operator++(VexOpCodeTable& a, int) { auto temp = a; a = VexOpCodeTable(a + 1); return temp; }
	constexpr VexOpCodeTable& operator++(VexOpCodeTable& a) { return a = VexOpCodeTable(a + 1); }
	constexpr VexOpCodeTable operator--(VexOpCodeTable& a, int) { auto temp = a; a = VexOpCodeTable(a - 1); return temp; }
	constexpr VexOpCodeTable& operator--(VexOpCodeTable& a) { return a = VexOpCodeTable(a - 1); }
	constexpr bool operator==(const VexOpCodeTable& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const VexOpCodeTable& b) { return (a == (int)b); }
	constexpr bool operator>=(const VexOpCodeTable& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const VexOpCodeTable& b) { return (a >= (int)b); }
	constexpr bool operator<=(const VexOpCodeTable& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const VexOpCodeTable& b) { return (a <= (int)b); }
	constexpr bool operator>(const VexOpCodeTable& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const VexOpCodeTable& b) { return (a > (int)b); }
	constexpr bool operator<(const VexOpCodeTable& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const VexOpCodeTable& b) { return (a < (int)b); }
	constexpr bool operator!=(const VexOpCodeTable& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const VexOpCodeTable& b) { return (a != (int)b); }
	// GENERATOR-END: VexOpCodeTable
	// GENERATOR-BEGIN: XopOpCodeTable
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class XopOpCodeTable {
		MAP8 ,
		MAP9 ,
		MAP10 ,
	};
	constexpr int operator+(const XopOpCodeTable& a, const XopOpCodeTable& b) { return ((int)a + (int)b); }
	constexpr int operator+(const XopOpCodeTable& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const XopOpCodeTable& b) { return (a + (int)b); }
	constexpr int operator-(const XopOpCodeTable& a, const XopOpCodeTable& b) { return ((int)a - (int)b); }
	constexpr int operator-(const XopOpCodeTable& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const XopOpCodeTable& b) { return (a - (int)b); }
	constexpr XopOpCodeTable operator++(XopOpCodeTable& a, int) { auto temp = a; a = XopOpCodeTable(a + 1); return temp; }
	constexpr XopOpCodeTable& operator++(XopOpCodeTable& a) { return a = XopOpCodeTable(a + 1); }
	constexpr XopOpCodeTable operator--(XopOpCodeTable& a, int) { auto temp = a; a = XopOpCodeTable(a - 1); return temp; }
	constexpr XopOpCodeTable& operator--(XopOpCodeTable& a) { return a = XopOpCodeTable(a - 1); }
	constexpr bool operator==(const XopOpCodeTable& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const XopOpCodeTable& b) { return (a == (int)b); }
	constexpr bool operator>=(const XopOpCodeTable& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const XopOpCodeTable& b) { return (a >= (int)b); }
	constexpr bool operator<=(const XopOpCodeTable& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const XopOpCodeTable& b) { return (a <= (int)b); }
	constexpr bool operator>(const XopOpCodeTable& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const XopOpCodeTable& b) { return (a > (int)b); }
	constexpr bool operator<(const XopOpCodeTable& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const XopOpCodeTable& b) { return (a < (int)b); }
	constexpr bool operator!=(const XopOpCodeTable& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const XopOpCodeTable& b) { return (a != (int)b); }
	// GENERATOR-END: XopOpCodeTable
	// GENERATOR-BEGIN: EvexOpCodeTable
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class EvexOpCodeTable {
		MAP0F  = 1,
		MAP0F38 ,
		MAP0F3A ,
		MAP5  = 5,
		MAP6 ,
	};
	constexpr int operator+(const EvexOpCodeTable& a, const EvexOpCodeTable& b) { return ((int)a + (int)b); }
	constexpr int operator+(const EvexOpCodeTable& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const EvexOpCodeTable& b) { return (a + (int)b); }
	constexpr int operator-(const EvexOpCodeTable& a, const EvexOpCodeTable& b) { return ((int)a - (int)b); }
	constexpr int operator-(const EvexOpCodeTable& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const EvexOpCodeTable& b) { return (a - (int)b); }
	constexpr EvexOpCodeTable operator++(EvexOpCodeTable& a, int) { auto temp = a; a = EvexOpCodeTable(a + 1); return temp; }
	constexpr EvexOpCodeTable& operator++(EvexOpCodeTable& a) { return a = EvexOpCodeTable(a + 1); }
	constexpr EvexOpCodeTable operator--(EvexOpCodeTable& a, int) { auto temp = a; a = EvexOpCodeTable(a - 1); return temp; }
	constexpr EvexOpCodeTable& operator--(EvexOpCodeTable& a) { return a = EvexOpCodeTable(a - 1); }
	constexpr bool operator==(const EvexOpCodeTable& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const EvexOpCodeTable& b) { return (a == (int)b); }
	constexpr bool operator>=(const EvexOpCodeTable& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const EvexOpCodeTable& b) { return (a >= (int)b); }
	constexpr bool operator<=(const EvexOpCodeTable& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const EvexOpCodeTable& b) { return (a <= (int)b); }
	constexpr bool operator>(const EvexOpCodeTable& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const EvexOpCodeTable& b) { return (a > (int)b); }
	constexpr bool operator<(const EvexOpCodeTable& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const EvexOpCodeTable& b) { return (a < (int)b); }
	constexpr bool operator!=(const EvexOpCodeTable& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const EvexOpCodeTable& b) { return (a != (int)b); }
	// GENERATOR-END: EvexOpCodeTable
	// GENERATOR-BEGIN: MvexOpCodeTable
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class MvexOpCodeTable {
		MAP0F  = 1,
		MAP0F38 ,
		MAP0F3A ,
	};
	constexpr int operator+(const MvexOpCodeTable& a, const MvexOpCodeTable& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MvexOpCodeTable& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MvexOpCodeTable& b) { return (a + (int)b); }
	constexpr int operator-(const MvexOpCodeTable& a, const MvexOpCodeTable& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MvexOpCodeTable& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MvexOpCodeTable& b) { return (a - (int)b); }
	constexpr MvexOpCodeTable operator++(MvexOpCodeTable& a, int) { auto temp = a; a = MvexOpCodeTable(a + 1); return temp; }
	constexpr MvexOpCodeTable& operator++(MvexOpCodeTable& a) { return a = MvexOpCodeTable(a + 1); }
	constexpr MvexOpCodeTable operator--(MvexOpCodeTable& a, int) { auto temp = a; a = MvexOpCodeTable(a - 1); return temp; }
	constexpr MvexOpCodeTable& operator--(MvexOpCodeTable& a) { return a = MvexOpCodeTable(a - 1); }
	constexpr bool operator==(const MvexOpCodeTable& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MvexOpCodeTable& b) { return (a == (int)b); }
	constexpr bool operator>=(const MvexOpCodeTable& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MvexOpCodeTable& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MvexOpCodeTable& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MvexOpCodeTable& b) { return (a <= (int)b); }
	constexpr bool operator>(const MvexOpCodeTable& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MvexOpCodeTable& b) { return (a > (int)b); }
	constexpr bool operator<(const MvexOpCodeTable& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MvexOpCodeTable& b) { return (a < (int)b); }
	constexpr bool operator!=(const MvexOpCodeTable& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MvexOpCodeTable& b) { return (a != (int)b); }
	// GENERATOR-END: MvexOpCodeTable
	// GENERATOR-BEGIN: EncFlags1
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class EncFlags1 : std::uint32_t {
		None  = 0x00000000,
		Legacy_OpMask  = 0x0000007F,
		Legacy_Op0Shift  = 0x00000000,
		Legacy_Op1Shift  = 0x00000007,
		Legacy_Op2Shift  = 0x0000000E,
		Legacy_Op3Shift  = 0x00000015,
		VEX_OpMask  = 0x0000003F,
		VEX_Op0Shift  = 0x00000000,
		VEX_Op1Shift  = 0x00000006,
		VEX_Op2Shift  = 0x0000000C,
		VEX_Op3Shift  = 0x00000012,
		VEX_Op4Shift  = 0x00000018,
		XOP_OpMask  = 0x0000001F,
		XOP_Op0Shift  = 0x00000000,
		XOP_Op1Shift  = 0x00000005,
		XOP_Op2Shift  = 0x0000000A,
		XOP_Op3Shift  = 0x0000000F,
		EVEX_OpMask  = 0x0000001F,
		EVEX_Op0Shift  = 0x00000000,
		EVEX_Op1Shift  = 0x00000005,
		EVEX_Op2Shift  = 0x0000000A,
		EVEX_Op3Shift  = 0x0000000F,
		MVEX_OpMask  = 0x0000000F,
		MVEX_Op0Shift  = 0x00000000,
		MVEX_Op1Shift  = 0x00000004,
		MVEX_Op2Shift  = 0x00000008,
		MVEX_Op3Shift  = 0x0000000C,
		IgnoresRoundingControl  = 0x40000000,
		AmdLockRegBit  = 0x80000000,
	};
	constexpr EncFlags1& operator^=(EncFlags1& a, const EncFlags1& b) { return a = (EncFlags1)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncFlags1 operator^(const EncFlags1& a, const EncFlags1& b) { return (EncFlags1)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncFlags1& operator|=(EncFlags1& a, const EncFlags1& b) { return a = (EncFlags1)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncFlags1 operator|(const EncFlags1& a, const EncFlags1& b) { return (EncFlags1)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncFlags1& operator&=(EncFlags1& a, const EncFlags1& b) { return a = (EncFlags1)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncFlags1 operator&(const EncFlags1& a, const EncFlags1& b) { return (EncFlags1)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncFlags1 operator~(const EncFlags1& a) { return (EncFlags1)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const EncFlags1& a, const EncFlags1& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const EncFlags1& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncFlags1& a, const EncFlags1& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const EncFlags1& b) { return (a - (std::uint32_t)b); }
	constexpr EncFlags1 operator++(EncFlags1& a, int) { auto temp = a; a = EncFlags1(a + 1); return temp; }
	constexpr EncFlags1& operator++(EncFlags1& a) { return a = EncFlags1(a + 1); }
	constexpr EncFlags1 operator--(EncFlags1& a, int) { auto temp = a; a = EncFlags1(a - 1); return temp; }
	constexpr EncFlags1& operator--(EncFlags1& a) { return a = EncFlags1(a - 1); }
	constexpr bool operator==(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const EncFlags1& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const EncFlags1& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const EncFlags1& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const EncFlags1& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const EncFlags1& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const EncFlags1& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const EncFlags1& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: EncFlags1
	// GENERATOR-BEGIN: EncFlags2
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class EncFlags2 : std::uint32_t {
		None  = 0x00000000,
		OpCodeShift  = 0x00000000,
		OpCodeIs2Bytes  = 0x00010000,
		TableShift  = 0x00000011,
		TableMask  = 0x00000007,
		MandatoryPrefixShift  = 0x00000014,
		MandatoryPrefixMask  = 0x00000003,
		WBitShift  = 0x00000016,
		WBitMask  = 0x00000003,
		LBitShift  = 0x00000018,
		LBitMask  = 0x00000007,
		GroupIndexShift  = 0x0000001B,
		GroupIndexMask  = 0x00000007,
		HasMandatoryPrefix  = 0x40000000,
		HasGroupIndex  = 0x80000000,
	};
	constexpr EncFlags2& operator^=(EncFlags2& a, const EncFlags2& b) { return a = (EncFlags2)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncFlags2 operator^(const EncFlags2& a, const EncFlags2& b) { return (EncFlags2)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncFlags2& operator|=(EncFlags2& a, const EncFlags2& b) { return a = (EncFlags2)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncFlags2 operator|(const EncFlags2& a, const EncFlags2& b) { return (EncFlags2)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncFlags2& operator&=(EncFlags2& a, const EncFlags2& b) { return a = (EncFlags2)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncFlags2 operator&(const EncFlags2& a, const EncFlags2& b) { return (EncFlags2)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncFlags2 operator~(const EncFlags2& a) { return (EncFlags2)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const EncFlags2& a, const EncFlags2& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const EncFlags2& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncFlags2& a, const EncFlags2& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const EncFlags2& b) { return (a - (std::uint32_t)b); }
	constexpr EncFlags2 operator++(EncFlags2& a, int) { auto temp = a; a = EncFlags2(a + 1); return temp; }
	constexpr EncFlags2& operator++(EncFlags2& a) { return a = EncFlags2(a + 1); }
	constexpr EncFlags2 operator--(EncFlags2& a, int) { auto temp = a; a = EncFlags2(a - 1); return temp; }
	constexpr EncFlags2& operator--(EncFlags2& a) { return a = EncFlags2(a - 1); }
	constexpr bool operator==(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const EncFlags2& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const EncFlags2& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const EncFlags2& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const EncFlags2& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const EncFlags2& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const EncFlags2& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const EncFlags2& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: EncFlags2
	// GENERATOR-BEGIN: EncFlags3
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class EncFlags3 : std::uint32_t {
		None  = 0x00000000,
		EncodingShift  = 0x00000000,
		EncodingMask  = 0x00000007,
		OperandSizeShift  = 0x00000003,
		OperandSizeMask  = 0x00000003,
		AddressSizeShift  = 0x00000005,
		AddressSizeMask  = 0x00000003,
		TupleTypeShift  = 0x00000007,
		TupleTypeMask  = 0x0000001F,
		DefaultOpSize64  = 0x00001000,
		HasRmGroupIndex  = 0x00002000,
		IntelForceOpSize64  = 0x00004000,
		Fwait  = 0x00008000,
		Bit16or32  = 0x00010000,
		Bit64  = 0x00020000,
		Lock  = 0x00040000,
		Xacquire  = 0x00080000,
		Xrelease  = 0x00100000,
		Rep  = 0x00200000,
		Repne  = 0x00400000,
		Bnd  = 0x00800000,
		HintTaken  = 0x01000000,
		Notrack  = 0x02000000,
		Broadcast  = 0x04000000,
		RoundingControl  = 0x08000000,
		SuppressAllExceptions  = 0x10000000,
		OpMaskRegister  = 0x20000000,
		ZeroingMasking  = 0x40000000,
		RequireOpMaskRegister  = 0x80000000,
	};
	constexpr EncFlags3& operator^=(EncFlags3& a, const EncFlags3& b) { return a = (EncFlags3)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncFlags3 operator^(const EncFlags3& a, const EncFlags3& b) { return (EncFlags3)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr EncFlags3& operator|=(EncFlags3& a, const EncFlags3& b) { return a = (EncFlags3)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncFlags3 operator|(const EncFlags3& a, const EncFlags3& b) { return (EncFlags3)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr EncFlags3& operator&=(EncFlags3& a, const EncFlags3& b) { return a = (EncFlags3)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncFlags3 operator&(const EncFlags3& a, const EncFlags3& b) { return (EncFlags3)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr EncFlags3 operator~(const EncFlags3& a) { return (EncFlags3)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const EncFlags3& a, const EncFlags3& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const EncFlags3& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncFlags3& a, const EncFlags3& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const EncFlags3& b) { return (a - (std::uint32_t)b); }
	constexpr EncFlags3 operator++(EncFlags3& a, int) { auto temp = a; a = EncFlags3(a + 1); return temp; }
	constexpr EncFlags3& operator++(EncFlags3& a) { return a = EncFlags3(a + 1); }
	constexpr EncFlags3 operator--(EncFlags3& a, int) { auto temp = a; a = EncFlags3(a - 1); return temp; }
	constexpr EncFlags3& operator--(EncFlags3& a) { return a = EncFlags3(a - 1); }
	constexpr bool operator==(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const EncFlags3& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const EncFlags3& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const EncFlags3& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const EncFlags3& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const EncFlags3& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const EncFlags3& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const EncFlags3& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: EncFlags3
	// GENERATOR-BEGIN: WBit
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class WBit : std::uint32_t {
		W0 ,
		W1 ,
		WIG ,
		WIG32 ,
	};
	constexpr std::uint32_t operator+(const WBit& a, const WBit& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const WBit& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const WBit& a, const WBit& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const WBit& b) { return (a - (std::uint32_t)b); }
	constexpr WBit operator++(WBit& a, int) { auto temp = a; a = WBit(a + 1); return temp; }
	constexpr WBit& operator++(WBit& a) { return a = WBit(a + 1); }
	constexpr WBit operator--(WBit& a, int) { auto temp = a; a = WBit(a - 1); return temp; }
	constexpr WBit& operator--(WBit& a) { return a = WBit(a - 1); }
	constexpr bool operator==(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const WBit& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const WBit& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const WBit& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const WBit& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const WBit& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const WBit& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const WBit& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: WBit
	// GENERATOR-BEGIN: LBit
	// ⚠️This was generated by GENERATOR!🦹‍♂️
	enum class LBit : std::uint32_t {
		L0 ,
		L1 ,
		LIG ,
		LZ ,
		L128 ,
		L256 ,
		L512 ,
	};
	constexpr std::uint32_t operator+(const LBit& a, const LBit& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const LBit& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const LBit& a, const LBit& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const LBit& b) { return (a - (std::uint32_t)b); }
	constexpr LBit operator++(LBit& a, int) { auto temp = a; a = LBit(a + 1); return temp; }
	constexpr LBit& operator++(LBit& a) { return a = LBit(a + 1); }
	constexpr LBit operator--(LBit& a, int) { auto temp = a; a = LBit(a - 1); return temp; }
	constexpr LBit& operator--(LBit& a) { return a = LBit(a - 1); }
	constexpr bool operator==(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const LBit& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const LBit& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const LBit& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const LBit& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const LBit& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const LBit& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const LBit& b) { return (a != (std::uint32_t)b); }
	// GENERATOR-END: LBit
}
#endif
