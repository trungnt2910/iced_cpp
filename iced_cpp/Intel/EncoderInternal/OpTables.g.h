/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(ENCODER)
#include <array>
#include <cstdint>
#include <tuple>

#include "OpHandlers.h"

namespace Iced::Intel::EncoderInternal {
	class OpHandlerData final {
		private:
			inline static constexpr std::tuple LegacyOpsData = std::make_tuple (
				OpA(2),
				OpA(4),
				OpO(),
				OpModRM_rm_mem_only(false),
				OpModRM_rm_mem_only(false),
				OpModRM_rm_mem_only(false),
				OpModRM_rm(Register::AL, Register::R15L),
				OpModRM_rm(Register::AX, Register::R15W),
				OpModRM_rm(Register::EAX, Register::R15D),
				OpModRM_rm(Register::EAX, Register::R15D),
				OpModRM_rm(Register::RAX, Register::R15),
				OpModRM_rm(Register::RAX, Register::R15),
				OpModRM_rm(Register::MM0, Register::MM7),
				OpModRM_rm(Register::XMM0, Register::XMM15),
				OpModRM_rm(Register::BND0, Register::BND3),
				OpModRM_reg(Register::AL, Register::R15L),
				OpRegEmbed8(Register::AL, Register::R15L),
				OpModRM_reg(Register::AX, Register::R15W),
				OpModRM_reg_mem(Register::AX, Register::R15W),
				OpModRM_rm_reg_only(Register::AX, Register::R15W),
				OpRegEmbed8(Register::AX, Register::R15W),
				OpModRM_reg(Register::EAX, Register::R15D),
				OpModRM_reg_mem(Register::EAX, Register::R15D),
				OpModRM_rm_reg_only(Register::EAX, Register::R15D),
				OpRegEmbed8(Register::EAX, Register::R15D),
				OpModRM_reg(Register::RAX, Register::R15),
				OpModRM_reg_mem(Register::RAX, Register::R15),
				OpModRM_rm_reg_only(Register::RAX, Register::R15),
				OpRegEmbed8(Register::RAX, Register::R15),
				OpModRM_reg(Register::ES, Register::GS),
				OpModRM_reg(Register::MM0, Register::MM7),
				OpModRM_rm_reg_only(Register::MM0, Register::MM7),
				OpModRM_reg(Register::XMM0, Register::XMM15),
				OpModRM_rm_reg_only(Register::XMM0, Register::XMM15),
				OpModRM_regF0(Register::CR0, Register::CR15),
				OpModRM_reg(Register::DR0, Register::DR15),
				OpModRM_reg(Register::TR0, Register::TR7),
				OpModRM_reg(Register::BND0, Register::BND3),
				OpReg(Register::ES),
				OpReg(Register::CS),
				OpReg(Register::SS),
				OpReg(Register::DS),
				OpReg(Register::FS),
				OpReg(Register::GS),
				OpReg(Register::AL),
				OpReg(Register::CL),
				OpReg(Register::AX),
				OpReg(Register::DX),
				OpReg(Register::EAX),
				OpReg(Register::RAX),
				OpReg(Register::ST0),
				OpRegSTi(),
				OpIb(OpKind::Immediate8),
				OpImm(1),
				OpIb(OpKind::Immediate8to16),
				OpIb(OpKind::Immediate8to32),
				OpIb(OpKind::Immediate8to64),
				OpIw(),
				OpId(OpKind::Immediate32),
				OpId(OpKind::Immediate32to64),
				OpIq(),
				OpX(),
				OpY(),
				OprDI(),
				OpMRBX(),
				OpJ(OpKind::NearBranch16, 1),
				OpJ(OpKind::NearBranch32, 1),
				OpJ(OpKind::NearBranch64, 1),
				OpJ(OpKind::NearBranch16, 2),
				OpJ(OpKind::NearBranch32, 4),
				OpJ(OpKind::NearBranch64, 4),
				OpJx(2),
				OpJx(4),
				OpJdisp(2),
				OpJdisp(4)
			);
		public:
			inline static constexpr std::array LegacyOps = std::to_array<const Op*>({
				(const Op*)&std::get<0>(LegacyOpsData),
				(const Op*)&std::get<1>(LegacyOpsData),
				(const Op*)&std::get<2>(LegacyOpsData),
				(const Op*)&std::get<3>(LegacyOpsData),
				(const Op*)&std::get<4>(LegacyOpsData),
				(const Op*)&std::get<5>(LegacyOpsData),
				(const Op*)&std::get<6>(LegacyOpsData),
				(const Op*)&std::get<7>(LegacyOpsData),
				(const Op*)&std::get<8>(LegacyOpsData),
				(const Op*)&std::get<9>(LegacyOpsData),
				(const Op*)&std::get<10>(LegacyOpsData),
				(const Op*)&std::get<11>(LegacyOpsData),
				(const Op*)&std::get<12>(LegacyOpsData),
				(const Op*)&std::get<13>(LegacyOpsData),
				(const Op*)&std::get<14>(LegacyOpsData),
				(const Op*)&std::get<15>(LegacyOpsData),
				(const Op*)&std::get<16>(LegacyOpsData),
				(const Op*)&std::get<17>(LegacyOpsData),
				(const Op*)&std::get<18>(LegacyOpsData),
				(const Op*)&std::get<19>(LegacyOpsData),
				(const Op*)&std::get<20>(LegacyOpsData),
				(const Op*)&std::get<21>(LegacyOpsData),
				(const Op*)&std::get<22>(LegacyOpsData),
				(const Op*)&std::get<23>(LegacyOpsData),
				(const Op*)&std::get<24>(LegacyOpsData),
				(const Op*)&std::get<25>(LegacyOpsData),
				(const Op*)&std::get<26>(LegacyOpsData),
				(const Op*)&std::get<27>(LegacyOpsData),
				(const Op*)&std::get<28>(LegacyOpsData),
				(const Op*)&std::get<29>(LegacyOpsData),
				(const Op*)&std::get<30>(LegacyOpsData),
				(const Op*)&std::get<31>(LegacyOpsData),
				(const Op*)&std::get<32>(LegacyOpsData),
				(const Op*)&std::get<33>(LegacyOpsData),
				(const Op*)&std::get<34>(LegacyOpsData),
				(const Op*)&std::get<35>(LegacyOpsData),
				(const Op*)&std::get<36>(LegacyOpsData),
				(const Op*)&std::get<37>(LegacyOpsData),
				(const Op*)&std::get<38>(LegacyOpsData),
				(const Op*)&std::get<39>(LegacyOpsData),
				(const Op*)&std::get<40>(LegacyOpsData),
				(const Op*)&std::get<41>(LegacyOpsData),
				(const Op*)&std::get<42>(LegacyOpsData),
				(const Op*)&std::get<43>(LegacyOpsData),
				(const Op*)&std::get<44>(LegacyOpsData),
				(const Op*)&std::get<45>(LegacyOpsData),
				(const Op*)&std::get<46>(LegacyOpsData),
				(const Op*)&std::get<47>(LegacyOpsData),
				(const Op*)&std::get<48>(LegacyOpsData),
				(const Op*)&std::get<49>(LegacyOpsData),
				(const Op*)&std::get<50>(LegacyOpsData),
				(const Op*)&std::get<51>(LegacyOpsData),
				(const Op*)&std::get<52>(LegacyOpsData),
				(const Op*)&std::get<53>(LegacyOpsData),
				(const Op*)&std::get<54>(LegacyOpsData),
				(const Op*)&std::get<55>(LegacyOpsData),
				(const Op*)&std::get<56>(LegacyOpsData),
				(const Op*)&std::get<57>(LegacyOpsData),
				(const Op*)&std::get<58>(LegacyOpsData),
				(const Op*)&std::get<59>(LegacyOpsData),
				(const Op*)&std::get<60>(LegacyOpsData),
				(const Op*)&std::get<61>(LegacyOpsData),
				(const Op*)&std::get<62>(LegacyOpsData),
				(const Op*)&std::get<63>(LegacyOpsData),
				(const Op*)&std::get<64>(LegacyOpsData),
				(const Op*)&std::get<65>(LegacyOpsData),
				(const Op*)&std::get<66>(LegacyOpsData),
				(const Op*)&std::get<67>(LegacyOpsData),
				(const Op*)&std::get<68>(LegacyOpsData),
				(const Op*)&std::get<69>(LegacyOpsData),
				(const Op*)&std::get<70>(LegacyOpsData),
				(const Op*)&std::get<71>(LegacyOpsData),
				(const Op*)&std::get<72>(LegacyOpsData),
				(const Op*)&std::get<73>(LegacyOpsData),
				(const Op*)&std::get<74>(LegacyOpsData)
			});
#if !defined(NO_VEX)
		private:
			inline static constexpr std::tuple VexOpsData = std::make_tuple (
				OpModRM_rm_mem_only(false),
				OpVsib(Register::XMM0, Register::XMM15),
				OpVsib(Register::XMM0, Register::XMM15),
				OpVsib(Register::YMM0, Register::YMM15),
				OpVsib(Register::YMM0, Register::YMM15),
				OpModRM_rm(Register::EAX, Register::R15D),
				OpModRM_rm(Register::RAX, Register::R15),
				OpModRM_rm(Register::XMM0, Register::XMM15),
				OpModRM_rm(Register::YMM0, Register::YMM15),
				OpModRM_rm(Register::K0, Register::K7),
				OpModRM_reg(Register::EAX, Register::R15D),
				OpModRM_rm_reg_only(Register::EAX, Register::R15D),
				OpHx(Register::EAX, Register::R15D),
				OpModRM_reg(Register::RAX, Register::R15),
				OpModRM_rm_reg_only(Register::RAX, Register::R15),
				OpHx(Register::RAX, Register::R15),
				OpModRM_reg(Register::K0, Register::K7),
				OpModRM_rm_reg_only(Register::K0, Register::K7),
				OpHx(Register::K0, Register::K7),
				OpModRM_reg(Register::XMM0, Register::XMM15),
				OpModRM_rm_reg_only(Register::XMM0, Register::XMM15),
				OpHx(Register::XMM0, Register::XMM15),
				OpIsX(Register::XMM0, Register::XMM15),
				OpIsX(Register::XMM0, Register::XMM15),
				OpModRM_reg(Register::YMM0, Register::YMM15),
				OpModRM_rm_reg_only(Register::YMM0, Register::YMM15),
				OpHx(Register::YMM0, Register::YMM15),
				OpIsX(Register::YMM0, Register::YMM15),
				OpIsX(Register::YMM0, Register::YMM15),
				OpI4(),
				OpIb(OpKind::Immediate8),
				OprDI(),
				OpJ(OpKind::NearBranch64, 1),
				OpJ(OpKind::NearBranch64, 4),
				OpModRM_rm_mem_only(true),
				OpModRM_reg(Register::TMM0, Register::TMM7),
				OpModRM_rm_reg_only(Register::TMM0, Register::TMM7),
				OpHx(Register::TMM0, Register::TMM7)
			);
		public:
			inline static constexpr std::array VexOps = std::to_array<const Op*>({
				(const Op*)&std::get<0>(VexOpsData),
				(const Op*)&std::get<1>(VexOpsData),
				(const Op*)&std::get<2>(VexOpsData),
				(const Op*)&std::get<3>(VexOpsData),
				(const Op*)&std::get<4>(VexOpsData),
				(const Op*)&std::get<5>(VexOpsData),
				(const Op*)&std::get<6>(VexOpsData),
				(const Op*)&std::get<7>(VexOpsData),
				(const Op*)&std::get<8>(VexOpsData),
				(const Op*)&std::get<9>(VexOpsData),
				(const Op*)&std::get<10>(VexOpsData),
				(const Op*)&std::get<11>(VexOpsData),
				(const Op*)&std::get<12>(VexOpsData),
				(const Op*)&std::get<13>(VexOpsData),
				(const Op*)&std::get<14>(VexOpsData),
				(const Op*)&std::get<15>(VexOpsData),
				(const Op*)&std::get<16>(VexOpsData),
				(const Op*)&std::get<17>(VexOpsData),
				(const Op*)&std::get<18>(VexOpsData),
				(const Op*)&std::get<19>(VexOpsData),
				(const Op*)&std::get<20>(VexOpsData),
				(const Op*)&std::get<21>(VexOpsData),
				(const Op*)&std::get<22>(VexOpsData),
				(const Op*)&std::get<23>(VexOpsData),
				(const Op*)&std::get<24>(VexOpsData),
				(const Op*)&std::get<25>(VexOpsData),
				(const Op*)&std::get<26>(VexOpsData),
				(const Op*)&std::get<27>(VexOpsData),
				(const Op*)&std::get<28>(VexOpsData),
				(const Op*)&std::get<29>(VexOpsData),
				(const Op*)&std::get<30>(VexOpsData),
				(const Op*)&std::get<31>(VexOpsData),
				(const Op*)&std::get<32>(VexOpsData),
				(const Op*)&std::get<33>(VexOpsData),
				(const Op*)&std::get<34>(VexOpsData),
				(const Op*)&std::get<35>(VexOpsData),
				(const Op*)&std::get<36>(VexOpsData),
				(const Op*)&std::get<37>(VexOpsData)
			});
#endif
#if !defined(NO_XOP)
		private:
			inline static constexpr std::tuple XopOpsData = std::make_tuple (
				OpModRM_rm(Register::EAX, Register::R15D),
				OpModRM_rm(Register::RAX, Register::R15),
				OpModRM_rm(Register::XMM0, Register::XMM15),
				OpModRM_rm(Register::YMM0, Register::YMM15),
				OpModRM_reg(Register::EAX, Register::R15D),
				OpModRM_rm_reg_only(Register::EAX, Register::R15D),
				OpHx(Register::EAX, Register::R15D),
				OpModRM_reg(Register::RAX, Register::R15),
				OpModRM_rm_reg_only(Register::RAX, Register::R15),
				OpHx(Register::RAX, Register::R15),
				OpModRM_reg(Register::XMM0, Register::XMM15),
				OpHx(Register::XMM0, Register::XMM15),
				OpIsX(Register::XMM0, Register::XMM15),
				OpModRM_reg(Register::YMM0, Register::YMM15),
				OpHx(Register::YMM0, Register::YMM15),
				OpIsX(Register::YMM0, Register::YMM15),
				OpIb(OpKind::Immediate8),
				OpId(OpKind::Immediate32)
			);
		public:
			inline static constexpr std::array XopOps = std::to_array<const Op*>({
				(const Op*)&std::get<0>(XopOpsData),
				(const Op*)&std::get<1>(XopOpsData),
				(const Op*)&std::get<2>(XopOpsData),
				(const Op*)&std::get<3>(XopOpsData),
				(const Op*)&std::get<4>(XopOpsData),
				(const Op*)&std::get<5>(XopOpsData),
				(const Op*)&std::get<6>(XopOpsData),
				(const Op*)&std::get<7>(XopOpsData),
				(const Op*)&std::get<8>(XopOpsData),
				(const Op*)&std::get<9>(XopOpsData),
				(const Op*)&std::get<10>(XopOpsData),
				(const Op*)&std::get<11>(XopOpsData),
				(const Op*)&std::get<12>(XopOpsData),
				(const Op*)&std::get<13>(XopOpsData),
				(const Op*)&std::get<14>(XopOpsData),
				(const Op*)&std::get<15>(XopOpsData),
				(const Op*)&std::get<16>(XopOpsData),
				(const Op*)&std::get<17>(XopOpsData)
			});
#endif
#if !defined(NO_EVEX)
		private:
			inline static constexpr std::tuple EvexOpsData = std::make_tuple (
				OpModRM_rm_mem_only(false),
				OpVsib(Register::XMM0, Register::XMM31),
				OpVsib(Register::XMM0, Register::XMM31),
				OpVsib(Register::YMM0, Register::YMM31),
				OpVsib(Register::YMM0, Register::YMM31),
				OpVsib(Register::ZMM0, Register::ZMM31),
				OpVsib(Register::ZMM0, Register::ZMM31),
				OpModRM_rm(Register::EAX, Register::R15D),
				OpModRM_rm(Register::RAX, Register::R15),
				OpModRM_rm(Register::XMM0, Register::XMM31),
				OpModRM_rm(Register::YMM0, Register::YMM31),
				OpModRM_rm(Register::ZMM0, Register::ZMM31),
				OpModRM_reg(Register::EAX, Register::R15D),
				OpModRM_rm_reg_only(Register::EAX, Register::R15D),
				OpModRM_reg(Register::RAX, Register::R15),
				OpModRM_rm_reg_only(Register::RAX, Register::R15),
				OpModRM_reg(Register::K0, Register::K7),
				OpModRM_reg(Register::K0, Register::K7),
				OpModRM_rm_reg_only(Register::K0, Register::K7),
				OpModRM_reg(Register::XMM0, Register::XMM31),
				OpModRM_rm_reg_only(Register::XMM0, Register::XMM31),
				OpHx(Register::XMM0, Register::XMM31),
				OpHx(Register::XMM0, Register::XMM31),
				OpModRM_reg(Register::YMM0, Register::YMM31),
				OpModRM_rm_reg_only(Register::YMM0, Register::YMM31),
				OpHx(Register::YMM0, Register::YMM31),
				OpModRM_reg(Register::ZMM0, Register::ZMM31),
				OpModRM_rm_reg_only(Register::ZMM0, Register::ZMM31),
				OpHx(Register::ZMM0, Register::ZMM31),
				OpHx(Register::ZMM0, Register::ZMM31),
				OpIb(OpKind::Immediate8)
			);
		public:
			inline static constexpr std::array EvexOps = std::to_array<const Op*>({
				(const Op*)&std::get<0>(EvexOpsData),
				(const Op*)&std::get<1>(EvexOpsData),
				(const Op*)&std::get<2>(EvexOpsData),
				(const Op*)&std::get<3>(EvexOpsData),
				(const Op*)&std::get<4>(EvexOpsData),
				(const Op*)&std::get<5>(EvexOpsData),
				(const Op*)&std::get<6>(EvexOpsData),
				(const Op*)&std::get<7>(EvexOpsData),
				(const Op*)&std::get<8>(EvexOpsData),
				(const Op*)&std::get<9>(EvexOpsData),
				(const Op*)&std::get<10>(EvexOpsData),
				(const Op*)&std::get<11>(EvexOpsData),
				(const Op*)&std::get<12>(EvexOpsData),
				(const Op*)&std::get<13>(EvexOpsData),
				(const Op*)&std::get<14>(EvexOpsData),
				(const Op*)&std::get<15>(EvexOpsData),
				(const Op*)&std::get<16>(EvexOpsData),
				(const Op*)&std::get<17>(EvexOpsData),
				(const Op*)&std::get<18>(EvexOpsData),
				(const Op*)&std::get<19>(EvexOpsData),
				(const Op*)&std::get<20>(EvexOpsData),
				(const Op*)&std::get<21>(EvexOpsData),
				(const Op*)&std::get<22>(EvexOpsData),
				(const Op*)&std::get<23>(EvexOpsData),
				(const Op*)&std::get<24>(EvexOpsData),
				(const Op*)&std::get<25>(EvexOpsData),
				(const Op*)&std::get<26>(EvexOpsData),
				(const Op*)&std::get<27>(EvexOpsData),
				(const Op*)&std::get<28>(EvexOpsData),
				(const Op*)&std::get<29>(EvexOpsData),
				(const Op*)&std::get<30>(EvexOpsData)
			});
#endif
#if defined(MVEX)
		private:
			inline static constexpr std::tuple MvexOpsData = std::make_tuple (
				OpModRM_rm_mem_only(false),
				OpVsib(Register::ZMM0, Register::ZMM31),
				OpModRM_rm(Register::ZMM0, Register::ZMM31),
				OpModRM_reg(Register::K0, Register::K7),
				OpHx(Register::K0, Register::K7),
				OpModRM_reg(Register::ZMM0, Register::ZMM31),
				OpHx(Register::ZMM0, Register::ZMM31),
				OpIb(OpKind::Immediate8)
			);
		public:
			inline static constexpr std::array MvexOps = std::to_array<const Op*>({
				(const Op*)&std::get<0>(MvexOpsData),
				(const Op*)&std::get<1>(MvexOpsData),
				(const Op*)&std::get<2>(MvexOpsData),
				(const Op*)&std::get<3>(MvexOpsData),
				(const Op*)&std::get<4>(MvexOpsData),
				(const Op*)&std::get<5>(MvexOpsData),
				(const Op*)&std::get<6>(MvexOpsData),
				(const Op*)&std::get<7>(MvexOpsData)
			});
#endif
	};
}
#endif
