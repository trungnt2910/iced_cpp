// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

#include "../OpCodeOperandKind.g.h"
#include <string>
#include <csharp/exceptionhelper.h>
#include <cassert>
#include <csharp/stringbuilder.h>

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

namespace Iced::Intel
{
	class OpCodeInfo;
}

namespace Iced::Intel::EncoderInternal
{
	// GENERATOR-BEGIN: LKind
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
	enum class LKind : std::uint8_t
	{
		None,
		/// <summary>.128, .256, .512</summary>
		L128,
		/// <summary>.L0, .L1</summary>
		L0,
		/// <summary>.LZ</summary>
		LZ
	};

	DEFINE_COMP(LKind)
	DEFINE_ARITH(LKind)

	// GENERATOR-END: LKind

		/* readonly */
	class OpCodeFormatter
	{
		/* readonly */
	private:
		const bool isConstexprEval = false;
		bool ownsSb = false;
		const OpCodeInfo* opCode = nullptr;
		/* readonly */
		std::string* sb = nullptr;
		/* readonly */
		LKind lkind = static_cast<LKind>(0);
		/* readonly */
		bool hasModrmInfo = false;
	public:
		inline OpCodeFormatter(const OpCodeInfo& opCode, std::string& sb, LKind lkind, bool hasModrmInfo);
		constexpr OpCodeFormatter(const OpCodeInfo& opCode, LKind lkind, bool hasModrmInfo);
		constexpr ~OpCodeFormatter();
		constexpr std::string Format();
	private:
		constexpr OpCodeFormatter(const OpCodeInfo& opCode, LKind lkind, bool hasModrmInfo, bool constructString);
		constexpr void AppendHexByte(std::uint8_t value);
		constexpr void AppendOpCode(std::uint32_t value, std::int32_t valueLen, bool sep);
		constexpr void AppendTable(bool sep);
		constexpr bool HasModRM();
		constexpr bool HasVsib();
		constexpr OpCodeOperandKind GetOpCodeBitsOperand();
		constexpr bool TryGetModrmInfo(bool& isRegOnly, std::int32_t& rrr, std::int32_t& bbb);
		constexpr void AppendBits(const std::string& name, std::int32_t bits, std::int32_t numBits);
		constexpr void AppendRest();
		constexpr std::string Format_Legacy();
		constexpr std::string Format_3DNow();
		constexpr std::string FormatVecEncoding(const std::string& encodingName);

		constexpr OpCodeFormatter() = default;
	};
}
