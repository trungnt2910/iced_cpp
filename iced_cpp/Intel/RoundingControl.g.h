/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class RoundingControl {
		/// <summary>No rounding mode</summary>
		None  = 0,
		/// <summary>Round to nearest (even)</summary>
		RoundToNearest  = 1,
		/// <summary>Round down (toward -inf)</summary>
		RoundDown  = 2,
		/// <summary>Round up (toward +inf)</summary>
		RoundUp  = 3,
		/// <summary>Round toward zero (truncate)</summary>
		RoundTowardZero  = 4,
	};
	constexpr int operator+(const RoundingControl& a, const RoundingControl& b) { return ((int)a + (int)b); }
	constexpr int operator+(const RoundingControl& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const RoundingControl& b) { return (a + (int)b); }
	constexpr int operator-(const RoundingControl& a, const RoundingControl& b) { return ((int)a - (int)b); }
	constexpr int operator-(const RoundingControl& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const RoundingControl& b) { return (a - (int)b); }
	constexpr RoundingControl operator++(RoundingControl& a, int) { auto temp = a; a = RoundingControl(a + 1); return temp; }
	constexpr RoundingControl& operator++(RoundingControl& a) { return a = RoundingControl(a + 1); }
	constexpr RoundingControl operator--(RoundingControl& a, int) { auto temp = a; a = RoundingControl(a - 1); return temp; }
	constexpr RoundingControl& operator--(RoundingControl& a) { return a = RoundingControl(a - 1); }
	constexpr bool operator==(const RoundingControl& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const RoundingControl& b) { return (a == (int)b); }
	constexpr bool operator>=(const RoundingControl& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const RoundingControl& b) { return (a >= (int)b); }
	constexpr bool operator<=(const RoundingControl& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const RoundingControl& b) { return (a <= (int)b); }
	constexpr bool operator>(const RoundingControl& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const RoundingControl& b) { return (a > (int)b); }
	constexpr bool operator<(const RoundingControl& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const RoundingControl& b) { return (a < (int)b); }
	constexpr bool operator!=(const RoundingControl& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const RoundingControl& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::RoundingControl& e) {
	switch (e) {
		case Iced::Intel::RoundingControl::None: return "None";
		case Iced::Intel::RoundingControl::RoundToNearest: return "RoundToNearest";
		case Iced::Intel::RoundingControl::RoundDown: return "RoundDown";
		case Iced::Intel::RoundingControl::RoundUp: return "RoundUp";
		case Iced::Intel::RoundingControl::RoundTowardZero: return "RoundTowardZero";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
