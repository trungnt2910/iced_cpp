/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(DECODER) && (!defined(NO_VEX) || !defined(NO_XOP))
#include <array>
#include <cstdint>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel::DecoderInternal {
	enum class VexOpCodeHandlerKind : std::uint8_t {
		Invalid ,
		Invalid2 ,
		Dup ,
		Invalid_NoModRM ,
		Bitness_DontReadModRM ,
		HandlerReference ,
		ArrayReference ,
		RM ,
		Group ,
		W ,
		MandatoryPrefix2_1 ,
		MandatoryPrefix2_4 ,
		MandatoryPrefix2_NoModRM ,
		VectorLength_NoModRM ,
		VectorLength ,
		Ed_V_Ib ,
		Ev_VX ,
		G_VK ,
		Gv_Ev_Gv ,
		Gv_Ev_Ib ,
		Gv_Ev_Id ,
		Gv_GPR_Ib ,
		Gv_Gv_Ev ,
		Gv_RX ,
		Gv_W ,
		GvM_VX_Ib ,
		HRIb ,
		Hv_Ed_Id ,
		Hv_Ev ,
		M ,
		MHV ,
		M_VK ,
		MV ,
		rDI_VX_RX ,
		RdRq ,
		Simple ,
		VHEv ,
		VHEvIb ,
		VHIs4W ,
		VHIs5W ,
		VHM ,
		VHW_2 ,
		VHW_3 ,
		VHW_4 ,
		VHWIb_2 ,
		VHWIb_4 ,
		VHWIs4 ,
		VHWIs5 ,
		VK_HK_RK ,
		VK_R ,
		VK_RK ,
		VK_RK_Ib ,
		VK_WK ,
		VM ,
		VW_2 ,
		VW_3 ,
		VWH ,
		VWIb_2 ,
		VWIb_3 ,
		VX_Ev ,
		VX_VSIB_HX ,
		WHV ,
		WV ,
		WVIb ,
		VT_SIBMEM ,
		SIBMEM_VT ,
		VT ,
		VT_RT_HT ,
		Group8x64 ,
		Bitness ,
		Null ,
		Options_DontReadModRM ,
		Gq_HK_RK ,
		VK_R_Ib ,
		Gv_Ev ,
		Ev ,
		K_Jb ,
		K_Jz ,
	};
	constexpr std::uint8_t operator+(const VexOpCodeHandlerKind& a, const VexOpCodeHandlerKind& b) { return ((std::uint8_t)a + (std::uint8_t)b); }
	constexpr std::uint8_t operator+(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a + b); }
	constexpr std::uint8_t operator+(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a + (std::uint8_t)b); }
	constexpr std::uint8_t operator-(const VexOpCodeHandlerKind& a, const VexOpCodeHandlerKind& b) { return ((std::uint8_t)a - (std::uint8_t)b); }
	constexpr std::uint8_t operator-(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a - b); }
	constexpr std::uint8_t operator-(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a - (std::uint8_t)b); }
	constexpr VexOpCodeHandlerKind operator++(VexOpCodeHandlerKind& a, int) { auto temp = a; a = VexOpCodeHandlerKind(a + 1); return temp; }
	constexpr VexOpCodeHandlerKind& operator++(VexOpCodeHandlerKind& a) { return a = VexOpCodeHandlerKind(a + 1); }
	constexpr VexOpCodeHandlerKind operator--(VexOpCodeHandlerKind& a, int) { auto temp = a; a = VexOpCodeHandlerKind(a - 1); return temp; }
	constexpr VexOpCodeHandlerKind& operator--(VexOpCodeHandlerKind& a) { return a = VexOpCodeHandlerKind(a - 1); }
	constexpr bool operator==(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a == b); }
	constexpr bool operator==(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a == (std::uint8_t)b); }
	constexpr bool operator>=(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a >= b); }
	constexpr bool operator>=(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a >= (std::uint8_t)b); }
	constexpr bool operator<=(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a <= b); }
	constexpr bool operator<=(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a <= (std::uint8_t)b); }
	constexpr bool operator>(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a > b); }
	constexpr bool operator>(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a > (std::uint8_t)b); }
	constexpr bool operator<(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a < b); }
	constexpr bool operator<(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a < (std::uint8_t)b); }
	constexpr bool operator!=(const VexOpCodeHandlerKind& a, const std::uint8_t& b) { return ((std::uint8_t)a != b); }
	constexpr bool operator!=(const std::uint8_t& a, const VexOpCodeHandlerKind& b) { return (a != (std::uint8_t)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::DecoderInternal::VexOpCodeHandlerKind& e) {
	switch (e) {
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Invalid: return "Invalid";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Invalid2: return "Invalid2";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Dup: return "Dup";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Invalid_NoModRM: return "Invalid_NoModRM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Bitness_DontReadModRM: return "Bitness_DontReadModRM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::HandlerReference: return "HandlerReference";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::ArrayReference: return "ArrayReference";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::RM: return "RM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Group: return "Group";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::W: return "W";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::MandatoryPrefix2_1: return "MandatoryPrefix2_1";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::MandatoryPrefix2_4: return "MandatoryPrefix2_4";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::MandatoryPrefix2_NoModRM: return "MandatoryPrefix2_NoModRM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VectorLength_NoModRM: return "VectorLength_NoModRM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VectorLength: return "VectorLength";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Ed_V_Ib: return "Ed_V_Ib";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Ev_VX: return "Ev_VX";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::G_VK: return "G_VK";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_Ev_Gv: return "Gv_Ev_Gv";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_Ev_Ib: return "Gv_Ev_Ib";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_Ev_Id: return "Gv_Ev_Id";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_GPR_Ib: return "Gv_GPR_Ib";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_Gv_Ev: return "Gv_Gv_Ev";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_RX: return "Gv_RX";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_W: return "Gv_W";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::GvM_VX_Ib: return "GvM_VX_Ib";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::HRIb: return "HRIb";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Hv_Ed_Id: return "Hv_Ed_Id";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Hv_Ev: return "Hv_Ev";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::M: return "M";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::MHV: return "MHV";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::M_VK: return "M_VK";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::MV: return "MV";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::rDI_VX_RX: return "rDI_VX_RX";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::RdRq: return "RdRq";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Simple: return "Simple";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHEv: return "VHEv";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHEvIb: return "VHEvIb";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHIs4W: return "VHIs4W";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHIs5W: return "VHIs5W";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHM: return "VHM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHW_2: return "VHW_2";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHW_3: return "VHW_3";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHW_4: return "VHW_4";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHWIb_2: return "VHWIb_2";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHWIb_4: return "VHWIb_4";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHWIs4: return "VHWIs4";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VHWIs5: return "VHWIs5";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VK_HK_RK: return "VK_HK_RK";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VK_R: return "VK_R";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VK_RK: return "VK_RK";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VK_RK_Ib: return "VK_RK_Ib";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VK_WK: return "VK_WK";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VM: return "VM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VW_2: return "VW_2";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VW_3: return "VW_3";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VWH: return "VWH";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VWIb_2: return "VWIb_2";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VWIb_3: return "VWIb_3";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VX_Ev: return "VX_Ev";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VX_VSIB_HX: return "VX_VSIB_HX";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::WHV: return "WHV";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::WV: return "WV";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::WVIb: return "WVIb";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VT_SIBMEM: return "VT_SIBMEM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::SIBMEM_VT: return "SIBMEM_VT";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VT: return "VT";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VT_RT_HT: return "VT_RT_HT";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Group8x64: return "Group8x64";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Bitness: return "Bitness";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Null: return "Null";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Options_DontReadModRM: return "Options_DontReadModRM";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gq_HK_RK: return "Gq_HK_RK";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::VK_R_Ib: return "VK_R_Ib";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Gv_Ev: return "Gv_Ev";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::Ev: return "Ev";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::K_Jb: return "K_Jb";
		case Iced::Intel::DecoderInternal::VexOpCodeHandlerKind::K_Jz: return "K_Jz";
		default: return Internal::StringHelpers::ToDec((std::uint8_t)e);
	}
}
#endif
