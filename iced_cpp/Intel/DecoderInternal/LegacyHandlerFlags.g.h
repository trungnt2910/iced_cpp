/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(DECODER)
#include <array>
#include <cstdint>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel::DecoderInternal {
	enum class LegacyHandlerFlags : std::uint32_t {
		HandlerReg  = 0x00000001,
		HandlerMem  = 0x00000002,
		Handler66Reg  = 0x00000004,
		Handler66Mem  = 0x00000008,
		HandlerF3Reg  = 0x00000010,
		HandlerF3Mem  = 0x00000020,
		HandlerF2Reg  = 0x00000040,
		HandlerF2Mem  = 0x00000080,
	};
	constexpr LegacyHandlerFlags& operator^=(LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return a = (LegacyHandlerFlags)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr LegacyHandlerFlags operator^(const LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return (LegacyHandlerFlags)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr LegacyHandlerFlags& operator|=(LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return a = (LegacyHandlerFlags)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr LegacyHandlerFlags operator|(const LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return (LegacyHandlerFlags)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr LegacyHandlerFlags& operator&=(LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return a = (LegacyHandlerFlags)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr LegacyHandlerFlags operator&(const LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return (LegacyHandlerFlags)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr LegacyHandlerFlags operator~(const LegacyHandlerFlags& a) { return (LegacyHandlerFlags)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const LegacyHandlerFlags& a, const LegacyHandlerFlags& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a - (std::uint32_t)b); }
	constexpr LegacyHandlerFlags operator++(LegacyHandlerFlags& a, int) { auto temp = a; a = LegacyHandlerFlags(a + 1); return temp; }
	constexpr LegacyHandlerFlags& operator++(LegacyHandlerFlags& a) { return a = LegacyHandlerFlags(a + 1); }
	constexpr LegacyHandlerFlags operator--(LegacyHandlerFlags& a, int) { auto temp = a; a = LegacyHandlerFlags(a - 1); return temp; }
	constexpr LegacyHandlerFlags& operator--(LegacyHandlerFlags& a) { return a = LegacyHandlerFlags(a - 1); }
	constexpr bool operator==(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const LegacyHandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const LegacyHandlerFlags& b) { return (a != (std::uint32_t)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::DecoderInternal::LegacyHandlerFlags& e) {
	std::string result;
	auto temp = e;
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerReg) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerReg) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerReg;
		result += "HandlerReg, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerMem) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerMem) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerMem;
		result += "HandlerMem, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::Handler66Reg) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::Handler66Reg) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::Handler66Reg;
		result += "Handler66Reg, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::Handler66Mem) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::Handler66Mem) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::Handler66Mem;
		result += "Handler66Mem, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF3Reg) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF3Reg) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF3Reg;
		result += "HandlerF3Reg, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF3Mem) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF3Mem) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF3Mem;
		result += "HandlerF3Mem, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF2Reg) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF2Reg) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF2Reg;
		result += "HandlerF2Reg, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF2Mem) == Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF2Mem) {
		temp ^= Iced::Intel::DecoderInternal::LegacyHandlerFlags::HandlerF2Mem;
		result += "HandlerF2Mem, ";
	}
	if (temp != 0 || result.empty()) return Internal::StringHelpers::ToDec((std::uint32_t)e);
	return result.substr(0, result.size() - 2);
}
#endif
