/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(DECODER)
#include <array>
#include <cstdint>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel::DecoderInternal {
	enum class HandlerFlags : std::uint32_t {
		None  = 0x00000000,
		Xacquire  = 0x00000001,
		Xrelease  = 0x00000002,
		XacquireXreleaseNoLock  = 0x00000004,
		Lock  = 0x00000008,
	};
	constexpr HandlerFlags& operator^=(HandlerFlags& a, const HandlerFlags& b) { return a = (HandlerFlags)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr HandlerFlags operator^(const HandlerFlags& a, const HandlerFlags& b) { return (HandlerFlags)((std::uint32_t)a ^ (std::uint32_t)b); }
	constexpr HandlerFlags& operator|=(HandlerFlags& a, const HandlerFlags& b) { return a = (HandlerFlags)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr HandlerFlags operator|(const HandlerFlags& a, const HandlerFlags& b) { return (HandlerFlags)((std::uint32_t)a | (std::uint32_t)b); }
	constexpr HandlerFlags& operator&=(HandlerFlags& a, const HandlerFlags& b) { return a = (HandlerFlags)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr HandlerFlags operator&(const HandlerFlags& a, const HandlerFlags& b) { return (HandlerFlags)((std::uint32_t)a & (std::uint32_t)b); }
	constexpr HandlerFlags operator~(const HandlerFlags& a) { return (HandlerFlags)(~((std::uint32_t)a)); }
	constexpr std::uint32_t operator+(const HandlerFlags& a, const HandlerFlags& b) { return ((std::uint32_t)a + (std::uint32_t)b); }
	constexpr std::uint32_t operator+(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a + b); }
	constexpr std::uint32_t operator+(const std::uint32_t& a, const HandlerFlags& b) { return (a + (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const HandlerFlags& a, const HandlerFlags& b) { return ((std::uint32_t)a - (std::uint32_t)b); }
	constexpr std::uint32_t operator-(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a - b); }
	constexpr std::uint32_t operator-(const std::uint32_t& a, const HandlerFlags& b) { return (a - (std::uint32_t)b); }
	constexpr HandlerFlags operator++(HandlerFlags& a, int) { auto temp = a; a = HandlerFlags(a + 1); return temp; }
	constexpr HandlerFlags& operator++(HandlerFlags& a) { return a = HandlerFlags(a + 1); }
	constexpr HandlerFlags operator--(HandlerFlags& a, int) { auto temp = a; a = HandlerFlags(a - 1); return temp; }
	constexpr HandlerFlags& operator--(HandlerFlags& a) { return a = HandlerFlags(a - 1); }
	constexpr bool operator==(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a == b); }
	constexpr bool operator==(const std::uint32_t& a, const HandlerFlags& b) { return (a == (std::uint32_t)b); }
	constexpr bool operator>=(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a >= b); }
	constexpr bool operator>=(const std::uint32_t& a, const HandlerFlags& b) { return (a >= (std::uint32_t)b); }
	constexpr bool operator<=(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a <= b); }
	constexpr bool operator<=(const std::uint32_t& a, const HandlerFlags& b) { return (a <= (std::uint32_t)b); }
	constexpr bool operator>(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a > b); }
	constexpr bool operator>(const std::uint32_t& a, const HandlerFlags& b) { return (a > (std::uint32_t)b); }
	constexpr bool operator<(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a < b); }
	constexpr bool operator<(const std::uint32_t& a, const HandlerFlags& b) { return (a < (std::uint32_t)b); }
	constexpr bool operator!=(const HandlerFlags& a, const std::uint32_t& b) { return ((std::uint32_t)a != b); }
	constexpr bool operator!=(const std::uint32_t& a, const HandlerFlags& b) { return (a != (std::uint32_t)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::DecoderInternal::HandlerFlags& e) {
	std::string result;
	auto temp = e;
	if (temp == Iced::Intel::DecoderInternal::HandlerFlags::None) {
		return "None";
	}
	if ((temp & Iced::Intel::DecoderInternal::HandlerFlags::Xacquire) == Iced::Intel::DecoderInternal::HandlerFlags::Xacquire) {
		temp ^= Iced::Intel::DecoderInternal::HandlerFlags::Xacquire;
		result += "Xacquire, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::HandlerFlags::Xrelease) == Iced::Intel::DecoderInternal::HandlerFlags::Xrelease) {
		temp ^= Iced::Intel::DecoderInternal::HandlerFlags::Xrelease;
		result += "Xrelease, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::HandlerFlags::XacquireXreleaseNoLock) == Iced::Intel::DecoderInternal::HandlerFlags::XacquireXreleaseNoLock) {
		temp ^= Iced::Intel::DecoderInternal::HandlerFlags::XacquireXreleaseNoLock;
		result += "XacquireXreleaseNoLock, ";
	}
	if ((temp & Iced::Intel::DecoderInternal::HandlerFlags::Lock) == Iced::Intel::DecoderInternal::HandlerFlags::Lock) {
		temp ^= Iced::Intel::DecoderInternal::HandlerFlags::Lock;
		result += "Lock, ";
	}
	if (temp != 0 || result.empty()) return Internal::StringHelpers::ToDec((std::uint32_t)e);
	return result.substr(0, result.size() - 2);
}
#endif
