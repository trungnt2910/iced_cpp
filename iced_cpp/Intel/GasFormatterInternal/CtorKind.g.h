/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(GAS)
#include <array>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel::GasFormatterInternal {
	enum class CtorKind {
		Previous ,
		Normal_1 ,
		Normal_2a ,
		Normal_2b ,
		Normal_2c ,
		Normal_3 ,
		AamAad ,
		asz ,
		bnd ,
		ST_STi ,
		DeclareData ,
		er_2 ,
		er_4 ,
		far ,
		imul ,
		maskmovq ,
		movabs ,
		nop ,
		OpSize ,
		OpSize2_bnd ,
		OpSize3 ,
		os ,
		STi_ST ,
		sae ,
		CC_1 ,
		CC_2 ,
		CC_3 ,
		os_jcc_1 ,
		os_jcc_2 ,
		os_jcc_3 ,
		os_loopcc ,
		os_loop ,
		os_mem ,
		Reg16 ,
		os_mem2 ,
		os2_3 ,
		os2_4 ,
		STIG1 ,
		pblendvb ,
		pclmulqdq ,
		pops ,
		mem16 ,
		Reg32 ,
	};
	constexpr int operator+(const CtorKind& a, const CtorKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const CtorKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const CtorKind& b) { return (a + (int)b); }
	constexpr int operator-(const CtorKind& a, const CtorKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const CtorKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const CtorKind& b) { return (a - (int)b); }
	constexpr CtorKind operator++(CtorKind& a, int) { auto temp = a; a = CtorKind(a + 1); return temp; }
	constexpr CtorKind& operator++(CtorKind& a) { return a = CtorKind(a + 1); }
	constexpr CtorKind operator--(CtorKind& a, int) { auto temp = a; a = CtorKind(a - 1); return temp; }
	constexpr CtorKind& operator--(CtorKind& a) { return a = CtorKind(a - 1); }
	constexpr bool operator==(const CtorKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const CtorKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const CtorKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const CtorKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const CtorKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const CtorKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const CtorKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const CtorKind& b) { return (a > (int)b); }
	constexpr bool operator<(const CtorKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const CtorKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const CtorKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const CtorKind& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::GasFormatterInternal::CtorKind& e) {
	switch (e) {
		case Iced::Intel::GasFormatterInternal::CtorKind::Previous: return "Previous";
		case Iced::Intel::GasFormatterInternal::CtorKind::Normal_1: return "Normal_1";
		case Iced::Intel::GasFormatterInternal::CtorKind::Normal_2a: return "Normal_2a";
		case Iced::Intel::GasFormatterInternal::CtorKind::Normal_2b: return "Normal_2b";
		case Iced::Intel::GasFormatterInternal::CtorKind::Normal_2c: return "Normal_2c";
		case Iced::Intel::GasFormatterInternal::CtorKind::Normal_3: return "Normal_3";
		case Iced::Intel::GasFormatterInternal::CtorKind::AamAad: return "AamAad";
		case Iced::Intel::GasFormatterInternal::CtorKind::asz: return "asz";
		case Iced::Intel::GasFormatterInternal::CtorKind::bnd: return "bnd";
		case Iced::Intel::GasFormatterInternal::CtorKind::ST_STi: return "ST_STi";
		case Iced::Intel::GasFormatterInternal::CtorKind::DeclareData: return "DeclareData";
		case Iced::Intel::GasFormatterInternal::CtorKind::er_2: return "er_2";
		case Iced::Intel::GasFormatterInternal::CtorKind::er_4: return "er_4";
		case Iced::Intel::GasFormatterInternal::CtorKind::far: return "far";
		case Iced::Intel::GasFormatterInternal::CtorKind::imul: return "imul";
		case Iced::Intel::GasFormatterInternal::CtorKind::maskmovq: return "maskmovq";
		case Iced::Intel::GasFormatterInternal::CtorKind::movabs: return "movabs";
		case Iced::Intel::GasFormatterInternal::CtorKind::nop: return "nop";
		case Iced::Intel::GasFormatterInternal::CtorKind::OpSize: return "OpSize";
		case Iced::Intel::GasFormatterInternal::CtorKind::OpSize2_bnd: return "OpSize2_bnd";
		case Iced::Intel::GasFormatterInternal::CtorKind::OpSize3: return "OpSize3";
		case Iced::Intel::GasFormatterInternal::CtorKind::os: return "os";
		case Iced::Intel::GasFormatterInternal::CtorKind::STi_ST: return "STi_ST";
		case Iced::Intel::GasFormatterInternal::CtorKind::sae: return "sae";
		case Iced::Intel::GasFormatterInternal::CtorKind::CC_1: return "CC_1";
		case Iced::Intel::GasFormatterInternal::CtorKind::CC_2: return "CC_2";
		case Iced::Intel::GasFormatterInternal::CtorKind::CC_3: return "CC_3";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_jcc_1: return "os_jcc_1";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_jcc_2: return "os_jcc_2";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_jcc_3: return "os_jcc_3";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_loopcc: return "os_loopcc";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_loop: return "os_loop";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_mem: return "os_mem";
		case Iced::Intel::GasFormatterInternal::CtorKind::Reg16: return "Reg16";
		case Iced::Intel::GasFormatterInternal::CtorKind::os_mem2: return "os_mem2";
		case Iced::Intel::GasFormatterInternal::CtorKind::os2_3: return "os2_3";
		case Iced::Intel::GasFormatterInternal::CtorKind::os2_4: return "os2_4";
		case Iced::Intel::GasFormatterInternal::CtorKind::STIG1: return "STIG1";
		case Iced::Intel::GasFormatterInternal::CtorKind::pblendvb: return "pblendvb";
		case Iced::Intel::GasFormatterInternal::CtorKind::pclmulqdq: return "pclmulqdq";
		case Iced::Intel::GasFormatterInternal::CtorKind::pops: return "pops";
		case Iced::Intel::GasFormatterInternal::CtorKind::mem16: return "mem16";
		case Iced::Intel::GasFormatterInternal::CtorKind::Reg32: return "Reg32";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
