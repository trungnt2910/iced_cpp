/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(DECODER)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class DecoderError {
		/// <summary>No error. The last decoded instruction is a valid instruction</summary>
		None  = 0,
		/// <summary>It&apos;s an invalid instruction or an invalid encoding of an existing instruction (eg. some reserved bit is set/cleared)</summary>
		InvalidInstruction  = 1,
		/// <summary>There&apos;s not enough bytes left to decode the instruction</summary>
		NoMoreBytes  = 2,
	};
	constexpr int operator+(const DecoderError& a, const DecoderError& b) { return ((int)a + (int)b); }
	constexpr int operator+(const DecoderError& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const DecoderError& b) { return (a + (int)b); }
	constexpr int operator-(const DecoderError& a, const DecoderError& b) { return ((int)a - (int)b); }
	constexpr int operator-(const DecoderError& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const DecoderError& b) { return (a - (int)b); }
	constexpr DecoderError operator++(DecoderError& a, int) { auto temp = a; a = DecoderError(a + 1); return temp; }
	constexpr DecoderError& operator++(DecoderError& a) { return a = DecoderError(a + 1); }
	constexpr DecoderError operator--(DecoderError& a, int) { auto temp = a; a = DecoderError(a - 1); return temp; }
	constexpr DecoderError& operator--(DecoderError& a) { return a = DecoderError(a - 1); }
	constexpr bool operator==(const DecoderError& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const DecoderError& b) { return (a == (int)b); }
	constexpr bool operator>=(const DecoderError& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const DecoderError& b) { return (a >= (int)b); }
	constexpr bool operator<=(const DecoderError& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const DecoderError& b) { return (a <= (int)b); }
	constexpr bool operator>(const DecoderError& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const DecoderError& b) { return (a > (int)b); }
	constexpr bool operator<(const DecoderError& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const DecoderError& b) { return (a < (int)b); }
	constexpr bool operator!=(const DecoderError& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const DecoderError& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::DecoderError& e) {
	switch (e) {
		case Iced::Intel::DecoderError::None: return "None";
		case Iced::Intel::DecoderError::InvalidInstruction: return "InvalidInstruction";
		case Iced::Intel::DecoderError::NoMoreBytes: return "NoMoreBytes";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
