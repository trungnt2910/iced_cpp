/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(MVEX)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MvexEHBit {
		/// <summary>Not hard coded to 0 or 1 so can be used for other purposes</summary>
		None  = 0,
		/// <summary>EH bit must be 0</summary>
		EH0  = 1,
		/// <summary>EH bit must be 1</summary>
		EH1  = 2,
	};
	constexpr int operator+(const MvexEHBit& a, const MvexEHBit& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MvexEHBit& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MvexEHBit& b) { return (a + (int)b); }
	constexpr int operator-(const MvexEHBit& a, const MvexEHBit& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MvexEHBit& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MvexEHBit& b) { return (a - (int)b); }
	constexpr MvexEHBit operator++(MvexEHBit& a, int) { auto temp = a; a = MvexEHBit(a + 1); return temp; }
	constexpr MvexEHBit& operator++(MvexEHBit& a) { return a = MvexEHBit(a + 1); }
	constexpr MvexEHBit operator--(MvexEHBit& a, int) { auto temp = a; a = MvexEHBit(a - 1); return temp; }
	constexpr MvexEHBit& operator--(MvexEHBit& a) { return a = MvexEHBit(a - 1); }
	constexpr bool operator==(const MvexEHBit& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MvexEHBit& b) { return (a == (int)b); }
	constexpr bool operator>=(const MvexEHBit& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MvexEHBit& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MvexEHBit& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MvexEHBit& b) { return (a <= (int)b); }
	constexpr bool operator>(const MvexEHBit& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MvexEHBit& b) { return (a > (int)b); }
	constexpr bool operator<(const MvexEHBit& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MvexEHBit& b) { return (a < (int)b); }
	constexpr bool operator!=(const MvexEHBit& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MvexEHBit& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MvexEHBit& e) {
	switch (e) {
		case Iced::Intel::MvexEHBit::None: return "None";
		case Iced::Intel::MvexEHBit::EH0: return "EH0";
		case Iced::Intel::MvexEHBit::EH1: return "EH1";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
