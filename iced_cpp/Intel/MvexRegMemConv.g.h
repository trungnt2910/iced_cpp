// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
namespace Iced::Intel
{
	/// <summary>MVEX register/memory operand conversion</summary>
	enum class MvexRegMemConv
	{
		/// <summary>No operand conversion</summary>
		None = 0,
		/// <summary>Register swizzle: <c>zmm0</c> or <c>zmm0 {dcba}</c></summary>
		RegSwizzleNone = 1,
		/// <summary>Register swizzle: <c>zmm0 {cdab}</c></summary>
		RegSwizzleCdab = 2,
		/// <summary>Register swizzle: <c>zmm0 {badc}</c></summary>
		RegSwizzleBadc = 3,
		/// <summary>Register swizzle: <c>zmm0 {dacb}</c></summary>
		RegSwizzleDacb = 4,
		/// <summary>Register swizzle: <c>zmm0 {aaaa}</c></summary>
		RegSwizzleAaaa = 5,
		/// <summary>Register swizzle: <c>zmm0 {bbbb}</c></summary>
		RegSwizzleBbbb = 6,
		/// <summary>Register swizzle: <c>zmm0 {cccc}</c></summary>
		RegSwizzleCccc = 7,
		/// <summary>Register swizzle: <c>zmm0 {dddd}</c></summary>
		RegSwizzleDddd = 8,
		/// <summary>Memory Up/DownConv: <c>[rax]</c> / <c>zmm0</c></summary>
		MemConvNone = 9,
		/// <summary>Memory UpConv: <c>[rax] {1to16}</c> or <c>[rax] {1to8}</c></summary>
		MemConvBroadcast1 = 10,
		/// <summary>Memory UpConv: <c>[rax] {4to16}</c> or <c>[rax] {4to8}</c></summary>
		MemConvBroadcast4 = 11,
		/// <summary>Memory Up/DownConv: <c>[rax] {float16}</c> / <c>zmm0 {float16}</c></summary>
		MemConvFloat16 = 12,
		/// <summary>Memory Up/DownConv: <c>[rax] {uint8}</c> / <c>zmm0 {uint8}</c></summary>
		MemConvUint8 = 13,
		/// <summary>Memory Up/DownConv: <c>[rax] {sint8}</c> / <c>zmm0 {sint8}</c></summary>
		MemConvSint8 = 14,
		/// <summary>Memory Up/DownConv: <c>[rax] {uint16}</c> / <c>zmm0 {uint16}</c></summary>
		MemConvUint16 = 15,
		/// <summary>Memory Up/DownConv: <c>[rax] {sint16}</c> / <c>zmm0 {sint16}</c></summary>
		MemConvSint16 = 16
	};

	DEFINE_COMP(MvexRegMemConv)
		DEFINE_ARITH(MvexRegMemConv)

}
