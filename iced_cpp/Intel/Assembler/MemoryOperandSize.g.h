/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(ENCODER) && defined(BLOCK_ENCODER) && defined(CODE_ASSEMBLER)
#include <array>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MemoryOperandSize {
		None ,
		Byte ,
		Word ,
		Dword ,
		Qword ,
		Tbyte ,
		Fword ,
		Xword ,
		Yword ,
		Zword ,
	};
	constexpr int operator+(const MemoryOperandSize& a, const MemoryOperandSize& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MemoryOperandSize& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MemoryOperandSize& b) { return (a + (int)b); }
	constexpr int operator-(const MemoryOperandSize& a, const MemoryOperandSize& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MemoryOperandSize& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MemoryOperandSize& b) { return (a - (int)b); }
	constexpr MemoryOperandSize operator++(MemoryOperandSize& a, int) { auto temp = a; a = MemoryOperandSize(a + 1); return temp; }
	constexpr MemoryOperandSize& operator++(MemoryOperandSize& a) { return a = MemoryOperandSize(a + 1); }
	constexpr MemoryOperandSize operator--(MemoryOperandSize& a, int) { auto temp = a; a = MemoryOperandSize(a - 1); return temp; }
	constexpr MemoryOperandSize& operator--(MemoryOperandSize& a) { return a = MemoryOperandSize(a - 1); }
	constexpr bool operator==(const MemoryOperandSize& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MemoryOperandSize& b) { return (a == (int)b); }
	constexpr bool operator>=(const MemoryOperandSize& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MemoryOperandSize& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MemoryOperandSize& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MemoryOperandSize& b) { return (a <= (int)b); }
	constexpr bool operator>(const MemoryOperandSize& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MemoryOperandSize& b) { return (a > (int)b); }
	constexpr bool operator<(const MemoryOperandSize& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MemoryOperandSize& b) { return (a < (int)b); }
	constexpr bool operator!=(const MemoryOperandSize& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MemoryOperandSize& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MemoryOperandSize& e) {
	switch (e) {
		case Iced::Intel::MemoryOperandSize::None: return "None";
		case Iced::Intel::MemoryOperandSize::Byte: return "Byte";
		case Iced::Intel::MemoryOperandSize::Word: return "Word";
		case Iced::Intel::MemoryOperandSize::Dword: return "Dword";
		case Iced::Intel::MemoryOperandSize::Qword: return "Qword";
		case Iced::Intel::MemoryOperandSize::Tbyte: return "Tbyte";
		case Iced::Intel::MemoryOperandSize::Fword: return "Fword";
		case Iced::Intel::MemoryOperandSize::Xword: return "Xword";
		case Iced::Intel::MemoryOperandSize::Yword: return "Yword";
		case Iced::Intel::MemoryOperandSize::Zword: return "Zword";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
