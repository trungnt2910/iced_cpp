// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

#include "../InstructionList.h"
#include "Label.h"
#include "../Iced.Intel.Instruction.h"
#include "AssemblerOperandFlags.h"
#include "../BlockEncoder.h"
#include "../CodeWriter.h"
#include "AssemblerResult.h"
#include "../Mnemonic.g.h"
#include "Iced.Intel.AssemblerRegister8.h"
#include "AssemblerMemoryOperand.h"
#include "AssemblerRegister16.h"
#include "AssemblerRegister32.h"
#include "AssemblerRegister64.h"
#include "AssemblerRegisterXMM.h"
#include "Iced.Intel.AssemblerRegisterBND.h"
#include "Iced.Intel.AssemblerRegisterMM.h"
#include "Iced.Intel.AssemblerRegisterST.h"
#include "Iced.Intel.AssemblerRegisterK.h"
#include "Iced.Intel.AssemblerRegisterSegment.h"
#include "Iced.Intel.AssemblerRegisterCR.h"
#include "Iced.Intel.AssemblerRegisterDR.h"
#include "Iced.Intel.AssemblerRegisterTR.h"
#include "Iced.Intel.AssemblerRegisterTMM.h"
#include "AssemblerRegisterZMM.h"
#include "AssemblerRegisterYMM.h"
#include <string>
#include <vector>
#include <cmath>
#include <limits>
#include <stdexcept>
#include <any>
#include <format>
#include <csharp/exceptionhelper.h>
#include <csharp/stringbuilder.h>

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
namespace Iced::Intel
{
	/// <summary>
	/// High-Level Assembler.
	/// </summary>
	class Assembler
	{
	private:
		enum class PrefixFlags
		{
			None = 0,
			Lock = 0x01,
			Repe = 0x02,
			Repne = 0x04,
			Notrack = 0x08,
			PreferVex = 0x10,
			PreferEvex = 0x20
		};
		DEFINE_FLAGS_FRIEND(PrefixFlags)
			DEFINE_COMP_FRIEND(PrefixFlags)
			DEFINE_ARITH_FRIEND(PrefixFlags)
	private:
		std::int32_t Bitness = 0;
		bool PreferVex = false;
		bool PreferShortBranch = false;

		/* readonly */
		InstructionList* instructions;
		std::uint64_t currentLabelId = 0;
		Iced::Intel::Label currentLabel;
		Iced::Intel::Label currentAnonLabel;
		Iced::Intel::Label nextAnonLabel;
		bool definedAnonLabel = false;
		PrefixFlags prefixFlags = static_cast<PrefixFlags>(0);
		/// <summary>
		/// Creates a new instance of this assembler
		/// </summary>
		/// <param name="bitness">The assembler instruction set bitness, either 16, 32 or 64 bit.</param>
	public:
		Assembler(std::int32_t bitness);
		/// <summary>
		/// Gets the bitness defined for this assembler.
		/// </summary>
		std::int32_t GetBitness() const;
		/// <summary>
		/// <c>true</c> to prefer VEX encoding over EVEX. This is the default. See also <see cref="vex"/> and <see cref="evex"/>.
		/// </summary>
		bool GetPreferVex() const;
		void SetPreferVex(bool value);
		/// <summary>
		/// <c>true</c> to prefer short branch encoding. This is the default.
		/// </summary>
		bool GetPreferShortBranch() const;
		void SetPreferShortBranch(bool value);
		bool GetInstructionPreferVex() const;
		/// <summary>
		/// Gets the instructions.
		/// </summary>
		IReadOnlyList<Instruction>* GetInstructions() const;
		/// <summary>
		/// Reset the current set of instructions and labels added to this instance.
		/// </summary>
		void Reset();
		/// <summary>
		/// Creates a label.
		/// </summary>
		/// <param name="name">Optional name of the label.</param>
		/// <returns></returns>
	  //C# TO C++ CONVERTER WARNING: Nullable reference types have no equivalent in C++:
	  //ORIGINAL LINE: public Label CreateLabel(string? name = null)
		Iced::Intel::Label CreateLabel(const std::string& name = "");
		/// <summary>
		/// Gets the current label used by this instance.
		/// </summary>
		Iced::Intel::Label GetCurrentLabel() const;
		/// <summary>
		/// Use the specified label.
		/// </summary>
		/// <param name="label">Label to use</param>
		/// <exception cref="ArgumentException"></exception>
		void Label(Iced::Intel::Label& label);
		/// <summary>
		/// Creates an anonymous label that can be referenced by using <see cref="B"/> (backward anonymous label)
		/// and <see cref="F"/> (forward anonymous label).
		/// </summary>
		void AnonymousLabel();
		/// <summary>
		/// References the previous anonymous label created by <see cref="AnonymousLabel"/>
		/// </summary>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Label @B
		Iced::Intel::Label B() const;
		/// <summary>
		/// References the next anonymous label created by a future call to <see cref="AnonymousLabel"/>
		/// </summary>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Label @F
		Iced::Intel::Label F();
		/// <summary>
		/// Add an instruction directly to the flow of instructions.
		/// </summary>
		/// <param name="instruction"></param>
		void AddInstruction(Instruction instruction);
		/// <summary>
		/// Add an instruction directly to the flow of instructions.
		/// </summary>
		/// <param name="instruction"></param>
		/// <param name="flags">Operand flags passed.</param>
	private:
		void AddInstruction(Instruction instruction, AssemblerOperandFlags flags);
		/// <summary>
		/// Add lock prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	public:
		//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
		//ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler @lock
		Assembler& lock() ;
		/// <summary>
		/// Add xacquire prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler xacquire
		Assembler& xacquire() ;
		/// <summary>
		/// Add xrelease prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler xrelease
		Assembler& xrelease() ;
		/// <summary>
		/// Add rep prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler rep
		Assembler& rep() ;
		/// <summary>
		/// Add repe/repz prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler repe
		Assembler& repe() ;
		/// <summary>
		/// Add repe/repz prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler repz
		Assembler& repz() ;
		/// <summary>
		/// Add repne/repnz prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler repne
		Assembler& repne() ;
		/// <summary>
		/// Add repne/repnz prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler repnz
		Assembler& repnz() ;
		/// <summary>
		/// Add bnd prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler bnd
		Assembler& bnd() ;
		/// <summary>
		/// Add notrack prefix before the next instruction.
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler notrack
		Assembler& notrack() ;
		/// <summary>
		/// Prefer VEX encoding if the next instruction can be VEX and EVEX encoded
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler vex
		Assembler& vex() ;
		/// <summary>
		/// Prefer EVEX encoding if the next instruction can be VEX and EVEX encoded
		/// </summary>
		/// <returns></returns>
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	  //ORIGINAL LINE: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public Assembler evex
		Assembler& evex() ;
		/// <summary>
		/// Adds data
		/// </summary>
		/// <param name="array">Data</param>
		void db(std::vector<std::uint8_t>& array);
		/// <summary>
		/// Adds data
		/// </summary>
		/// <param name="array">Data</param>
		/// <param name="index">Start index</param>
		/// <param name="length">Length in bytes</param>
		void db(std::vector<std::uint8_t>& array, std::int32_t index, std::int32_t length);
		/// <summary>call selector:offset instruction.</summary>
		void call(std::uint16_t selector, std::uint32_t offset);
		/// <summary>jmp selector:offset instruction.</summary>
		void jmp(std::uint16_t selector, std::uint32_t offset);
		/// <summary>xlatb instruction.</summary>
		void xlatb();
		/// <summary>
		/// Generates multibyte NOP instructions
		/// </summary>
		/// <param name="sizeInBytes">Size in bytes of all nops</param>
		void nop(std::int32_t sizeInBytes);
		/// <summary>
		/// Assembles the instructions of this assembler with the specified options.
		/// </summary>
		/// <param name="writer">The code writer.</param>
		/// <param name="rip">Base address.</param>
		/// <param name="options">Encoding options.</param>
		/// <returns></returns>
		/// <exception cref="InvalidOperationException"></exception>
		AssemblerResult Assemble(CodeWriter* writer, std::uint64_t rip, BlockEncoderOptions options = BlockEncoderOptions::None);
		/// <summary>
		/// Tries to assemble the instructions of this assembler with the specified options.
		/// </summary>
		/// <param name="writer">The code writer.</param>
		/// <param name="rip">Base address.</param>
		/// <param name="errorMessage">Error messages.</param>
		/// <param name="assemblerResult">The assembler result if successful.</param>
		/// <param name="options">Encoding options.</param>
		/// <returns><c>true</c> if the encoding was successful; <c>false</c> otherwise.</returns>
	  //C# TO C++ CONVERTER WARNING: Nullable reference types have no equivalent in C++:
	  //ORIGINAL LINE: public bool TryAssemble(CodeWriter writer, ulong rip, [NotNullWhen(false)] out string? errorMessage, out AssemblerResult assemblerResult, BlockEncoderOptions options = BlockEncoderOptions.None)
	  //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
		bool TryAssemble(CodeWriter* writer, std::uint64_t rip, std::string& errorMessage, AssemblerResult& assemblerResult, BlockEncoderOptions options = BlockEncoderOptions::None);
		/// <summary>
		/// Internal method used to throw an InvalidOperationException if it was not possible to encode an OpCode.
		/// </summary>
		/// <param name="mnemonic">The mnemonic of the instruction</param>
		/// <param name="argNames">The argument values.</param>
		/// <returns></returns>
	private:
		template <typename T>
		void NoOpCodeFoundForBuildInternal(StringBuilder& builder, const T& arg)
		{
			builder.append(to_string(arg));
		}

		template <typename T, typename... Args>
		void NoOpCodeFoundForBuildInternal(StringBuilder& builder, const T& arg, const Args&... argNames)
		{
			builder.append(to_string(arg));
			builder.append(", ");
			NoOpCodeFoundForBuildInternal(builder, argNames...);
		}

		template <typename... Args>
		InvalidOperationException NoOpCodeFoundFor(Mnemonic mnemonic, const Args&... argNames)
		{
			auto builder = StringBuilder();
			//C# TO C++ CONVERTER TODO TASK: There is no C++ equivalent to 'ToString':
			//C# TO C++ CONVERTER TODO TASK: There is no direct C++ equivalent to this .NET String method:
			builder.append(std::format("Unable to calculate an OpCode for `{0:s}", tolower(to_string(mnemonic))));
			//for (std::int32_t i = 0; i < argNames.size(); i++)
			//{
			//	builder.append(i == 0 ? " " : ", ");
			//	builder.append(argNames[i]); // TODO: add pretty print for arguments (registers, memory...)
			//}
			NoOpCodeFoundForBuildInternal(builder, argNames...);
			builder.append(" ");
			builder.append(std::format("`. Combination of arguments and/or current bitness {0:s} is not compatible with any existing OpCode encoding.", std::to_string(GetBitness())));
			return InvalidOperationException(builder.toString());
		}



			/// <summary>aaa instruction.<br/>
			/// <br/>
			/// <c>AAA</c><br/>
			/// <br/>
			/// <c>37</c><br/>
			/// <br/>
			/// <c>8086+</c><br/>
			/// <br/>
			/// <c>16/32-bit</c></summary>
	public:
		void aaa();
		/// <summary>aad instruction.<br/>
		/// <br/>
		/// <c>AAD imm8</c><br/>
		/// <br/>
		/// <c>D5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void aad(std::int8_t imm);
		/// <summary>aad instruction.<br/>
		/// <br/>
		/// <c>AAD imm8</c><br/>
		/// <br/>
		/// <c>D5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void aad(std::uint8_t imm);
		/// <summary>aam instruction.<br/>
		/// <br/>
		/// <c>AAM imm8</c><br/>
		/// <br/>
		/// <c>D4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void aam(std::int8_t imm);
		/// <summary>aam instruction.<br/>
		/// <br/>
		/// <c>AAM imm8</c><br/>
		/// <br/>
		/// <c>D4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void aam(std::uint8_t imm);
		/// <summary>aas instruction.<br/>
		/// <br/>
		/// <c>AAS</c><br/>
		/// <br/>
		/// <c>3F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void aas();
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m8, r8</c><br/>
		/// <br/>
		/// <c>10 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m8, r8</c><br/>
		/// <br/>
		/// <c>10 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 11 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 11 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 11 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 11 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 11 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adc(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 11 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adc(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r8, r/m8</c><br/>
		/// <br/>
		/// <c>12 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 13 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 13 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 13 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AL, imm8</c><br/>
		/// <br/>
		/// <c>14 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 15 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 15 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 15 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /2 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adc(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /2 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AL, imm8</c><br/>
		/// <br/>
		/// <c>14 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 15 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 15 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>adc instruction.<br/>
		/// <br/>
		/// <c>ADC r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /2 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADC r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /2 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adc(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r32, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adcx(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r64, r/m64</c><br/>
		/// <br/>
		/// <c>66 o64 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adcx(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r32, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adcx(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>adcx instruction.<br/>
		/// <br/>
		/// <c>ADCX r64, r/m64</c><br/>
		/// <br/>
		/// <c>66 o64 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adcx(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>00 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>00 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 01 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 01 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 01 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 01 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 01 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void add(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 01 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void add(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r8, r/m8</c><br/>
		/// <br/>
		/// <c>02 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 03 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 03 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 03 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void add(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AL, imm8</c><br/>
		/// <br/>
		/// <c>04 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 05 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 05 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 05 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void add(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AL, imm8</c><br/>
		/// <br/>
		/// <c>04 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 05 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 05 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>add instruction.<br/>
		/// <br/>
		/// <c>ADD r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ADD r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void add(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>addpd instruction.<br/>
		/// <br/>
		/// <c>ADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>addpd instruction.<br/>
		/// <br/>
		/// <c>ADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>addps instruction.<br/>
		/// <br/>
		/// <c>ADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>addps instruction.<br/>
		/// <br/>
		/// <c>ADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>addsd instruction.<br/>
		/// <br/>
		/// <c>ADDSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>addsd instruction.<br/>
		/// <br/>
		/// <c>ADDSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>addss instruction.<br/>
		/// <br/>
		/// <c>ADDSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>addss instruction.<br/>
		/// <br/>
		/// <c>ADDSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 58 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>addsubpd instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>addsubpd instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>addsubps instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>addsubps instruction.<br/>
		/// <br/>
		/// <c>ADDSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F D0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void addsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r32, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adox(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adox(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r32, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void adox(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>adox instruction.<br/>
		/// <br/>
		/// <c>ADOX r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>ADX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void adox(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>aesdec instruction.<br/>
		/// <br/>
		/// <c>AESDEC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DE /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>aesdec instruction.<br/>
		/// <br/>
		/// <c>AESDEC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DE /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdec(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesdec128kl instruction.<br/>
		/// <br/>
		/// <c>AESDEC128KL xmm, m384</c><br/>
		/// <br/>
		/// <c>F3 0F 38 DD !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdec128kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesdec256kl instruction.<br/>
		/// <br/>
		/// <c>AESDEC256KL xmm, m512</c><br/>
		/// <br/>
		/// <c>F3 0F 38 DF !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdec256kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesdeclast instruction.<br/>
		/// <br/>
		/// <c>AESDECLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DF /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>aesdeclast instruction.<br/>
		/// <br/>
		/// <c>AESDECLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DF /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdeclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesdecwide128kl instruction.<br/>
		/// <br/>
		/// <c>AESDECWIDE128KL m384, &lt;XMM0-7&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 D8 !(11):001:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE and WIDE_KL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdecwide128kl(AssemblerMemoryOperand dst);
		/// <summary>aesdecwide256kl instruction.<br/>
		/// <br/>
		/// <c>AESDECWIDE256KL m512, &lt;XMM0-7&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 D8 !(11):011:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE and WIDE_KL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesdecwide256kl(AssemblerMemoryOperand dst);
		/// <summary>aesenc instruction.<br/>
		/// <br/>
		/// <c>AESENC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DC /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>aesenc instruction.<br/>
		/// <br/>
		/// <c>AESENC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DC /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesenc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesenc128kl instruction.<br/>
		/// <br/>
		/// <c>AESENC128KL xmm, m384</c><br/>
		/// <br/>
		/// <c>F3 0F 38 DC !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesenc128kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesenc256kl instruction.<br/>
		/// <br/>
		/// <c>AESENC256KL xmm, m512</c><br/>
		/// <br/>
		/// <c>F3 0F 38 DE !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesenc256kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesenclast instruction.<br/>
		/// <br/>
		/// <c>AESENCLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DD /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>aesenclast instruction.<br/>
		/// <br/>
		/// <c>AESENCLAST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DD /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesenclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aesencwide128kl instruction.<br/>
		/// <br/>
		/// <c>AESENCWIDE128KL m384, &lt;XMM0-7&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 D8 !(11):000:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE and WIDE_KL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesencwide128kl(AssemblerMemoryOperand dst);
		/// <summary>aesencwide256kl instruction.<br/>
		/// <br/>
		/// <c>AESENCWIDE256KL m512, &lt;XMM0-7&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 D8 !(11):010:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE and WIDE_KL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesencwide256kl(AssemblerMemoryOperand dst);
		/// <summary>aesimc instruction.<br/>
		/// <br/>
		/// <c>AESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DB /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>aesimc instruction.<br/>
		/// <br/>
		/// <c>AESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 DB /r</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>aeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>AESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A DF /r ib</c><br/>
		/// <br/>
		/// <c>AES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>altinst instruction.<br/>
		/// <br/>
		/// <c>ALTINST</c><br/>
		/// <br/>
		/// <c>0F 3F</c><br/>
		/// <br/>
		/// <c>Centaur AIS</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void altinst();
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m8, r8</c><br/>
		/// <br/>
		/// <c>20 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m8, r8</c><br/>
		/// <br/>
		/// <c>20 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 21 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 21 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 21 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 21 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 21 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void and_(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 21 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void and_(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r8, r/m8</c><br/>
		/// <br/>
		/// <c>22 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 23 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 23 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 23 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void and_(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AL, imm8</c><br/>
		/// <br/>
		/// <c>24 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 25 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 25 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 25 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /4 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void and_(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /4 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AL, imm8</c><br/>
		/// <br/>
		/// <c>24 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 25 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 25 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>and instruction.<br/>
		/// <br/>
		/// <c>AND r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /4 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /4 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>AND r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void and_(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
		/// <summary>andn instruction.<br/>
		/// <br/>
		/// <c>ANDN r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F2 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
		/// <summary>andnpd instruction.<br/>
		/// <br/>
		/// <c>ANDNPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>andnpd instruction.<br/>
		/// <br/>
		/// <c>ANDNPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andnpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>andnps instruction.<br/>
		/// <br/>
		/// <c>ANDNPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>andnps instruction.<br/>
		/// <br/>
		/// <c>ANDNPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 55 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andnps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>andpd instruction.<br/>
		/// <br/>
		/// <c>ANDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>andpd instruction.<br/>
		/// <br/>
		/// <c>ANDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>andps instruction.<br/>
		/// <br/>
		/// <c>ANDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>andps instruction.<br/>
		/// <br/>
		/// <c>ANDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 54 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void andps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void arpl(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void arpl(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r32/m16, r32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void arpl(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>arpl instruction.<br/>
		/// <br/>
		/// <c>ARPL r32/m16, r32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void arpl(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>bb0_reset instruction.<br/>
		/// <br/>
		/// <c>BB0_RESET</c><br/>
		/// <br/>
		/// <c>0F 3A</c><br/>
		/// <br/>
		/// <c>Cyrix MediaGX, GXm, GXLV, GX1</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bb0_reset();
		/// <summary>bb1_reset instruction.<br/>
		/// <br/>
		/// <c>BB1_RESET</c><br/>
		/// <br/>
		/// <c>0F 3B</c><br/>
		/// <br/>
		/// <c>Cyrix MediaGX, GXm, GXLV, GX1</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bb1_reset();
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>bextr instruction.<br/>
		/// <br/>
		/// <c>BEXTR r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 10 /r id</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcfill(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcfill(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcfill(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blcfill instruction.<br/>
		/// <br/>
		/// <c>BLCFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcfill(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blci(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blci(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blci(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blci instruction.<br/>
		/// <br/>
		/// <c>BLCI r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blci(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcic(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcic(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcic(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blcic instruction.<br/>
		/// <br/>
		/// <c>BLCIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /5</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcic(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcmsk(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcmsk(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blcmsk instruction.<br/>
		/// <br/>
		/// <c>BLCMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 02 /1</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcs(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcs(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blcs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blcs instruction.<br/>
		/// <br/>
		/// <c>BLCS r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /3</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blcs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>blendpd instruction.<br/>
		/// <br/>
		/// <c>BLENDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0D /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>blendps instruction.<br/>
		/// <br/>
		/// <c>BLENDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0C /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>blendvpd instruction.<br/>
		/// <br/>
		/// <c>BLENDVPD xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 15 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>blendvpd instruction.<br/>
		/// <br/>
		/// <c>BLENDVPD xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 15 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendvpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>blendvps instruction.<br/>
		/// <br/>
		/// <c>BLENDVPS xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 14 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>blendvps instruction.<br/>
		/// <br/>
		/// <c>BLENDVPS xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 14 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blendvps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsfill(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsfill(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsfill(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blsfill instruction.<br/>
		/// <br/>
		/// <c>BLSFILL r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /2</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsfill(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsi(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsi(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blsi instruction.<br/>
		/// <br/>
		/// <c>BLSI r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /3</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsic(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsic(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsic(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blsic instruction.<br/>
		/// <br/>
		/// <c>BLSIC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /6</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsic(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsmsk(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsmsk(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blsmsk instruction.<br/>
		/// <br/>
		/// <c>BLSMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /2</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsr(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsr(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void blsr(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>blsr instruction.<br/>
		/// <br/>
		/// <c>BLSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F3 /1</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void blsr(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>bndcl instruction.<br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndcl(AssemblerRegisterBND dst, AssemblerRegister32 src);
		/// <summary>bndcl instruction.<br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bndcl(AssemblerRegisterBND dst, AssemblerRegister64 src);
		/// <summary>bndcl instruction.<br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDCL bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndcl(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
		/// <summary>bndcn instruction.<br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndcn(AssemblerRegisterBND dst, AssemblerRegister32 src);
		/// <summary>bndcn instruction.<br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bndcn(AssemblerRegisterBND dst, AssemblerRegister64 src);
		/// <summary>bndcn instruction.<br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDCN bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndcn(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
		/// <summary>bndcu instruction.<br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndcu(AssemblerRegisterBND dst, AssemblerRegister32 src);
		/// <summary>bndcu instruction.<br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bndcu(AssemblerRegisterBND dst, AssemblerRegister64 src);
		/// <summary>bndcu instruction.<br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDCU bnd, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndcu(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
		/// <summary>bndldx instruction.<br/>
		/// <br/>
		/// <c>BNDLDX bnd, mib</c><br/>
		/// <br/>
		/// <c>NP 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bndldx(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
		/// <summary>bndmk instruction.<br/>
		/// <br/>
		/// <c>BNDMK bnd, m64</c><br/>
		/// <br/>
		/// <c>F3 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMK bnd, m32</c><br/>
		/// <br/>
		/// <c>F3 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndmk(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
		/// <summary>bndmov instruction.<br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndmov(AssemblerRegisterBND dst, AssemblerRegisterBND src);
		/// <summary>bndmov instruction.<br/>
		/// <br/>
		/// <c>BNDMOV bnd1/m128, bnd2</c><br/>
		/// <br/>
		/// <c>66 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMOV bnd1/m64, bnd2</c><br/>
		/// <br/>
		/// <c>66 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndmov(AssemblerMemoryOperand dst, AssemblerRegisterBND src);
		/// <summary>bndmov instruction.<br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BNDMOV bnd1, bnd2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 1A /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bndmov(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
		/// <summary>bndstx instruction.<br/>
		/// <br/>
		/// <c>BNDSTX mib, bnd</c><br/>
		/// <br/>
		/// <c>NP 0F 1B /r</c><br/>
		/// <br/>
		/// <c>MPX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bndstx(AssemblerMemoryOperand dst, AssemblerRegisterBND src);
		/// <summary>bound instruction.<br/>
		/// <br/>
		/// <c>BOUND r16, m16&amp;16</c><br/>
		/// <br/>
		/// <c>o16 62 /r</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bound(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>bound instruction.<br/>
		/// <br/>
		/// <c>BOUND r32, m32&amp;32</c><br/>
		/// <br/>
		/// <c>o32 62 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void bound(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsf(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsf(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F BC /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bsf(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsf(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BC /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsf(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>bsf instruction.<br/>
		/// <br/>
		/// <c>BSF r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F BC /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bsf(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsr(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsr(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F BD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bsr(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsr(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F BD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bsr(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>bsr instruction.<br/>
		/// <br/>
		/// <c>BSR r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F BD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bsr(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>bswap instruction.<br/>
		/// <br/>
		/// <c>BSWAP r16</c><br/>
		/// <br/>
		/// <c>o16 0F C8+rw</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bswap(AssemblerRegister16 dst);
		/// <summary>bswap instruction.<br/>
		/// <br/>
		/// <c>BSWAP r32</c><br/>
		/// <br/>
		/// <c>o32 0F C8+rd</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bswap(AssemblerRegister32 dst);
		/// <summary>bswap instruction.<br/>
		/// <br/>
		/// <c>BSWAP r64</c><br/>
		/// <br/>
		/// <c>o64 0F C8+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bswap(AssemblerRegister64 dst);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F A3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bt(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F A3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bt(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bt(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bt(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>bt instruction.<br/>
		/// <br/>
		/// <c>BT r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BT r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bt(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F BB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F BB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btc(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F BB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btc(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btc(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btc(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>btc instruction.<br/>
		/// <br/>
		/// <c>BTC r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTC r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btc(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B3 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F B3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btr(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F B3 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btr(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btr(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void btr(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>btr instruction.<br/>
		/// <br/>
		/// <c>BTR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void btr(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F AB /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F AB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bts(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F AB /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bts(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bts(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bts(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>bts instruction.<br/>
		/// <br/>
		/// <c>BTS r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>BTS r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F BA /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bts(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bzhi(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void bzhi(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bzhi(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>bzhi instruction.<br/>
		/// <br/>
		/// <c>BZHI r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void bzhi(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void call(AssemblerRegister16 dst);
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void call(AssemblerRegister32 dst);
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void call(AssemblerRegister64 dst);
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL m16:64</c><br/>
		/// <br/>
		/// <c>o64 FF /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL m16:32</c><br/>
		/// <br/>
		/// <c>o32 FF /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CALL r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>CALL m16:16</c><br/>
		/// <br/>
		/// <c>o16 FF /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CALL r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void call(AssemblerMemoryOperand dst);
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>o64 E8 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>o32 E8 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>CALL rel16</c><br/>
		/// <br/>
		/// <c>o16 E8 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void call(Iced::Intel::Label dst);
		/// <summary>call instruction.<br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>o64 E8 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CALL rel32</c><br/>
		/// <br/>
		/// <c>o32 E8 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>CALL rel16</c><br/>
		/// <br/>
		/// <c>o16 E8 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void call(std::uint64_t dst);
		/// <summary>cbw instruction.<br/>
		/// <br/>
		/// <c>CBW</c><br/>
		/// <br/>
		/// <c>o16 98</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cbw();
		/// <summary>ccs_encrypt instruction.<br/>
		/// <br/>
		/// <c>CCS_ENCRYPT</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A7 F0</c><br/>
		/// <br/>
		/// <c>PADLOCK_GMI</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CCS_ENCRYPT</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A7 F0</c><br/>
		/// <br/>
		/// <c>PADLOCK_GMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CCS_ENCRYPT</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A7 F0</c><br/>
		/// <br/>
		/// <c>PADLOCK_GMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void ccs_encrypt();
		/// <summary>ccs_hash instruction.<br/>
		/// <br/>
		/// <c>CCS_HASH</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A6 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_GMI</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CCS_HASH</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A6 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_GMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CCS_HASH</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A6 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_GMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void ccs_hash();
		/// <summary>cdq instruction.<br/>
		/// <br/>
		/// <c>CDQ</c><br/>
		/// <br/>
		/// <c>o32 99</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cdq();
		/// <summary>cdqe instruction.<br/>
		/// <br/>
		/// <c>CDQE</c><br/>
		/// <br/>
		/// <c>o64 98</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cdqe();
		/// <summary>cl1invmb instruction.<br/>
		/// <br/>
		/// <c>CL1INVMB</c><br/>
		/// <br/>
		/// <c>0F 0A</c><br/>
		/// <br/>
		/// <c>CL1INVMB</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void cl1invmb();
		/// <summary>clac instruction.<br/>
		/// <br/>
		/// <c>CLAC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 CA</c><br/>
		/// <br/>
		/// <c>SMAP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clac();
		/// <summary>clc instruction.<br/>
		/// <br/>
		/// <c>CLC</c><br/>
		/// <br/>
		/// <c>F8</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clc();
		/// <summary>cld instruction.<br/>
		/// <br/>
		/// <c>CLD</c><br/>
		/// <br/>
		/// <c>FC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cld();
		/// <summary>cldemote instruction.<br/>
		/// <br/>
		/// <c>CLDEMOTE m8</c><br/>
		/// <br/>
		/// <c>NP 0F 1C /0</c><br/>
		/// <br/>
		/// <c>CLDEMOTE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cldemote(AssemblerMemoryOperand dst);
		/// <summary>clflush instruction.<br/>
		/// <br/>
		/// <c>CLFLUSH m8</c><br/>
		/// <br/>
		/// <c>NP 0F AE /7</c><br/>
		/// <br/>
		/// <c>CLFSH</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clflush(AssemblerMemoryOperand dst);
		/// <summary>clflushopt instruction.<br/>
		/// <br/>
		/// <c>CLFLUSHOPT m8</c><br/>
		/// <br/>
		/// <c>66 0F AE /7</c><br/>
		/// <br/>
		/// <c>CLFLUSHOPT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clflushopt(AssemblerMemoryOperand dst);
		/// <summary>clgi instruction.<br/>
		/// <br/>
		/// <c>CLGI</c><br/>
		/// <br/>
		/// <c>0F 01 DD</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clgi();
		/// <summary>cli instruction.<br/>
		/// <br/>
		/// <c>CLI</c><br/>
		/// <br/>
		/// <c>FA</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cli();
		/// <summary>clrssbsy instruction.<br/>
		/// <br/>
		/// <c>CLRSSBSY m64</c><br/>
		/// <br/>
		/// <c>F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clrssbsy(AssemblerMemoryOperand dst);
		/// <summary>clts instruction.<br/>
		/// <br/>
		/// <c>CLTS</c><br/>
		/// <br/>
		/// <c>0F 06</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clts();
		/// <summary>clui instruction.<br/>
		/// <br/>
		/// <c>CLUI</c><br/>
		/// <br/>
		/// <c>F3 0F 01 EE</c><br/>
		/// <br/>
		/// <c>UINTR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void clui();
		/// <summary>clwb instruction.<br/>
		/// <br/>
		/// <c>CLWB m8</c><br/>
		/// <br/>
		/// <c>66 0F AE /6</c><br/>
		/// <br/>
		/// <c>CLWB</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void clwb(AssemblerMemoryOperand dst);
		/// <summary>clzero instruction.<br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>a64 0F 01 FC</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>a32 0F 01 FC</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>a16 0F 01 FC</c><br/>
		/// <br/>
		/// <c>CLZERO</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void clzero();
		/// <summary>cmc instruction.<br/>
		/// <br/>
		/// <c>CMC</c><br/>
		/// <br/>
		/// <c>F5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmc();
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmova(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmova(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmova(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmova(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmova(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmova instruction.<br/>
		/// <br/>
		/// <c>CMOVA r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmova(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovae(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovae(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovae(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovae(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovae(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovae instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovae(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovb(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovb(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovb(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovb(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovb(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovb instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovb(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovbe(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovbe(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovbe(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovbe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovbe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovbe instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovbe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovc instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovc(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovc instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovc(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovc instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovc(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovc instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovc(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovc instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovc instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmove(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmove(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmove(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmove(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmove(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmove instruction.<br/>
		/// <br/>
		/// <c>CMOVE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmove(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovg(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovg(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovg(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovg(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovg(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovg instruction.<br/>
		/// <br/>
		/// <c>CMOVG r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovg(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovge(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovge(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovge(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovge(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovge(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovge instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovge(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovl(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovl(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovl(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovl(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovl(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovl instruction.<br/>
		/// <br/>
		/// <c>CMOVL r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovl(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovle(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovle(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovle(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovle(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovle(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovle instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovle(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovna instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovna(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovna instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovna(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovna instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovna(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovna instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovna(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovna instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovna(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovna instruction.<br/>
		/// <br/>
		/// <c>CMOVBE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 46 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovna(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnae instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnae(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnae instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnae(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnae instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnae(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnae instruction.<br/>
		/// <br/>
		/// <c>CMOVB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnae(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnae instruction.<br/>
		/// <br/>
		/// <c>CMOVB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnae(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnae instruction.<br/>
		/// <br/>
		/// <c>CMOVB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 42 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnae(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnb instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnb(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnb instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnb(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnb instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnb(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnb instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnb(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnb instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnb(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnb instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnb(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnbe instruction.<br/>
		/// <br/>
		/// <c>CMOVA r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnbe(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnbe instruction.<br/>
		/// <br/>
		/// <c>CMOVA r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnbe(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnbe instruction.<br/>
		/// <br/>
		/// <c>CMOVA r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnbe(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnbe instruction.<br/>
		/// <br/>
		/// <c>CMOVA r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnbe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnbe instruction.<br/>
		/// <br/>
		/// <c>CMOVA r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnbe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnbe instruction.<br/>
		/// <br/>
		/// <c>CMOVA r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 47 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnbe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnc instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnc(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnc instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnc(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnc instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnc(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnc instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnc(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnc instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnc instruction.<br/>
		/// <br/>
		/// <c>CMOVAE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 43 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovne(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovne(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovne(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovne(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovne(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovne instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovne(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovng instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovng(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovng instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovng(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovng instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovng(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovng instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovng(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovng instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovng(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovng instruction.<br/>
		/// <br/>
		/// <c>CMOVLE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4E /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovng(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnge instruction.<br/>
		/// <br/>
		/// <c>CMOVL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnge(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnge instruction.<br/>
		/// <br/>
		/// <c>CMOVL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnge(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnge instruction.<br/>
		/// <br/>
		/// <c>CMOVL r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnge(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnge instruction.<br/>
		/// <br/>
		/// <c>CMOVL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnge(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnge instruction.<br/>
		/// <br/>
		/// <c>CMOVL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnge(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnge instruction.<br/>
		/// <br/>
		/// <c>CMOVL r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4C /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnge(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnl instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnl(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnl instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnl(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnl instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnl(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnl instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnl(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnl instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnl(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnl instruction.<br/>
		/// <br/>
		/// <c>CMOVGE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4D /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnl(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnle instruction.<br/>
		/// <br/>
		/// <c>CMOVG r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnle(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnle instruction.<br/>
		/// <br/>
		/// <c>CMOVG r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnle(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnle instruction.<br/>
		/// <br/>
		/// <c>CMOVG r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnle(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnle instruction.<br/>
		/// <br/>
		/// <c>CMOVG r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnle(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnle instruction.<br/>
		/// <br/>
		/// <c>CMOVG r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnle(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnle instruction.<br/>
		/// <br/>
		/// <c>CMOVG r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4F /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnle(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovno(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovno(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovno(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovno(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovno(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovno instruction.<br/>
		/// <br/>
		/// <c>CMOVNO r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 41 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovno(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnp(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnp(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnp(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnp(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnp(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnp instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnp(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovns(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovns(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovns(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovns(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovns(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovns instruction.<br/>
		/// <br/>
		/// <c>CMOVNS r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 49 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovns(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnz instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnz(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovnz instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnz(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovnz instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnz(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovnz instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnz(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnz instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovnz(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovnz instruction.<br/>
		/// <br/>
		/// <c>CMOVNE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 45 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovnz(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovo(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovo(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovo(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovo(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovo(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovo instruction.<br/>
		/// <br/>
		/// <c>CMOVO r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 40 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovo(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovp(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovp(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovp(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovp(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovp(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovp instruction.<br/>
		/// <br/>
		/// <c>CMOVP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovp(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovpe instruction.<br/>
		/// <br/>
		/// <c>CMOVP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpe(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovpe instruction.<br/>
		/// <br/>
		/// <c>CMOVP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpe(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovpe instruction.<br/>
		/// <br/>
		/// <c>CMOVP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovpe(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovpe instruction.<br/>
		/// <br/>
		/// <c>CMOVP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovpe instruction.<br/>
		/// <br/>
		/// <c>CMOVP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovpe instruction.<br/>
		/// <br/>
		/// <c>CMOVP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4A /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovpe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovpo instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpo(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovpo instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpo(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovpo instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovpo(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovpo instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpo(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovpo instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovpo(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovpo instruction.<br/>
		/// <br/>
		/// <c>CMOVNP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 4B /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovpo(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovs(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovs(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovs(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovs(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovs instruction.<br/>
		/// <br/>
		/// <c>CMOVS r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 48 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmovz instruction.<br/>
		/// <br/>
		/// <c>CMOVE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovz(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmovz instruction.<br/>
		/// <br/>
		/// <c>CMOVE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovz(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmovz instruction.<br/>
		/// <br/>
		/// <c>CMOVE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovz(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmovz instruction.<br/>
		/// <br/>
		/// <c>CMOVE r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovz(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmovz instruction.<br/>
		/// <br/>
		/// <c>CMOVE r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmovz(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmovz instruction.<br/>
		/// <br/>
		/// <c>CMOVE r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 44 /r</c><br/>
		/// <br/>
		/// <c>CMOV</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmovz(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m8, r8</c><br/>
		/// <br/>
		/// <c>38 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m8, r8</c><br/>
		/// <br/>
		/// <c>38 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 39 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 39 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 39 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 39 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 39 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmp(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 39 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmp(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r8, r/m8</c><br/>
		/// <br/>
		/// <c>3A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 3B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 3B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 3B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmp(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AL, imm8</c><br/>
		/// <br/>
		/// <c>3C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 3D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 3D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 3D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /7 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmp(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /7 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AL, imm8</c><br/>
		/// <br/>
		/// <c>3C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 3D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 3D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>cmp instruction.<br/>
		/// <br/>
		/// <c>CMP r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /7 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /7 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CMP r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmp(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>cmpeqpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpeqpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpeqps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpeqps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpeqsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpeqsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpeqss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpeqss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpeqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmplepd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmplepd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmplepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpleps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpleps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmplesd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmplesd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmplesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpless instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpless instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpltpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpltpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpltps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpltps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpltsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpltsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpltss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpltss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpneqpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpneqpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpneqps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpneqps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpneqsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpneqsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpneqss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpneqss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpneqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnlepd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnlepd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnlepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnleps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnleps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnlesd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnlesd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnlesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnless instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnless instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnltpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnltpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnltps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnltps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnltsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnltsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpnltss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpnltss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpnltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpordpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpordpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpordps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpordps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpordsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpordsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpordss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpordss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>cmppd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>cmpps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>cmpsb instruction.<br/>
		/// <br/>
		/// <c>CMPSB</c><br/>
		/// <br/>
		/// <c>A6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsb();
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD</c><br/>
		/// <br/>
		/// <c>o32 A7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsd();
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>cmpsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>cmpsq instruction.<br/>
		/// <br/>
		/// <c>CMPSQ</c><br/>
		/// <br/>
		/// <c>o64 A7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmpsq();
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>cmpss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>cmpsw instruction.<br/>
		/// <br/>
		/// <c>CMPSW</c><br/>
		/// <br/>
		/// <c>o16 A7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpsw();
		/// <summary>cmpunordpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpunordpd instruction.<br/>
		/// <br/>
		/// <c>CMPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpunordps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpunordps instruction.<br/>
		/// <br/>
		/// <c>CMPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpunordsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpunordsd instruction.<br/>
		/// <br/>
		/// <c>CMPSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpunordss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cmpunordss instruction.<br/>
		/// <br/>
		/// <c>CMPSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F C2 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpunordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F B0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F B0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F B1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F B1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmpxchg(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>cmpxchg instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F B1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>cmpxchg16b instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG16B m128</c><br/>
		/// <br/>
		/// <c>o64 0F C7 /1</c><br/>
		/// <br/>
		/// <c>CMPXCHG16B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cmpxchg16b(AssemblerMemoryOperand dst);
		/// <summary>cmpxchg8b instruction.<br/>
		/// <br/>
		/// <c>CMPXCHG8B m64</c><br/>
		/// <br/>
		/// <c>0F C7 /1</c><br/>
		/// <br/>
		/// <c>CX8</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cmpxchg8b(AssemblerMemoryOperand dst);
		/// <summary>comisd instruction.<br/>
		/// <br/>
		/// <c>COMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void comisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>comisd instruction.<br/>
		/// <br/>
		/// <c>COMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void comisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>comiss instruction.<br/>
		/// <br/>
		/// <c>COMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void comiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>comiss instruction.<br/>
		/// <br/>
		/// <c>COMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void comiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cpu_read instruction.<br/>
		/// <br/>
		/// <c>CPU_READ</c><br/>
		/// <br/>
		/// <c>0F 3D</c><br/>
		/// <br/>
		/// <c>Cyrix MediaGX, GXm, GXLV, GX1</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void cpu_read();
		/// <summary>cpu_write instruction.<br/>
		/// <br/>
		/// <c>CPU_WRITE</c><br/>
		/// <br/>
		/// <c>0F 3C</c><br/>
		/// <br/>
		/// <c>Cyrix MediaGX, GXm, GXLV, GX1</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void cpu_write();
		/// <summary>cpuid instruction.<br/>
		/// <br/>
		/// <c>CPUID</c><br/>
		/// <br/>
		/// <c>0F A2</c><br/>
		/// <br/>
		/// <c>CPUID</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cpuid();
		/// <summary>cqo instruction.<br/>
		/// <br/>
		/// <c>CQO</c><br/>
		/// <br/>
		/// <c>o64 99</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cqo();
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m8</c><br/>
		/// <br/>
		/// <c>F2 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void crc32(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r64, r/m8</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void crc32(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void crc32(AssemblerRegister32 dst, AssemblerRegister16 src);
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void crc32(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r64, r/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void crc32(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CRC32 r32, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F2 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>CRC32 r32, r/m8</c><br/>
		/// <br/>
		/// <c>F2 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void crc32(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>crc32 instruction.<br/>
		/// <br/>
		/// <c>CRC32 r64, r/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CRC32 r64, r/m8</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void crc32(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>CVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtpi2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PD xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpi2pd(AssemblerRegisterXMM dst, AssemblerRegisterMM src);
		/// <summary>cvtpi2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PD xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpi2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtpi2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PS xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpi2ps(AssemblerRegisterXMM dst, AssemblerRegisterMM src);
		/// <summary>cvtpi2ps instruction.<br/>
		/// <br/>
		/// <c>CVTPI2PS xmm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtpi2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtps2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtps2pd instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cvtsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSD2SS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsd2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>cvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister64 src);
		/// <summary>cvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CVTSI2SD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F2 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>cvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister64 src);
		/// <summary>cvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>CVTSI2SS xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2A /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtss2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvtss2sd instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtss2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cvtss2si instruction.<br/>
		/// <br/>
		/// <c>CVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 2D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvttpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
		/// <summary>cvttpd2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPD2PI mm, xmm/m128</c><br/>
		/// <br/>
		/// <c>66 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>cvttps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>cvttps2dq instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 5B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>cvttps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
		/// <summary>cvttps2pi instruction.<br/>
		/// <br/>
		/// <c>CVTTPS2PI mm, xmm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cvttsd2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>cvttss2si instruction.<br/>
		/// <br/>
		/// <c>CVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 2C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void cvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>cwd instruction.<br/>
		/// <br/>
		/// <c>CWD</c><br/>
		/// <br/>
		/// <c>o16 99</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cwd();
		/// <summary>cwde instruction.<br/>
		/// <br/>
		/// <c>CWDE</c><br/>
		/// <br/>
		/// <c>o32 98</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void cwde();
		/// <summary>daa instruction.<br/>
		/// <br/>
		/// <c>DAA</c><br/>
		/// <br/>
		/// <c>27</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void daa();
		/// <summary>das instruction.<br/>
		/// <br/>
		/// <c>DAS</c><br/>
		/// <br/>
		/// <c>2F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void das();
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m8</c><br/>
		/// <br/>
		/// <c>FE /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dec(AssemblerRegister8 dst);
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r16</c><br/>
		/// <br/>
		/// <c>o16 48+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void dec(AssemblerRegister16 dst);
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r32</c><br/>
		/// <br/>
		/// <c>o32 48+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void dec(AssemblerRegister32 dst);
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void dec(AssemblerRegister64 dst);
		/// <summary>dec instruction.<br/>
		/// <br/>
		/// <c>DEC r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>DEC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DEC r/m8</c><br/>
		/// <br/>
		/// <c>FE /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dec(AssemblerMemoryOperand dst);
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void div(AssemblerRegister8 dst);
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void div(AssemblerRegister16 dst);
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void div(AssemblerRegister32 dst);
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void div(AssemblerRegister64 dst);
		/// <summary>div instruction.<br/>
		/// <br/>
		/// <c>DIV r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>DIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>DIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void div(AssemblerMemoryOperand dst);
		/// <summary>divpd instruction.<br/>
		/// <br/>
		/// <c>DIVPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>divpd instruction.<br/>
		/// <br/>
		/// <c>DIVPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>divps instruction.<br/>
		/// <br/>
		/// <c>DIVPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>divps instruction.<br/>
		/// <br/>
		/// <c>DIVPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>divsd instruction.<br/>
		/// <br/>
		/// <c>DIVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>divsd instruction.<br/>
		/// <br/>
		/// <c>DIVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>divss instruction.<br/>
		/// <br/>
		/// <c>DIVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>divss instruction.<br/>
		/// <br/>
		/// <c>DIVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void divss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>dmint instruction.<br/>
		/// <br/>
		/// <c>DMINT</c><br/>
		/// <br/>
		/// <c>0F 39</c><br/>
		/// <br/>
		/// <c>AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void dmint();
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>dppd instruction.<br/>
		/// <br/>
		/// <c>DPPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 41 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>dpps instruction.<br/>
		/// <br/>
		/// <c>DPPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 40 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>emms instruction.<br/>
		/// <br/>
		/// <c>EMMS</c><br/>
		/// <br/>
		/// <c>NP 0F 77</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void emms();
		/// <summary>encls instruction.<br/>
		/// <br/>
		/// <c>ENCLS</c><br/>
		/// <br/>
		/// <c>NP 0F 01 CF</c><br/>
		/// <br/>
		/// <c>SGX1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void encls();
		/// <summary>enclu instruction.<br/>
		/// <br/>
		/// <c>ENCLU</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D7</c><br/>
		/// <br/>
		/// <c>SGX1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void enclu();
		/// <summary>enclv instruction.<br/>
		/// <br/>
		/// <c>ENCLV</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C0</c><br/>
		/// <br/>
		/// <c>OSS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void enclv();
		/// <summary>encodekey128 instruction.<br/>
		/// <br/>
		/// <c>ENCODEKEY128 r32, r32, &lt;XMM0-2&gt;, &lt;XMM4-6&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 FA 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void encodekey128(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>encodekey256 instruction.<br/>
		/// <br/>
		/// <c>ENCODEKEY256 r32, r32, &lt;XMM0-6&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 FB 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AESKLE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void encodekey256(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>endbr32 instruction.<br/>
		/// <br/>
		/// <c>ENDBR32</c><br/>
		/// <br/>
		/// <c>F3 0F 1E FB</c><br/>
		/// <br/>
		/// <c>CET_IBT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void endbr32();
		/// <summary>endbr64 instruction.<br/>
		/// <br/>
		/// <c>ENDBR64</c><br/>
		/// <br/>
		/// <c>F3 0F 1E FA</c><br/>
		/// <br/>
		/// <c>CET_IBT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void endbr64();
		/// <summary>enqcmd instruction.<br/>
		/// <br/>
		/// <c>ENQCMD r16, m512</c><br/>
		/// <br/>
		/// <c>a16 F2 0F 38 F8 !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void enqcmd(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>enqcmd instruction.<br/>
		/// <br/>
		/// <c>ENQCMD r32, m512</c><br/>
		/// <br/>
		/// <c>a32 F2 0F 38 F8 !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void enqcmd(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>enqcmd instruction.<br/>
		/// <br/>
		/// <c>ENQCMD r64, m512</c><br/>
		/// <br/>
		/// <c>a64 F2 0F 38 F8 !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void enqcmd(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>enqcmds instruction.<br/>
		/// <br/>
		/// <c>ENQCMDS r16, m512</c><br/>
		/// <br/>
		/// <c>a16 F3 0F 38 F8 !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void enqcmds(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>enqcmds instruction.<br/>
		/// <br/>
		/// <c>ENQCMDS r32, m512</c><br/>
		/// <br/>
		/// <c>a32 F3 0F 38 F8 !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void enqcmds(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>enqcmds instruction.<br/>
		/// <br/>
		/// <c>ENQCMDS r64, m512</c><br/>
		/// <br/>
		/// <c>a64 F3 0F 38 F8 !(11):rrr:bbb</c><br/>
		/// <br/>
		/// <c>ENQCMD</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void enqcmds(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>enter instruction.<br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o64 C8 iw ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o32 C8 iw ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C8 iw ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void enter(std::int16_t imm, std::int8_t imm1);
		/// <summary>enter instruction.<br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o64 C8 iw ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o32 C8 iw ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>ENTER imm16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C8 iw ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void enter(std::uint16_t imm, std::uint8_t imm1);
		/// <summary>erets instruction.<br/>
		/// <br/>
		/// <c>ERETS</c><br/>
		/// <br/>
		/// <c>F2 0F 01 CA</c><br/>
		/// <br/>
		/// <c>FRED</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void erets();
		/// <summary>eretu instruction.<br/>
		/// <br/>
		/// <c>ERETU</c><br/>
		/// <br/>
		/// <c>F3 0F 01 CA</c><br/>
		/// <br/>
		/// <c>FRED</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void eretu();
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>extractps instruction.<br/>
		/// <br/>
		/// <c>EXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 17 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>extrq instruction.<br/>
		/// <br/>
		/// <c>EXTRQ xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>66 0F 79 /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>extrq instruction.<br/>
		/// <br/>
		/// <c>EXTRQ xmm1, imm8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 78 /0 ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extrq(AssemblerRegisterXMM dst, std::int8_t imm, std::int8_t imm1);
		/// <summary>extrq instruction.<br/>
		/// <br/>
		/// <c>EXTRQ xmm1, imm8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 78 /0 ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void extrq(AssemblerRegisterXMM dst, std::uint8_t imm, std::uint8_t imm1);
		/// <summary>f2xm1 instruction.<br/>
		/// <br/>
		/// <c>F2XM1</c><br/>
		/// <br/>
		/// <c>D9 F0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void f2xm1();
		/// <summary>fabs instruction.<br/>
		/// <br/>
		/// <c>FABS</c><br/>
		/// <br/>
		/// <c>D9 E1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fabs();
		/// <summary>fadd instruction.<br/>
		/// <br/>
		/// <c>FADD m64fp</c><br/>
		/// <br/>
		/// <c>DC /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FADD m32fp</c><br/>
		/// <br/>
		/// <c>D8 /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fadd(AssemblerMemoryOperand dst);
		/// <summary>fadd instruction.<br/>
		/// <br/>
		/// <c>FADD ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FADD ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fadd(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>faddp instruction.<br/>
		/// <br/>
		/// <c>FADDP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void faddp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fbld instruction.<br/>
		/// <br/>
		/// <c>FBLD m80bcd</c><br/>
		/// <br/>
		/// <c>DF /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fbld(AssemblerMemoryOperand dst);
		/// <summary>fbstp instruction.<br/>
		/// <br/>
		/// <c>FBSTP m80bcd</c><br/>
		/// <br/>
		/// <c>DF /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fbstp(AssemblerMemoryOperand dst);
		/// <summary>fchs instruction.<br/>
		/// <br/>
		/// <c>FCHS</c><br/>
		/// <br/>
		/// <c>D9 E0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fchs();
		/// <summary>fclex instruction.<br/>
		/// <br/>
		/// <c>FCLEX</c><br/>
		/// <br/>
		/// <c>9B DB E2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fclex();
		/// <summary>fcmovb instruction.<br/>
		/// <br/>
		/// <c>FCMOVB ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA C0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovb(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmovbe instruction.<br/>
		/// <br/>
		/// <c>FCMOVBE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA D0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovbe(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmove instruction.<br/>
		/// <br/>
		/// <c>FCMOVE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA C8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmove(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmovnb instruction.<br/>
		/// <br/>
		/// <c>FCMOVNB ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB C0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovnb(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmovnbe instruction.<br/>
		/// <br/>
		/// <c>FCMOVNBE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB D0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovnbe(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmovne instruction.<br/>
		/// <br/>
		/// <c>FCMOVNE ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB C8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovne(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmovnu instruction.<br/>
		/// <br/>
		/// <c>FCMOVNU ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DB D8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovnu(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcmovu instruction.<br/>
		/// <br/>
		/// <c>FCMOVU ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>DA D8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcmovu(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcom instruction.<br/>
		/// <br/>
		/// <c>FCOM m64fp</c><br/>
		/// <br/>
		/// <c>DC /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FCOM m32fp</c><br/>
		/// <br/>
		/// <c>D8 /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcom(AssemblerMemoryOperand dst);
		/// <summary>fcom instruction.<br/>
		/// <br/>
		/// <c>FCOM ST(i)</c><br/>
		/// <br/>
		/// <c>D8 D0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcom(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcomi instruction.<br/>
		/// <br/>
		/// <c>FCOMI ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DB F0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcomi(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcomip instruction.<br/>
		/// <br/>
		/// <c>FCOMIP ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DF F0+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcomip(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcomp instruction.<br/>
		/// <br/>
		/// <c>FCOMP m64fp</c><br/>
		/// <br/>
		/// <c>DC /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FCOMP m32fp</c><br/>
		/// <br/>
		/// <c>D8 /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcomp(AssemblerMemoryOperand dst);
		/// <summary>fcomp instruction.<br/>
		/// <br/>
		/// <c>FCOMP ST(i)</c><br/>
		/// <br/>
		/// <c>D8 D8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcomp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fcompp instruction.<br/>
		/// <br/>
		/// <c>FCOMPP</c><br/>
		/// <br/>
		/// <c>DE D9</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcompp();
		/// <summary>fcos instruction.<br/>
		/// <br/>
		/// <c>FCOS</c><br/>
		/// <br/>
		/// <c>D9 FF</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fcos();
		/// <summary>fdecstp instruction.<br/>
		/// <br/>
		/// <c>FDECSTP</c><br/>
		/// <br/>
		/// <c>D9 F6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdecstp();
		/// <summary>fdisi instruction.<br/>
		/// <br/>
		/// <c>FDISI</c><br/>
		/// <br/>
		/// <c>9B DB E1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdisi();
		/// <summary>fdiv instruction.<br/>
		/// <br/>
		/// <c>FDIV m64fp</c><br/>
		/// <br/>
		/// <c>DC /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIV m32fp</c><br/>
		/// <br/>
		/// <c>D8 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdiv(AssemblerMemoryOperand dst);
		/// <summary>fdiv instruction.<br/>
		/// <br/>
		/// <c>FDIV ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 F0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIV ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC F8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdiv(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fdivp instruction.<br/>
		/// <br/>
		/// <c>FDIVP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE F8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdivp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fdivr instruction.<br/>
		/// <br/>
		/// <c>FDIVR m64fp</c><br/>
		/// <br/>
		/// <c>DC /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIVR m32fp</c><br/>
		/// <br/>
		/// <c>D8 /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdivr(AssemblerMemoryOperand dst);
		/// <summary>fdivr instruction.<br/>
		/// <br/>
		/// <c>FDIVR ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 F8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FDIVR ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC F0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdivr(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fdivrp instruction.<br/>
		/// <br/>
		/// <c>FDIVRP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE F0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fdivrp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>femms instruction.<br/>
		/// <br/>
		/// <c>FEMMS</c><br/>
		/// <br/>
		/// <c>0F 0E</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void femms();
		/// <summary>feni instruction.<br/>
		/// <br/>
		/// <c>FENI</c><br/>
		/// <br/>
		/// <c>9B DB E0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void feni();
		/// <summary>ffree instruction.<br/>
		/// <br/>
		/// <c>FFREE ST(i)</c><br/>
		/// <br/>
		/// <c>DD C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ffree(AssemblerRegisterST dst);
		/// <summary>ffreep instruction.<br/>
		/// <br/>
		/// <c>FFREEP ST(i)</c><br/>
		/// <br/>
		/// <c>DF C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ffreep(AssemblerRegisterST dst);
		/// <summary>fiadd instruction.<br/>
		/// <br/>
		/// <c>FIADD m32int</c><br/>
		/// <br/>
		/// <c>DA /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIADD m16int</c><br/>
		/// <br/>
		/// <c>DE /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fiadd(AssemblerMemoryOperand dst);
		/// <summary>ficom instruction.<br/>
		/// <br/>
		/// <c>FICOM m32int</c><br/>
		/// <br/>
		/// <c>DA /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FICOM m16int</c><br/>
		/// <br/>
		/// <c>DE /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ficom(AssemblerMemoryOperand dst);
		/// <summary>ficomp instruction.<br/>
		/// <br/>
		/// <c>FICOMP m32int</c><br/>
		/// <br/>
		/// <c>DA /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FICOMP m16int</c><br/>
		/// <br/>
		/// <c>DE /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ficomp(AssemblerMemoryOperand dst);
		/// <summary>fidiv instruction.<br/>
		/// <br/>
		/// <c>FIDIV m32int</c><br/>
		/// <br/>
		/// <c>DA /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIDIV m16int</c><br/>
		/// <br/>
		/// <c>DE /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fidiv(AssemblerMemoryOperand dst);
		/// <summary>fidivr instruction.<br/>
		/// <br/>
		/// <c>FIDIVR m32int</c><br/>
		/// <br/>
		/// <c>DA /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIDIVR m16int</c><br/>
		/// <br/>
		/// <c>DE /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fidivr(AssemblerMemoryOperand dst);
		/// <summary>fild instruction.<br/>
		/// <br/>
		/// <c>FILD m64int</c><br/>
		/// <br/>
		/// <c>DF /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FILD m32int</c><br/>
		/// <br/>
		/// <c>DB /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FILD m16int</c><br/>
		/// <br/>
		/// <c>DF /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fild(AssemblerMemoryOperand dst);
		/// <summary>fimul instruction.<br/>
		/// <br/>
		/// <c>FIMUL m32int</c><br/>
		/// <br/>
		/// <c>DA /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIMUL m16int</c><br/>
		/// <br/>
		/// <c>DE /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fimul(AssemblerMemoryOperand dst);
		/// <summary>fincstp instruction.<br/>
		/// <br/>
		/// <c>FINCSTP</c><br/>
		/// <br/>
		/// <c>D9 F7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fincstp();
		/// <summary>finit instruction.<br/>
		/// <br/>
		/// <c>FINIT</c><br/>
		/// <br/>
		/// <c>9B DB E3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void finit();
		/// <summary>fist instruction.<br/>
		/// <br/>
		/// <c>FIST m32int</c><br/>
		/// <br/>
		/// <c>DB /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FIST m16int</c><br/>
		/// <br/>
		/// <c>DF /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fist(AssemblerMemoryOperand dst);
		/// <summary>fistp instruction.<br/>
		/// <br/>
		/// <c>FISTP m64int</c><br/>
		/// <br/>
		/// <c>DF /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTP m32int</c><br/>
		/// <br/>
		/// <c>DB /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTP m16int</c><br/>
		/// <br/>
		/// <c>DF /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fistp(AssemblerMemoryOperand dst);
		/// <summary>fisttp instruction.<br/>
		/// <br/>
		/// <c>FISTTP m64int</c><br/>
		/// <br/>
		/// <c>DD /1</c><br/>
		/// <br/>
		/// <c>8087+ and SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTTP m32int</c><br/>
		/// <br/>
		/// <c>DB /1</c><br/>
		/// <br/>
		/// <c>8087+ and SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISTTP m16int</c><br/>
		/// <br/>
		/// <c>DF /1</c><br/>
		/// <br/>
		/// <c>8087+ and SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fisttp(AssemblerMemoryOperand dst);
		/// <summary>fisub instruction.<br/>
		/// <br/>
		/// <c>FISUB m32int</c><br/>
		/// <br/>
		/// <c>DA /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISUB m16int</c><br/>
		/// <br/>
		/// <c>DE /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fisub(AssemblerMemoryOperand dst);
		/// <summary>fisubr instruction.<br/>
		/// <br/>
		/// <c>FISUBR m32int</c><br/>
		/// <br/>
		/// <c>DA /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FISUBR m16int</c><br/>
		/// <br/>
		/// <c>DE /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fisubr(AssemblerMemoryOperand dst);
		/// <summary>fld instruction.<br/>
		/// <br/>
		/// <c>FLD ST(i)</c><br/>
		/// <br/>
		/// <c>D9 C0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fld(AssemblerRegisterST dst);
		/// <summary>fld instruction.<br/>
		/// <br/>
		/// <c>FLD m80fp</c><br/>
		/// <br/>
		/// <c>DB /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FLD m64fp</c><br/>
		/// <br/>
		/// <c>DD /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FLD m32fp</c><br/>
		/// <br/>
		/// <c>D9 /0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fld(AssemblerMemoryOperand dst);
		/// <summary>fld1 instruction.<br/>
		/// <br/>
		/// <c>FLD1</c><br/>
		/// <br/>
		/// <c>D9 E8</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fld1();
		/// <summary>fldcw instruction.<br/>
		/// <br/>
		/// <c>FLDCW m2byte</c><br/>
		/// <br/>
		/// <c>D9 /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldcw(AssemblerMemoryOperand dst);
		/// <summary>fldenv instruction.<br/>
		/// <br/>
		/// <c>FLDENV m28byte</c><br/>
		/// <br/>
		/// <c>o32 D9 /4</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FLDENV m14byte</c><br/>
		/// <br/>
		/// <c>o16 D9 /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldenv(AssemblerMemoryOperand dst);
		/// <summary>fldl2e instruction.<br/>
		/// <br/>
		/// <c>FLDL2E</c><br/>
		/// <br/>
		/// <c>D9 EA</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldl2e();
		/// <summary>fldl2t instruction.<br/>
		/// <br/>
		/// <c>FLDL2T</c><br/>
		/// <br/>
		/// <c>D9 E9</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldl2t();
		/// <summary>fldlg2 instruction.<br/>
		/// <br/>
		/// <c>FLDLG2</c><br/>
		/// <br/>
		/// <c>D9 EC</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldlg2();
		/// <summary>fldln2 instruction.<br/>
		/// <br/>
		/// <c>FLDLN2</c><br/>
		/// <br/>
		/// <c>D9 ED</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldln2();
		/// <summary>fldpi instruction.<br/>
		/// <br/>
		/// <c>FLDPI</c><br/>
		/// <br/>
		/// <c>D9 EB</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldpi();
		/// <summary>fldz instruction.<br/>
		/// <br/>
		/// <c>FLDZ</c><br/>
		/// <br/>
		/// <c>D9 EE</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fldz();
		/// <summary>fmul instruction.<br/>
		/// <br/>
		/// <c>FMUL m64fp</c><br/>
		/// <br/>
		/// <c>DC /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FMUL m32fp</c><br/>
		/// <br/>
		/// <c>D8 /1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fmul(AssemblerMemoryOperand dst);
		/// <summary>fmul instruction.<br/>
		/// <br/>
		/// <c>FMUL ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FMUL ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fmul(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fmulp instruction.<br/>
		/// <br/>
		/// <c>FMULP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fmulp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fnclex instruction.<br/>
		/// <br/>
		/// <c>FNCLEX</c><br/>
		/// <br/>
		/// <c>DB E2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnclex();
		/// <summary>fndisi instruction.<br/>
		/// <br/>
		/// <c>FNDISI</c><br/>
		/// <br/>
		/// <c>DB E1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fndisi();
		/// <summary>fneni instruction.<br/>
		/// <br/>
		/// <c>FNENI</c><br/>
		/// <br/>
		/// <c>DB E0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fneni();
		/// <summary>fninit instruction.<br/>
		/// <br/>
		/// <c>FNINIT</c><br/>
		/// <br/>
		/// <c>DB E3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fninit();
		/// <summary>fnop instruction.<br/>
		/// <br/>
		/// <c>FNOP</c><br/>
		/// <br/>
		/// <c>D9 D0</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnop();
		/// <summary>fnsave instruction.<br/>
		/// <br/>
		/// <c>FNSAVE m108byte</c><br/>
		/// <br/>
		/// <c>o32 DD /6</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FNSAVE m94byte</c><br/>
		/// <br/>
		/// <c>o16 DD /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnsave(AssemblerMemoryOperand dst);
		/// <summary>fnsetpm instruction.<br/>
		/// <br/>
		/// <c>FNSETPM</c><br/>
		/// <br/>
		/// <c>DB E4</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnsetpm();
		/// <summary>fnstcw instruction.<br/>
		/// <br/>
		/// <c>FNSTCW m2byte</c><br/>
		/// <br/>
		/// <c>D9 /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnstcw(AssemblerMemoryOperand dst);
		/// <summary>fnstdw instruction.<br/>
		/// <br/>
		/// <c>FNSTDW AX</c><br/>
		/// <br/>
		/// <c>DF E1</c><br/>
		/// <br/>
		/// <c>387 SL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void fnstdw(AssemblerRegister16 dst);
		/// <summary>fnstenv instruction.<br/>
		/// <br/>
		/// <c>FNSTENV m28byte</c><br/>
		/// <br/>
		/// <c>o32 D9 /6</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FNSTENV m14byte</c><br/>
		/// <br/>
		/// <c>o16 D9 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnstenv(AssemblerMemoryOperand dst);
		/// <summary>fnstsg instruction.<br/>
		/// <br/>
		/// <c>FNSTSG AX</c><br/>
		/// <br/>
		/// <c>DF E2</c><br/>
		/// <br/>
		/// <c>387 SL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void fnstsg(AssemblerRegister16 dst);
		/// <summary>fnstsw instruction.<br/>
		/// <br/>
		/// <c>FNSTSW AX</c><br/>
		/// <br/>
		/// <c>DF E0</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnstsw(AssemblerRegister16 dst);
		/// <summary>fnstsw instruction.<br/>
		/// <br/>
		/// <c>FNSTSW m2byte</c><br/>
		/// <br/>
		/// <c>DD /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fnstsw(AssemblerMemoryOperand dst);
		/// <summary>fpatan instruction.<br/>
		/// <br/>
		/// <c>FPATAN</c><br/>
		/// <br/>
		/// <c>D9 F3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fpatan();
		/// <summary>fprem instruction.<br/>
		/// <br/>
		/// <c>FPREM</c><br/>
		/// <br/>
		/// <c>D9 F8</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fprem();
		/// <summary>fprem1 instruction.<br/>
		/// <br/>
		/// <c>FPREM1</c><br/>
		/// <br/>
		/// <c>D9 F5</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fprem1();
		/// <summary>fptan instruction.<br/>
		/// <br/>
		/// <c>FPTAN</c><br/>
		/// <br/>
		/// <c>D9 F2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fptan();
		/// <summary>frndint instruction.<br/>
		/// <br/>
		/// <c>FRNDINT</c><br/>
		/// <br/>
		/// <c>D9 FC</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void frndint();
		/// <summary>frstor instruction.<br/>
		/// <br/>
		/// <c>FRSTOR m108byte</c><br/>
		/// <br/>
		/// <c>o32 DD /4</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FRSTOR m94byte</c><br/>
		/// <br/>
		/// <c>o16 DD /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void frstor(AssemblerMemoryOperand dst);
		/// <summary>frstpm instruction.<br/>
		/// <br/>
		/// <c>FRSTPM</c><br/>
		/// <br/>
		/// <c>DB E5</c><br/>
		/// <br/>
		/// <c>287 XL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void frstpm();
		/// <summary>fsave instruction.<br/>
		/// <br/>
		/// <c>FSAVE m108byte</c><br/>
		/// <br/>
		/// <c>9B o32 DD /6</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSAVE m94byte</c><br/>
		/// <br/>
		/// <c>9B o16 DD /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsave(AssemblerMemoryOperand dst);
		/// <summary>fscale instruction.<br/>
		/// <br/>
		/// <c>FSCALE</c><br/>
		/// <br/>
		/// <c>D9 FD</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fscale();
		/// <summary>fsetpm instruction.<br/>
		/// <br/>
		/// <c>FSETPM</c><br/>
		/// <br/>
		/// <c>9B DB E4</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsetpm();
		/// <summary>fsin instruction.<br/>
		/// <br/>
		/// <c>FSIN</c><br/>
		/// <br/>
		/// <c>D9 FE</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsin();
		/// <summary>fsincos instruction.<br/>
		/// <br/>
		/// <c>FSINCOS</c><br/>
		/// <br/>
		/// <c>D9 FB</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsincos();
		/// <summary>fsqrt instruction.<br/>
		/// <br/>
		/// <c>FSQRT</c><br/>
		/// <br/>
		/// <c>D9 FA</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsqrt();
		/// <summary>fst instruction.<br/>
		/// <br/>
		/// <c>FST ST(i)</c><br/>
		/// <br/>
		/// <c>DD D0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fst(AssemblerRegisterST dst);
		/// <summary>fst instruction.<br/>
		/// <br/>
		/// <c>FST m64fp</c><br/>
		/// <br/>
		/// <c>DD /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FST m32fp</c><br/>
		/// <br/>
		/// <c>D9 /2</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fst(AssemblerMemoryOperand dst);
		/// <summary>fstcw instruction.<br/>
		/// <br/>
		/// <c>FSTCW m2byte</c><br/>
		/// <br/>
		/// <c>9B D9 /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstcw(AssemblerMemoryOperand dst);
		/// <summary>fstdw instruction.<br/>
		/// <br/>
		/// <c>FSTDW AX</c><br/>
		/// <br/>
		/// <c>9B DF E1</c><br/>
		/// <br/>
		/// <c>387 SL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void fstdw(AssemblerRegister16 dst);
		/// <summary>fstenv instruction.<br/>
		/// <br/>
		/// <c>FSTENV m28byte</c><br/>
		/// <br/>
		/// <c>9B o32 D9 /6</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSTENV m14byte</c><br/>
		/// <br/>
		/// <c>9B o16 D9 /6</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstenv(AssemblerMemoryOperand dst);
		/// <summary>fstp instruction.<br/>
		/// <br/>
		/// <c>FSTP ST(i)</c><br/>
		/// <br/>
		/// <c>DD D8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstp(AssemblerRegisterST dst);
		/// <summary>fstp instruction.<br/>
		/// <br/>
		/// <c>FSTP m80fp</c><br/>
		/// <br/>
		/// <c>DB /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSTP m64fp</c><br/>
		/// <br/>
		/// <c>DD /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSTP m32fp</c><br/>
		/// <br/>
		/// <c>D9 /3</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstp(AssemblerMemoryOperand dst);
		/// <summary>fstpnce instruction.<br/>
		/// <br/>
		/// <c>FSTPNCE ST(i)</c><br/>
		/// <br/>
		/// <c>D9 D8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstpnce(AssemblerRegisterST dst);
		/// <summary>fstsg instruction.<br/>
		/// <br/>
		/// <c>FSTSG AX</c><br/>
		/// <br/>
		/// <c>9B DF E2</c><br/>
		/// <br/>
		/// <c>387 SL</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void fstsg(AssemblerRegister16 dst);
		/// <summary>fstsw instruction.<br/>
		/// <br/>
		/// <c>FSTSW AX</c><br/>
		/// <br/>
		/// <c>9B DF E0</c><br/>
		/// <br/>
		/// <c>287+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstsw(AssemblerRegister16 dst);
		/// <summary>fstsw instruction.<br/>
		/// <br/>
		/// <c>FSTSW m2byte</c><br/>
		/// <br/>
		/// <c>9B DD /7</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fstsw(AssemblerMemoryOperand dst);
		/// <summary>fsub instruction.<br/>
		/// <br/>
		/// <c>FSUB m64fp</c><br/>
		/// <br/>
		/// <c>DC /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUB m32fp</c><br/>
		/// <br/>
		/// <c>D8 /4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsub(AssemblerMemoryOperand dst);
		/// <summary>fsub instruction.<br/>
		/// <br/>
		/// <c>FSUB ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUB ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsub(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fsubp instruction.<br/>
		/// <br/>
		/// <c>FSUBP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsubp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fsubr instruction.<br/>
		/// <br/>
		/// <c>FSUBR m64fp</c><br/>
		/// <br/>
		/// <c>DC /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUBR m32fp</c><br/>
		/// <br/>
		/// <c>D8 /5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsubr(AssemblerMemoryOperand dst);
		/// <summary>fsubr instruction.<br/>
		/// <br/>
		/// <c>FSUBR ST(0), ST(i)</c><br/>
		/// <br/>
		/// <c>D8 E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>FSUBR ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DC E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsubr(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fsubrp instruction.<br/>
		/// <br/>
		/// <c>FSUBRP ST(i), ST(0)</c><br/>
		/// <br/>
		/// <c>DE E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fsubrp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>ftst instruction.<br/>
		/// <br/>
		/// <c>FTST</c><br/>
		/// <br/>
		/// <c>D9 E4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ftst();
		/// <summary>fucom instruction.<br/>
		/// <br/>
		/// <c>FUCOM ST(i)</c><br/>
		/// <br/>
		/// <c>DD E0+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fucom(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fucomi instruction.<br/>
		/// <br/>
		/// <c>FUCOMI ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DB E8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fucomi(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fucomip instruction.<br/>
		/// <br/>
		/// <c>FUCOMIP ST, ST(i)</c><br/>
		/// <br/>
		/// <c>DF E8+i</c><br/>
		/// <br/>
		/// <c>8087+ and CMOV</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fucomip(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fucomp instruction.<br/>
		/// <br/>
		/// <c>FUCOMP ST(i)</c><br/>
		/// <br/>
		/// <c>DD E8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fucomp(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fucompp instruction.<br/>
		/// <br/>
		/// <c>FUCOMPP</c><br/>
		/// <br/>
		/// <c>DA E9</c><br/>
		/// <br/>
		/// <c>387+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fucompp();
		/// <summary>fxam instruction.<br/>
		/// <br/>
		/// <c>FXAM</c><br/>
		/// <br/>
		/// <c>D9 E5</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fxam();
		/// <summary>fxch instruction.<br/>
		/// <br/>
		/// <c>FXCH ST(i)</c><br/>
		/// <br/>
		/// <c>D9 C8+i</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fxch(AssemblerRegisterST dst, AssemblerRegisterST src);
		/// <summary>fxrstor instruction.<br/>
		/// <br/>
		/// <c>FXRSTOR m512byte</c><br/>
		/// <br/>
		/// <c>NP 0F AE /1</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fxrstor(AssemblerMemoryOperand dst);
		/// <summary>fxrstor64 instruction.<br/>
		/// <br/>
		/// <c>FXRSTOR64 m512byte</c><br/>
		/// <br/>
		/// <c>NP o64 0F AE /1</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void fxrstor64(AssemblerMemoryOperand dst);
		/// <summary>fxsave instruction.<br/>
		/// <br/>
		/// <c>FXSAVE m512byte</c><br/>
		/// <br/>
		/// <c>NP 0F AE /0</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fxsave(AssemblerMemoryOperand dst);
		/// <summary>fxsave64 instruction.<br/>
		/// <br/>
		/// <c>FXSAVE64 m512byte</c><br/>
		/// <br/>
		/// <c>NP o64 0F AE /0</c><br/>
		/// <br/>
		/// <c>FXSR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void fxsave64(AssemblerMemoryOperand dst);
		/// <summary>fxtract instruction.<br/>
		/// <br/>
		/// <c>FXTRACT</c><br/>
		/// <br/>
		/// <c>D9 F4</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fxtract();
		/// <summary>fyl2x instruction.<br/>
		/// <br/>
		/// <c>FYL2X</c><br/>
		/// <br/>
		/// <c>D9 F1</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fyl2x();
		/// <summary>fyl2xp1 instruction.<br/>
		/// <br/>
		/// <c>FYL2XP1</c><br/>
		/// <br/>
		/// <c>D9 F9</c><br/>
		/// <br/>
		/// <c>8087+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void fyl2xp1();
		/// <summary>getsec instruction.<br/>
		/// <br/>
		/// <c>GETSEC</c><br/>
		/// <br/>
		/// <c>NP 0F 37</c><br/>
		/// <br/>
		/// <c>SMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void getsec();
		/// <summary>getsecq instruction.<br/>
		/// <br/>
		/// <c>GETSECQ</c><br/>
		/// <br/>
		/// <c>NP o64 0F 37</c><br/>
		/// <br/>
		/// <c>SMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void getsecq();
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>gf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CF /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>gf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>GF2P8AFFINEQB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A CE /r ib</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>gf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>GF2P8MULB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 CF /r</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>gf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>GF2P8MULB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 CF /r</c><br/>
		/// <br/>
		/// <c>GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void gf2p8mulb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>haddpd instruction.<br/>
		/// <br/>
		/// <c>HADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void haddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>haddpd instruction.<br/>
		/// <br/>
		/// <c>HADDPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void haddpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>haddps instruction.<br/>
		/// <br/>
		/// <c>HADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void haddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>haddps instruction.<br/>
		/// <br/>
		/// <c>HADDPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7C /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void haddps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>hlt instruction.<br/>
		/// <br/>
		/// <c>HLT</c><br/>
		/// <br/>
		/// <c>F4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hlt();
		/// <summary>hreset instruction.<br/>
		/// <br/>
		/// <c>HRESET imm8, &lt;EAX&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 3A F0 C0 ib</c><br/>
		/// <br/>
		/// <c>HRESET</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hreset(std::int8_t imm);
		/// <summary>hreset instruction.<br/>
		/// <br/>
		/// <c>HRESET imm8, &lt;EAX&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 3A F0 C0 ib</c><br/>
		/// <br/>
		/// <c>HRESET</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hreset(std::uint8_t imm);
		/// <summary>hsubpd instruction.<br/>
		/// <br/>
		/// <c>HSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>hsubpd instruction.<br/>
		/// <br/>
		/// <c>HSUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>hsubps instruction.<br/>
		/// <br/>
		/// <c>HSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>hsubps instruction.<br/>
		/// <br/>
		/// <c>HSUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F2 0F 7D /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void hsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void ibts(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void ibts(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void ibts(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>ibts instruction.<br/>
		/// <br/>
		/// <c>IBTS r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F A7 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void ibts(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void idiv(AssemblerRegister8 dst);
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void idiv(AssemblerRegister16 dst);
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void idiv(AssemblerRegister32 dst);
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void idiv(AssemblerRegister64 dst);
		/// <summary>idiv instruction.<br/>
		/// <br/>
		/// <c>IDIV r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IDIV r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IDIV r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IDIV r/m8</c><br/>
		/// <br/>
		/// <c>F6 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void idiv(AssemblerMemoryOperand dst);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister8 dst);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void imul(AssemblerRegister64 dst);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerMemoryOperand dst);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F AF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void imul(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F AF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F AF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void imul(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst, AssemblerRegister16 src1, std::int16_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 69 /r id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 6B /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void imul(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int32_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, std::int16_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 69 /r id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 6B /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void imul(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst, AssemblerRegister16 src1, std::uint16_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 69 /r iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r16, r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 6B /r ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, std::uint16_t imm);
		/// <summary>imul instruction.<br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 69 /r id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>IMUL r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 6B /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AL, DX</c><br/>
		/// <br/>
		/// <c>EC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister8 dst, AssemblerRegister16 src);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AX, DX</c><br/>
		/// <br/>
		/// <c>o16 ED</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN EAX, DX</c><br/>
		/// <br/>
		/// <c>o32 ED</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister32 dst, AssemblerRegister16 src);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AL, imm8</c><br/>
		/// <br/>
		/// <c>E4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AX, imm8</c><br/>
		/// <br/>
		/// <c>o16 E5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN EAX, imm8</c><br/>
		/// <br/>
		/// <c>o32 E5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AL, imm8</c><br/>
		/// <br/>
		/// <c>E4 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN AX, imm8</c><br/>
		/// <br/>
		/// <c>o16 E5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>in instruction.<br/>
		/// <br/>
		/// <c>IN EAX, imm8</c><br/>
		/// <br/>
		/// <c>o32 E5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void in(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m8</c><br/>
		/// <br/>
		/// <c>FE /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void inc(AssemblerRegister8 dst);
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r16</c><br/>
		/// <br/>
		/// <c>o16 40+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void inc(AssemblerRegister16 dst);
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r32</c><br/>
		/// <br/>
		/// <c>o32 40+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void inc(AssemblerRegister32 dst);
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void inc(AssemblerRegister64 dst);
		/// <summary>inc instruction.<br/>
		/// <br/>
		/// <c>INC r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>INC r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INC r/m8</c><br/>
		/// <br/>
		/// <c>FE /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void inc(AssemblerMemoryOperand dst);
		/// <summary>incsspd instruction.<br/>
		/// <br/>
		/// <c>INCSSPD r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /5</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void incsspd(AssemblerRegister32 dst);
		/// <summary>incsspq instruction.<br/>
		/// <br/>
		/// <c>INCSSPQ r64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /5</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void incsspq(AssemblerRegister64 dst);
		/// <summary>insb instruction.<br/>
		/// <br/>
		/// <c>INSB</c><br/>
		/// <br/>
		/// <c>6C</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insb();
		/// <summary>insd instruction.<br/>
		/// <br/>
		/// <c>INSD</c><br/>
		/// <br/>
		/// <c>o32 6D</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insd();
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>insertps instruction.<br/>
		/// <br/>
		/// <c>INSERTPS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 21 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>insertq instruction.<br/>
		/// <br/>
		/// <c>INSERTQ xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>F2 0F 79 /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>insertq instruction.<br/>
		/// <br/>
		/// <c>INSERTQ xmm1, xmm2, imm8, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 78 /r ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm, std::int8_t imm1);
		/// <summary>insertq instruction.<br/>
		/// <br/>
		/// <c>INSERTQ xmm1, xmm2, imm8, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 78 /r ib ib</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm, std::uint8_t imm1);
		/// <summary>insw instruction.<br/>
		/// <br/>
		/// <c>INSW</c><br/>
		/// <br/>
		/// <c>o16 6D</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void insw();
		/// <summary>int instruction.<br/>
		/// <br/>
		/// <c>INT imm8</c><br/>
		/// <br/>
		/// <c>CD ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void int_(std::int8_t imm);
		/// <summary>int instruction.<br/>
		/// <br/>
		/// <c>INT imm8</c><br/>
		/// <br/>
		/// <c>CD ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void int_(std::uint8_t imm);
		/// <summary>int1 instruction.<br/>
		/// <br/>
		/// <c>INT1</c><br/>
		/// <br/>
		/// <c>F1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void int1();
		/// <summary>int3 instruction.<br/>
		/// <br/>
		/// <c>INT3</c><br/>
		/// <br/>
		/// <c>CC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void int3();
		/// <summary>into instruction.<br/>
		/// <br/>
		/// <c>INTO</c><br/>
		/// <br/>
		/// <c>CE</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void into();
		/// <summary>invd instruction.<br/>
		/// <br/>
		/// <c>INVD</c><br/>
		/// <br/>
		/// <c>0F 08</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void invd();
		/// <summary>invept instruction.<br/>
		/// <br/>
		/// <c>INVEPT r32, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 80 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 20]</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void invept(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>invept instruction.<br/>
		/// <br/>
		/// <c>INVEPT r64, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 80 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 20]</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void invept(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>invlpg instruction.<br/>
		/// <br/>
		/// <c>INVLPG m</c><br/>
		/// <br/>
		/// <c>0F 01 /7</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void invlpg(AssemblerMemoryOperand dst);
		/// <summary>invlpga instruction.<br/>
		/// <br/>
		/// <c>INVLPGA</c><br/>
		/// <br/>
		/// <c>a64 0F 01 DF</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGA</c><br/>
		/// <br/>
		/// <c>a32 0F 01 DF</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGA</c><br/>
		/// <br/>
		/// <c>a16 0F 01 DF</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void invlpga();
		/// <summary>invlpgb instruction.<br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>a64 NP 0F 01 FE</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>a32 NP 0F 01 FE</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>a16 NP 0F 01 FE</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void invlpgb();
		/// <summary>invpcid instruction.<br/>
		/// <br/>
		/// <c>INVPCID r32, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 82 /r</c><br/>
		/// <br/>
		/// <c>INVPCID</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void invpcid(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>invpcid instruction.<br/>
		/// <br/>
		/// <c>INVPCID r64, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 82 /r</c><br/>
		/// <br/>
		/// <c>INVPCID</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void invpcid(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>invvpid instruction.<br/>
		/// <br/>
		/// <c>INVVPID r32, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 81 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 32]</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void invvpid(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>invvpid instruction.<br/>
		/// <br/>
		/// <c>INVVPID r64, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 81 /r</c><br/>
		/// <br/>
		/// <c>VMX and IA32_VMX_EPT_VPID_CAP[bit 32]</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void invvpid(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>iret instruction.<br/>
		/// <br/>
		/// <c>IRET</c><br/>
		/// <br/>
		/// <c>o16 CF</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void iret();
		/// <summary>iretd instruction.<br/>
		/// <br/>
		/// <c>IRETD</c><br/>
		/// <br/>
		/// <c>o32 CF</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void iretd();
		/// <summary>iretq instruction.<br/>
		/// <br/>
		/// <c>IRETQ</c><br/>
		/// <br/>
		/// <c>o64 CF</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void iretq();
		/// <summary>ja instruction.<br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o64 77 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 87 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o32 77 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 87 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o16 77 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JA rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 87 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ja(Iced::Intel::Label dst);
		/// <summary>ja instruction.<br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o64 77 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 87 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o32 77 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 87 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o16 77 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JA rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 87 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ja(std::uint64_t dst);
		/// <summary>jae instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o64 73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jae(Iced::Intel::Label dst);
		/// <summary>jae instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o64 73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jae(std::uint64_t dst);
		/// <summary>jb instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o64 72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jb(Iced::Intel::Label dst);
		/// <summary>jb instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o64 72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jb(std::uint64_t dst);
		/// <summary>jbe instruction.<br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o64 76 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 86 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o32 76 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 86 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o16 76 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 86 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jbe(Iced::Intel::Label dst);
		/// <summary>jbe instruction.<br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o64 76 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 86 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o32 76 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 86 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o16 76 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 86 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jbe(std::uint64_t dst);
		/// <summary>jc instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o64 72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jc(Iced::Intel::Label dst);
		/// <summary>jc instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o64 72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jc(std::uint64_t dst);
		/// <summary>jcxz instruction.<br/>
		/// <br/>
		/// <c>JCXZ rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E3 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jcxz(Iced::Intel::Label dst);
		/// <summary>jcxz instruction.<br/>
		/// <br/>
		/// <c>JCXZ rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E3 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jcxz(std::uint64_t dst);
		/// <summary>je instruction.<br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o64 74 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 84 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o32 74 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 84 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o16 74 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 84 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void je(Iced::Intel::Label dst);
		/// <summary>je instruction.<br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o64 74 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 84 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o32 74 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 84 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o16 74 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 84 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void je(std::uint64_t dst);
		/// <summary>jecxz instruction.<br/>
		/// <br/>
		/// <c>JECXZ rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E3 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jecxz(Iced::Intel::Label dst);
		/// <summary>jecxz instruction.<br/>
		/// <br/>
		/// <c>JECXZ rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E3 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jecxz(std::uint64_t dst);
		/// <summary>jg instruction.<br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o64 7F cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8F cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o32 7F cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8F cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o16 7F cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JG rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8F cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jg(Iced::Intel::Label dst);
		/// <summary>jg instruction.<br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o64 7F cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8F cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o32 7F cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8F cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o16 7F cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JG rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8F cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jg(std::uint64_t dst);
		/// <summary>jge instruction.<br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o64 7D cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8D cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o32 7D cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8D cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o16 7D cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8D cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jge(Iced::Intel::Label dst);
		/// <summary>jge instruction.<br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o64 7D cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8D cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o32 7D cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8D cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o16 7D cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8D cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jge(std::uint64_t dst);
		/// <summary>jl instruction.<br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o64 7C cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8C cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o32 7C cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8C cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o16 7C cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JL rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8C cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jl(Iced::Intel::Label dst);
		/// <summary>jl instruction.<br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o64 7C cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8C cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o32 7C cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8C cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o16 7C cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JL rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8C cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jl(std::uint64_t dst);
		/// <summary>jle instruction.<br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o64 7E cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8E cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o32 7E cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8E cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o16 7E cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8E cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jle(Iced::Intel::Label dst);
		/// <summary>jle instruction.<br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o64 7E cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8E cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o32 7E cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8E cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o16 7E cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8E cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jle(std::uint64_t dst);
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jmp(AssemblerRegister16 dst);
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jmp(AssemblerRegister32 dst);
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void jmp(AssemblerRegister64 dst);
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP m16:64</c><br/>
		/// <br/>
		/// <c>o64 FF /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP m16:32</c><br/>
		/// <br/>
		/// <c>o32 FF /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP m16:16</c><br/>
		/// <br/>
		/// <c>o16 FF /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jmp(AssemblerMemoryOperand dst);
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>o64 E9 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o64 EB cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>o32 E9 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o32 EB cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel16</c><br/>
		/// <br/>
		/// <c>o16 E9 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o16 EB cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jmp(Iced::Intel::Label dst);
		/// <summary>jmp instruction.<br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>o64 E9 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o64 EB cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel32</c><br/>
		/// <br/>
		/// <c>o32 E9 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o32 EB cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMP rel16</c><br/>
		/// <br/>
		/// <c>o16 E9 cw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JMP rel8</c><br/>
		/// <br/>
		/// <c>o16 EB cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jmp(std::uint64_t dst);
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jmpe(AssemblerRegister16 dst);
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jmpe(AssemblerRegister32 dst);
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMPE r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /6</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jmpe(AssemblerMemoryOperand dst);
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE disp32</c><br/>
		/// <br/>
		/// <c>o32 0F B8 cd</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMPE disp16</c><br/>
		/// <br/>
		/// <c>o16 0F B8 cw</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jmpe(Iced::Intel::Label dst);
		/// <summary>jmpe instruction.<br/>
		/// <br/>
		/// <c>JMPE disp32</c><br/>
		/// <br/>
		/// <c>o32 0F B8 cd</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JMPE disp16</c><br/>
		/// <br/>
		/// <c>o16 0F B8 cw</c><br/>
		/// <br/>
		/// <c>IA-64</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void jmpe(std::uint64_t dst);
		/// <summary>jna instruction.<br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o64 76 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 86 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o32 76 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 86 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o16 76 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 86 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jna(Iced::Intel::Label dst);
		/// <summary>jna instruction.<br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o64 76 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 86 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o32 76 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 86 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JBE rel8</c><br/>
		/// <br/>
		/// <c>o16 76 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JBE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 86 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jna(std::uint64_t dst);
		/// <summary>jnae instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o64 72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnae(Iced::Intel::Label dst);
		/// <summary>jnae instruction.<br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o64 72 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 82 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o32 72 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 82 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JB rel8</c><br/>
		/// <br/>
		/// <c>o16 72 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JB rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 82 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnae(std::uint64_t dst);
		/// <summary>jnb instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o64 73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnb(Iced::Intel::Label dst);
		/// <summary>jnb instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o64 73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnb(std::uint64_t dst);
		/// <summary>jnbe instruction.<br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o64 77 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 87 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o32 77 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 87 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o16 77 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JA rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 87 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnbe(Iced::Intel::Label dst);
		/// <summary>jnbe instruction.<br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o64 77 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 87 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o32 77 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 87 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JA rel8</c><br/>
		/// <br/>
		/// <c>o16 77 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JA rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 87 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnbe(std::uint64_t dst);
		/// <summary>jnc instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o64 73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnc(Iced::Intel::Label dst);
		/// <summary>jnc instruction.<br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o64 73 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 83 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o32 73 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 83 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JAE rel8</c><br/>
		/// <br/>
		/// <c>o16 73 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JAE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 83 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnc(std::uint64_t dst);
		/// <summary>jne instruction.<br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o64 75 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 85 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o32 75 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 85 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o16 75 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 85 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jne(Iced::Intel::Label dst);
		/// <summary>jne instruction.<br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o64 75 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 85 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o32 75 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 85 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o16 75 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 85 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jne(std::uint64_t dst);
		/// <summary>jng instruction.<br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o64 7E cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8E cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o32 7E cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8E cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o16 7E cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8E cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jng(Iced::Intel::Label dst);
		/// <summary>jng instruction.<br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o64 7E cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8E cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o32 7E cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8E cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JLE rel8</c><br/>
		/// <br/>
		/// <c>o16 7E cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JLE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8E cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jng(std::uint64_t dst);
		/// <summary>jnge instruction.<br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o64 7C cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8C cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o32 7C cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8C cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o16 7C cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JL rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8C cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnge(Iced::Intel::Label dst);
		/// <summary>jnge instruction.<br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o64 7C cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8C cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o32 7C cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8C cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JL rel8</c><br/>
		/// <br/>
		/// <c>o16 7C cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JL rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8C cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnge(std::uint64_t dst);
		/// <summary>jnl instruction.<br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o64 7D cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8D cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o32 7D cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8D cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o16 7D cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8D cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnl(Iced::Intel::Label dst);
		/// <summary>jnl instruction.<br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o64 7D cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8D cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o32 7D cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8D cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JGE rel8</c><br/>
		/// <br/>
		/// <c>o16 7D cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JGE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8D cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnl(std::uint64_t dst);
		/// <summary>jnle instruction.<br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o64 7F cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8F cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o32 7F cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8F cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o16 7F cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JG rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8F cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnle(Iced::Intel::Label dst);
		/// <summary>jnle instruction.<br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o64 7F cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8F cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o32 7F cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8F cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JG rel8</c><br/>
		/// <br/>
		/// <c>o16 7F cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JG rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8F cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnle(std::uint64_t dst);
		/// <summary>jno instruction.<br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o64 71 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 81 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o32 71 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 81 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o16 71 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 81 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jno(Iced::Intel::Label dst);
		/// <summary>jno instruction.<br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o64 71 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 81 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o32 71 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 81 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNO rel8</c><br/>
		/// <br/>
		/// <c>o16 71 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 81 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jno(std::uint64_t dst);
		/// <summary>jnp instruction.<br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o64 7B cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8B cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o32 7B cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8B cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o16 7B cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8B cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnp(Iced::Intel::Label dst);
		/// <summary>jnp instruction.<br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o64 7B cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8B cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o32 7B cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8B cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o16 7B cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8B cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnp(std::uint64_t dst);
		/// <summary>jns instruction.<br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o64 79 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 89 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o32 79 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 89 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o16 79 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 89 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jns(Iced::Intel::Label dst);
		/// <summary>jns instruction.<br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o64 79 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 89 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o32 79 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 89 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNS rel8</c><br/>
		/// <br/>
		/// <c>o16 79 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 89 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jns(std::uint64_t dst);
		/// <summary>jnz instruction.<br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o64 75 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 85 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o32 75 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 85 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o16 75 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 85 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnz(Iced::Intel::Label dst);
		/// <summary>jnz instruction.<br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o64 75 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 85 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o32 75 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 85 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNE rel8</c><br/>
		/// <br/>
		/// <c>o16 75 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 85 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jnz(std::uint64_t dst);
		/// <summary>jo instruction.<br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o64 70 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 80 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o32 70 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 80 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o16 70 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 80 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jo(Iced::Intel::Label dst);
		/// <summary>jo instruction.<br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o64 70 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 80 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o32 70 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 80 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JO rel8</c><br/>
		/// <br/>
		/// <c>o16 70 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JO rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 80 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jo(std::uint64_t dst);
		/// <summary>jp instruction.<br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o64 7A cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8A cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o32 7A cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8A cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o16 7A cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8A cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jp(Iced::Intel::Label dst);
		/// <summary>jp instruction.<br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o64 7A cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8A cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o32 7A cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8A cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o16 7A cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8A cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jp(std::uint64_t dst);
		/// <summary>jpe instruction.<br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o64 7A cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8A cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o32 7A cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8A cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o16 7A cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8A cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jpe(Iced::Intel::Label dst);
		/// <summary>jpe instruction.<br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o64 7A cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8A cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o32 7A cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8A cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JP rel8</c><br/>
		/// <br/>
		/// <c>o16 7A cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8A cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jpe(std::uint64_t dst);
		/// <summary>jpo instruction.<br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o64 7B cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8B cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o32 7B cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8B cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o16 7B cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8B cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jpo(Iced::Intel::Label dst);
		/// <summary>jpo instruction.<br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o64 7B cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 8B cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o32 7B cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 8B cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JNP rel8</c><br/>
		/// <br/>
		/// <c>o16 7B cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JNP rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 8B cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jpo(std::uint64_t dst);
		/// <summary>jrcxz instruction.<br/>
		/// <br/>
		/// <c>JRCXZ rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E3 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void jrcxz(Iced::Intel::Label dst);
		/// <summary>jrcxz instruction.<br/>
		/// <br/>
		/// <c>JRCXZ rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E3 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void jrcxz(std::uint64_t dst);
		/// <summary>js instruction.<br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o64 78 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 88 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o32 78 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 88 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o16 78 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 88 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void js(Iced::Intel::Label dst);
		/// <summary>js instruction.<br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o64 78 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 88 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o32 78 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 88 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JS rel8</c><br/>
		/// <br/>
		/// <c>o16 78 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JS rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 88 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void js(std::uint64_t dst);
		/// <summary>jz instruction.<br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o64 74 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 84 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o32 74 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 84 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o16 74 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 84 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jz(Iced::Intel::Label dst);
		/// <summary>jz instruction.<br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o64 74 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o64 0F 84 cd</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o32 74 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel32</c><br/>
		/// <br/>
		/// <c>o32 0F 84 cd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>JE rel8</c><br/>
		/// <br/>
		/// <c>o16 74 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>JE rel16</c><br/>
		/// <br/>
		/// <c>o16 0F 84 cw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void jz(std::uint64_t dst);
		/// <summary>kaddb instruction.<br/>
		/// <br/>
		/// <c>KADDB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kaddb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kaddd instruction.<br/>
		/// <br/>
		/// <c>KADDD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kaddd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kaddq instruction.<br/>
		/// <br/>
		/// <c>KADDQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kaddq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kaddw instruction.<br/>
		/// <br/>
		/// <c>KADDW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 4A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kaddw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandb instruction.<br/>
		/// <br/>
		/// <c>KANDB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandd instruction.<br/>
		/// <br/>
		/// <c>KANDD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandnb instruction.<br/>
		/// <br/>
		/// <c>KANDNB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandnb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandnd instruction.<br/>
		/// <br/>
		/// <c>KANDND k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandnd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandnq instruction.<br/>
		/// <br/>
		/// <c>KANDNQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandnq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandnw instruction.<br/>
		/// <br/>
		/// <c>KANDNW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandnw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandq instruction.<br/>
		/// <br/>
		/// <c>KANDQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kandw instruction.<br/>
		/// <br/>
		/// <c>KANDW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 41 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kandw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB k1, r32</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovb(AssemblerRegisterK dst, AssemblerRegister32 src);
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB r32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovb(AssemblerRegister32 dst, AssemblerRegisterK src);
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB k1, k2/m8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovb(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB m8, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovb(AssemblerMemoryOperand dst, AssemblerRegisterK src);
		/// <summary>kmovb instruction.<br/>
		/// <br/>
		/// <c>KMOVB k1, k2/m8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovb(AssemblerRegisterK dst, AssemblerMemoryOperand src);
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD k1, r32</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovd(AssemblerRegisterK dst, AssemblerRegister32 src);
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD r32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovd(AssemblerRegister32 dst, AssemblerRegisterK src);
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD k1, k2/m32</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovd(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD m32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovd(AssemblerMemoryOperand dst, AssemblerRegisterK src);
		/// <summary>kmovd instruction.<br/>
		/// <br/>
		/// <c>KMOVD k1, k2/m32</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovd(AssemblerRegisterK dst, AssemblerMemoryOperand src);
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ k1, r64</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W1 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void kmovq(AssemblerRegisterK dst, AssemblerRegister64 src);
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ r64, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.F2.0F.W1 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void kmovq(AssemblerRegister64 dst, AssemblerRegisterK src);
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ k1, k2/m64</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovq(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ m64, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovq(AssemblerMemoryOperand dst, AssemblerRegisterK src);
		/// <summary>kmovq instruction.<br/>
		/// <br/>
		/// <c>KMOVQ k1, k2/m64</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovq(AssemblerRegisterK dst, AssemblerMemoryOperand src);
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW k1, r32</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovw(AssemblerRegisterK dst, AssemblerRegister32 src);
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW r32, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovw(AssemblerRegister32 dst, AssemblerRegisterK src);
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW k1, k2/m16</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovw(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW m16, k1</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovw(AssemblerMemoryOperand dst, AssemblerRegisterK src);
		/// <summary>kmovw instruction.<br/>
		/// <br/>
		/// <c>KMOVW k1, k2/m16</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kmovw(AssemblerRegisterK dst, AssemblerMemoryOperand src);
		/// <summary>knotb instruction.<br/>
		/// <br/>
		/// <c>KNOTB k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void knotb(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>knotd instruction.<br/>
		/// <br/>
		/// <c>KNOTD k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void knotd(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>knotq instruction.<br/>
		/// <br/>
		/// <c>KNOTQ k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void knotq(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>knotw instruction.<br/>
		/// <br/>
		/// <c>KNOTW k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void knotw(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>korb instruction.<br/>
		/// <br/>
		/// <c>KORB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void korb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kord instruction.<br/>
		/// <br/>
		/// <c>KORD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>korq instruction.<br/>
		/// <br/>
		/// <c>KORQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void korq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kortestb instruction.<br/>
		/// <br/>
		/// <c>KORTESTB k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kortestb(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kortestd instruction.<br/>
		/// <br/>
		/// <c>KORTESTD k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kortestd(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kortestq instruction.<br/>
		/// <br/>
		/// <c>KORTESTQ k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kortestq(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kortestw instruction.<br/>
		/// <br/>
		/// <c>KORTESTW k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kortestw(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>korw instruction.<br/>
		/// <br/>
		/// <c>KORW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void korw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kshiftlb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftlb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftld instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftld instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftlq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftlq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 33 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftlw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftlw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTLW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 32 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftrb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftrb instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRB k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftrd instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftrd instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRD k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W0 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftrq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftrq instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRQ k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 31 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>kshiftrw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm);
		/// <summary>kshiftrw instruction.<br/>
		/// <br/>
		/// <c>KSHIFTRW k1, k2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F3A.W1 30 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm);
		/// <summary>ktestb instruction.<br/>
		/// <br/>
		/// <c>KTESTB k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ktestb(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>ktestd instruction.<br/>
		/// <br/>
		/// <c>KTESTD k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.66.0F.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ktestd(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>ktestq instruction.<br/>
		/// <br/>
		/// <c>KTESTQ k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ktestq(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>ktestw instruction.<br/>
		/// <br/>
		/// <c>KTESTW k1, k2</c><br/>
		/// <br/>
		/// <c>VEX.L0.0F.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ktestw(AssemblerRegisterK dst, AssemblerRegisterK src);
		/// <summary>kunpckbw instruction.<br/>
		/// <br/>
		/// <c>KUNPCKBW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 4B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kunpckbw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kunpckdq instruction.<br/>
		/// <br/>
		/// <c>KUNPCKDQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 4B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kunpckdq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kunpckwd instruction.<br/>
		/// <br/>
		/// <c>KUNPCKWD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 4B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kunpckwd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxnorb instruction.<br/>
		/// <br/>
		/// <c>KXNORB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxnorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxnord instruction.<br/>
		/// <br/>
		/// <c>KXNORD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxnord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxnorq instruction.<br/>
		/// <br/>
		/// <c>KXNORQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxnorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxnorw instruction.<br/>
		/// <br/>
		/// <c>KXNORW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxnorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxorb instruction.<br/>
		/// <br/>
		/// <c>KXORB k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxord instruction.<br/>
		/// <br/>
		/// <c>KXORD k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.66.0F.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxorq instruction.<br/>
		/// <br/>
		/// <c>KXORQ k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>kxorw instruction.<br/>
		/// <br/>
		/// <c>KXORW k1, k2, k3</c><br/>
		/// <br/>
		/// <c>VEX.L1.0F.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void kxorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
		/// <summary>lahf instruction.<br/>
		/// <br/>
		/// <c>LAHF</c><br/>
		/// <br/>
		/// <c>9F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lahf();
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 02 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lar(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 02 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lar(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r64, r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 02 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lar(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 02 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lar(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lar instruction.<br/>
		/// <br/>
		/// <c>LAR r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 02 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lar(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lddqu instruction.<br/>
		/// <br/>
		/// <c>LDDQU xmm1, m128</c><br/>
		/// <br/>
		/// <c>F2 0F F0 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>ldmxcsr instruction.<br/>
		/// <br/>
		/// <c>LDMXCSR m32</c><br/>
		/// <br/>
		/// <c>NP 0F AE /2</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ldmxcsr(AssemblerMemoryOperand dst);
		/// <summary>lds instruction.<br/>
		/// <br/>
		/// <c>LDS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 C5 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void lds(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lds instruction.<br/>
		/// <br/>
		/// <c>LDS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 C5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void lds(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>ldtilecfg instruction.<br/>
		/// <br/>
		/// <c>LDTILECFG m512</c><br/>
		/// <br/>
		/// <c>VEX.128.0F38.W0 49 !(11):000:bbb</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ldtilecfg(AssemblerMemoryOperand dst);
		/// <summary>lea instruction.<br/>
		/// <br/>
		/// <c>LEA r16, m</c><br/>
		/// <br/>
		/// <c>o16 8D /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lea(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lea instruction.<br/>
		/// <br/>
		/// <c>LEA r32, m</c><br/>
		/// <br/>
		/// <c>o32 8D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lea(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lea instruction.<br/>
		/// <br/>
		/// <c>LEA r64, m</c><br/>
		/// <br/>
		/// <c>o64 8D /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lea(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>leave instruction.<br/>
		/// <br/>
		/// <c>LEAVE</c><br/>
		/// <br/>
		/// <c>o64 C9</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LEAVE</c><br/>
		/// <br/>
		/// <c>o32 C9</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LEAVE</c><br/>
		/// <br/>
		/// <c>o16 C9</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void leave();
		/// <summary>les instruction.<br/>
		/// <br/>
		/// <c>LES r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 C4 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void les(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>les instruction.<br/>
		/// <br/>
		/// <c>LES r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 C4 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void les(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lfence instruction.<br/>
		/// <br/>
		/// <c>LFENCE</c><br/>
		/// <br/>
		/// <c>NP 0F AE E8</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lfence();
		/// <summary>lfs instruction.<br/>
		/// <br/>
		/// <c>LFS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 0F B4 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lfs(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lfs instruction.<br/>
		/// <br/>
		/// <c>LFS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 0F B4 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lfs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lfs instruction.<br/>
		/// <br/>
		/// <c>LFS r64, m16:64</c><br/>
		/// <br/>
		/// <c>o64 0F B4 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lfs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>lgdt instruction.<br/>
		/// <br/>
		/// <c>LGDT m16&amp;64</c><br/>
		/// <br/>
		/// <c>0F 01 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LGDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LGDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /2</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void lgdt(AssemblerMemoryOperand dst);
		/// <summary>lgs instruction.<br/>
		/// <br/>
		/// <c>LGS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 0F B5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lgs(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lgs instruction.<br/>
		/// <br/>
		/// <c>LGS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 0F B5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lgs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lgs instruction.<br/>
		/// <br/>
		/// <c>LGS r64, m16:64</c><br/>
		/// <br/>
		/// <c>o64 0F B5 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lgs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>lidt instruction.<br/>
		/// <br/>
		/// <c>LIDT m16&amp;64</c><br/>
		/// <br/>
		/// <c>0F 01 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LIDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LIDT m16&amp;32</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /3</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void lidt(AssemblerMemoryOperand dst);
		/// <summary>lkgs instruction.<br/>
		/// <br/>
		/// <c>LKGS r/m16</c><br/>
		/// <br/>
		/// <c>o16 F2 0F 00 /6</c><br/>
		/// <br/>
		/// <c>LKGS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lkgs(AssemblerRegister16 dst);
		/// <summary>lkgs instruction.<br/>
		/// <br/>
		/// <c>LKGS r32/m16</c><br/>
		/// <br/>
		/// <c>o32 F2 0F 00 /6</c><br/>
		/// <br/>
		/// <c>LKGS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lkgs(AssemblerRegister32 dst);
		/// <summary>lkgs instruction.<br/>
		/// <br/>
		/// <c>LKGS r64/m16</c><br/>
		/// <br/>
		/// <c>F2 o64 0F 00 /6</c><br/>
		/// <br/>
		/// <c>LKGS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lkgs(AssemblerRegister64 dst);
		/// <summary>lkgs instruction.<br/>
		/// <br/>
		/// <c>LKGS r32/m16</c><br/>
		/// <br/>
		/// <c>o32 F2 0F 00 /6</c><br/>
		/// <br/>
		/// <c>LKGS</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LKGS r/m16</c><br/>
		/// <br/>
		/// <c>o16 F2 0F 00 /6</c><br/>
		/// <br/>
		/// <c>LKGS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lkgs(AssemblerMemoryOperand dst);
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /2</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lldt(AssemblerRegister16 dst);
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lldt(AssemblerRegister32 dst);
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 00 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lldt(AssemblerRegister64 dst);
		/// <summary>lldt instruction.<br/>
		/// <br/>
		/// <c>LLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>LLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /2</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lldt(AssemblerMemoryOperand dst);
		/// <summary>llwpcb instruction.<br/>
		/// <br/>
		/// <c>LLWPCB r32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 12 /0</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void llwpcb(AssemblerRegister32 dst);
		/// <summary>llwpcb instruction.<br/>
		/// <br/>
		/// <c>LLWPCB r64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 12 /0</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void llwpcb(AssemblerRegister64 dst);
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /6</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lmsw(AssemblerRegister16 dst);
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lmsw(AssemblerRegister32 dst);
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 01 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lmsw(AssemblerRegister64 dst);
		/// <summary>lmsw instruction.<br/>
		/// <br/>
		/// <c>LMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>LMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /6</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lmsw(AssemblerMemoryOperand dst);
		/// <summary>loadall instruction.<br/>
		/// <br/>
		/// <c>LOADALL</c><br/>
		/// <br/>
		/// <c>0F 07</c><br/>
		/// <br/>
		/// <c>386</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loadall();
		/// <summary>loadiwkey instruction.<br/>
		/// <br/>
		/// <c>LOADIWKEY xmm1, xmm2, &lt;EAX&gt;, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>F3 0F 38 DC 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>KL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void loadiwkey(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>lodsb instruction.<br/>
		/// <br/>
		/// <c>LODSB</c><br/>
		/// <br/>
		/// <c>AC</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lodsb();
		/// <summary>lodsd instruction.<br/>
		/// <br/>
		/// <c>LODSD</c><br/>
		/// <br/>
		/// <c>o32 AD</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lodsd();
		/// <summary>lodsq instruction.<br/>
		/// <br/>
		/// <c>LODSQ</c><br/>
		/// <br/>
		/// <c>o64 AD</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lodsq();
		/// <summary>lodsw instruction.<br/>
		/// <br/>
		/// <c>LODSW</c><br/>
		/// <br/>
		/// <c>o16 AD</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lodsw();
		/// <summary>loop instruction.<br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E2 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E2 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E2 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loop(Iced::Intel::Label dst);
		/// <summary>loop instruction.<br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E2 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E2 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOP rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E2 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loop(std::uint64_t dst);
		/// <summary>loope instruction.<br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E1 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E1 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E1 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loope(Iced::Intel::Label dst);
		/// <summary>loope instruction.<br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E1 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E1 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E1 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loope(std::uint64_t dst);
		/// <summary>loopne instruction.<br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E0 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E0 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E0 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loopne(Iced::Intel::Label dst);
		/// <summary>loopne instruction.<br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E0 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E0 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E0 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loopne(std::uint64_t dst);
		/// <summary>loopnz instruction.<br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E0 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E0 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E0 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loopnz(Iced::Intel::Label dst);
		/// <summary>loopnz instruction.<br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E0 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E0 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPNE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E0 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loopnz(std::uint64_t dst);
		/// <summary>loopz instruction.<br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E1 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E1 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E1 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loopz(Iced::Intel::Label dst);
		/// <summary>loopz instruction.<br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a64 o64 E1 cb</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a32 o32 E1 cb</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>LOOPE rel8</c><br/>
		/// <br/>
		/// <c>a16 o16 E1 cb</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void loopz(std::uint64_t dst);
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 03 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lsl(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 03 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lsl(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r64, r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 03 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lsl(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 03 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lsl(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lsl instruction.<br/>
		/// <br/>
		/// <c>LSL r32, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 03 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lsl(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lss instruction.<br/>
		/// <br/>
		/// <c>LSS r16, m16:16</c><br/>
		/// <br/>
		/// <c>o16 0F B2 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lss(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lss instruction.<br/>
		/// <br/>
		/// <c>LSS r32, m16:32</c><br/>
		/// <br/>
		/// <c>o32 0F B2 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lss(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lss instruction.<br/>
		/// <br/>
		/// <c>LSS r64, m16:64</c><br/>
		/// <br/>
		/// <c>o64 0F B2 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lss(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /3</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ltr(AssemblerRegister16 dst);
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ltr(AssemblerRegister32 dst);
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 00 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ltr(AssemblerRegister64 dst);
		/// <summary>ltr instruction.<br/>
		/// <br/>
		/// <c>LTR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>LTR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /3</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ltr(AssemblerMemoryOperand dst);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, std::int32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, std::uint32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>lwpins instruction.<br/>
		/// <br/>
		/// <c>LWPINS r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /0 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, std::int32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, std::uint32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r32, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W0 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>lwpval instruction.<br/>
		/// <br/>
		/// <c>LWPVAL r64, r/m32, imm32</c><br/>
		/// <br/>
		/// <c>XOP.L0.XA.W1 12 /1 id</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint32_t imm);
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lzcnt(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lzcnt(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lzcnt(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void lzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>lzcnt instruction.<br/>
		/// <br/>
		/// <c>LZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F BD /r</c><br/>
		/// <br/>
		/// <c>LZCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void lzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>maskmovdqu instruction.<br/>
		/// <br/>
		/// <c>MASKMOVDQU xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>66 0F F7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>maskmovq instruction.<br/>
		/// <br/>
		/// <c>MASKMOVQ mm1, mm2</c><br/>
		/// <br/>
		/// <c>NP 0F F7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maskmovq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>maxpd instruction.<br/>
		/// <br/>
		/// <c>MAXPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>maxpd instruction.<br/>
		/// <br/>
		/// <c>MAXPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>maxps instruction.<br/>
		/// <br/>
		/// <c>MAXPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>maxps instruction.<br/>
		/// <br/>
		/// <c>MAXPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>maxsd instruction.<br/>
		/// <br/>
		/// <c>MAXSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>maxsd instruction.<br/>
		/// <br/>
		/// <c>MAXSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>maxss instruction.<br/>
		/// <br/>
		/// <c>MAXSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>maxss instruction.<br/>
		/// <br/>
		/// <c>MAXSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5F /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void maxss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>mcommit instruction.<br/>
		/// <br/>
		/// <c>MCOMMIT</c><br/>
		/// <br/>
		/// <c>F3 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MCOMMIT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mcommit();
		/// <summary>mfence instruction.<br/>
		/// <br/>
		/// <c>MFENCE</c><br/>
		/// <br/>
		/// <c>NP 0F AE F0</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mfence();
		/// <summary>minpd instruction.<br/>
		/// <br/>
		/// <c>MINPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>minpd instruction.<br/>
		/// <br/>
		/// <c>MINPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>minps instruction.<br/>
		/// <br/>
		/// <c>MINPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>minps instruction.<br/>
		/// <br/>
		/// <c>MINPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>minsd instruction.<br/>
		/// <br/>
		/// <c>MINSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>minsd instruction.<br/>
		/// <br/>
		/// <c>MINSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>minss instruction.<br/>
		/// <br/>
		/// <c>MINSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>minss instruction.<br/>
		/// <br/>
		/// <c>MINSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5D /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void minss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>monitor instruction.<br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>a64 NP 0F 01 C8</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>a32 NP 0F 01 C8</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>a16 NP 0F 01 C8</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void monitor();
		/// <summary>monitorx instruction.<br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>a64 NP 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>a32 NP 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>a16 NP 0F 01 FA</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void monitorx();
		/// <summary>montmul instruction.<br/>
		/// <br/>
		/// <c>MONTMUL</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A6 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PMM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MONTMUL</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A6 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PMM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MONTMUL</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A6 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PMM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void montmul();
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>88 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs8, AL</c><br/>
		/// <br/>
		/// <c>A2 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>88 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 89 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r/m16</c><br/>
		/// <br/>
		/// <c>o16 8E /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegisterSegment dst, AssemblerRegister16 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs16, AX</c><br/>
		/// <br/>
		/// <c>o16 A3 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 89 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 89 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 8E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegisterSegment dst, AssemblerRegister32 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV cr, r32</c><br/>
		/// <br/>
		/// <c>0F 22 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void mov(AssemblerRegisterCR dst, AssemblerRegister32 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV dr, r32</c><br/>
		/// <br/>
		/// <c>0F 23 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void mov(AssemblerRegisterDR dst, AssemblerRegister32 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV tr, r32</c><br/>
		/// <br/>
		/// <c>0F 26 /r</c><br/>
		/// <br/>
		/// <c>386/486/Cyrix/Geode</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void mov(AssemblerRegisterTR dst, AssemblerRegister32 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs32, EAX</c><br/>
		/// <br/>
		/// <c>o32 A3 mo</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 89 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 89 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r64/m16</c><br/>
		/// <br/>
		/// <c>o64 8E /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegisterSegment dst, AssemblerRegister64 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV cr, r64</c><br/>
		/// <br/>
		/// <c>0F 22 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegisterCR dst, AssemblerRegister64 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV dr, r64</c><br/>
		/// <br/>
		/// <c>0F 23 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegisterDR dst, AssemblerRegister64 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV moffs64, RAX</c><br/>
		/// <br/>
		/// <c>o64 A3 mo</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 89 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o16 8C /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister16 dst, AssemblerRegisterSegment src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o32 8C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister32 dst, AssemblerRegisterSegment src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o64 8C /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, AssemblerRegisterSegment src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o32 8C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, Sreg</c><br/>
		/// <br/>
		/// <c>o16 8C /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, AssemblerRegisterSegment src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, cr</c><br/>
		/// <br/>
		/// <c>0F 20 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void mov(AssemblerRegister32 dst, AssemblerRegisterCR src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, cr</c><br/>
		/// <br/>
		/// <c>0F 20 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, AssemblerRegisterCR src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, dr</c><br/>
		/// <br/>
		/// <c>0F 21 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void mov(AssemblerRegister32 dst, AssemblerRegisterDR src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, dr</c><br/>
		/// <br/>
		/// <c>0F 21 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, AssemblerRegisterDR src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, tr</c><br/>
		/// <br/>
		/// <c>0F 24 /r</c><br/>
		/// <br/>
		/// <c>386/486/Cyrix/Geode</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void mov(AssemblerRegister32 dst, AssemblerRegisterTR src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV AL, moffs8</c><br/>
		/// <br/>
		/// <c>A0 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r8, r/m8</c><br/>
		/// <br/>
		/// <c>8A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV AX, moffs16</c><br/>
		/// <br/>
		/// <c>o16 A1 mo</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 8B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV EAX, moffs32</c><br/>
		/// <br/>
		/// <c>o32 A1 mo</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 8B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV RAX, moffs64</c><br/>
		/// <br/>
		/// <c>o64 A1 mo</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOV r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 8B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV Sreg, r32/m16</c><br/>
		/// <br/>
		/// <c>o32 8E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV Sreg, r/m16</c><br/>
		/// <br/>
		/// <c>o16 8E /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegisterSegment dst, AssemblerMemoryOperand src);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r8, imm8</c><br/>
		/// <br/>
		/// <c>B0+rb ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r16, imm16</c><br/>
		/// <br/>
		/// <c>o16 B8+rw iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, imm32</c><br/>
		/// <br/>
		/// <c>o32 B8+rd id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, imm64</c><br/>
		/// <br/>
		/// <c>o64 B8+ro io</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, std::int64_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 C7 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 C7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 C7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r8, imm8</c><br/>
		/// <br/>
		/// <c>B0+rb ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r16, imm16</c><br/>
		/// <br/>
		/// <c>o16 B8+rw iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r32, imm32</c><br/>
		/// <br/>
		/// <c>o32 B8+rd id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r64, imm64</c><br/>
		/// <br/>
		/// <c>o64 B8+ro io</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mov(AssemblerRegister64 dst, std::uint64_t imm);
		/// <summary>mov instruction.<br/>
		/// <br/>
		/// <c>MOV r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 C7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 C7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOV r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mov(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>movapd instruction.<br/>
		/// <br/>
		/// <c>MOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movapd instruction.<br/>
		/// <br/>
		/// <c>MOVAPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 29 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movapd instruction.<br/>
		/// <br/>
		/// <c>MOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movaps instruction.<br/>
		/// <br/>
		/// <c>MOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movaps instruction.<br/>
		/// <br/>
		/// <c>MOVAPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 29 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movaps instruction.<br/>
		/// <br/>
		/// <c>MOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 28 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movbe(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movbe(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 38 F1 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movbe(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE r16, m16</c><br/>
		/// <br/>
		/// <c>o16 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movbe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE r32, m32</c><br/>
		/// <br/>
		/// <c>o32 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movbe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>movbe instruction.<br/>
		/// <br/>
		/// <c>MOVBE r64, m64</c><br/>
		/// <br/>
		/// <c>o64 0F 38 F0 /r</c><br/>
		/// <br/>
		/// <c>MOVBE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movbe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD mm, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 6E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerRegisterMM dst, AssemblerRegister32 src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD xmm, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 6E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, mm</c><br/>
		/// <br/>
		/// <c>NP 0F 7E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerRegister32 dst, AssemblerRegisterMM src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, mm</c><br/>
		/// <br/>
		/// <c>NP 0F 7E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerMemoryOperand dst, AssemblerRegisterMM src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD r/m32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD mm, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 6E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>movd instruction.<br/>
		/// <br/>
		/// <c>MOVD xmm, r/m32</c><br/>
		/// <br/>
		/// <c>66 0F 6E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movddup instruction.<br/>
		/// <br/>
		/// <c>MOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movddup instruction.<br/>
		/// <br/>
		/// <c>MOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movdir64b instruction.<br/>
		/// <br/>
		/// <c>MOVDIR64B r16, m512</c><br/>
		/// <br/>
		/// <c>a16 66 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>MOVDIR64B</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void movdir64b(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>movdir64b instruction.<br/>
		/// <br/>
		/// <c>MOVDIR64B r32, m512</c><br/>
		/// <br/>
		/// <c>a32 66 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>MOVDIR64B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdir64b(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>movdir64b instruction.<br/>
		/// <br/>
		/// <c>MOVDIR64B r64, m512</c><br/>
		/// <br/>
		/// <c>a64 66 0F 38 F8 /r</c><br/>
		/// <br/>
		/// <c>MOVDIR64B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movdir64b(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>movdiri instruction.<br/>
		/// <br/>
		/// <c>MOVDIRI m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 38 F9 /r</c><br/>
		/// <br/>
		/// <c>MOVDIRI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdiri(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>movdiri instruction.<br/>
		/// <br/>
		/// <c>MOVDIRI m64, r64</c><br/>
		/// <br/>
		/// <c>NP o64 0F 38 F9 /r</c><br/>
		/// <br/>
		/// <c>MOVDIRI</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movdiri(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>movdq2q instruction.<br/>
		/// <br/>
		/// <c>MOVDQ2Q mm, xmm</c><br/>
		/// <br/>
		/// <c>F2 0F D6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdq2q(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
		/// <summary>movdqa instruction.<br/>
		/// <br/>
		/// <c>MOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movdqa instruction.<br/>
		/// <br/>
		/// <c>MOVDQA xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 7F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movdqa instruction.<br/>
		/// <br/>
		/// <c>MOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movdqu instruction.<br/>
		/// <br/>
		/// <c>MOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movdqu instruction.<br/>
		/// <br/>
		/// <c>MOVDQU xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>F3 0F 7F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movdqu instruction.<br/>
		/// <br/>
		/// <c>MOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 6F /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movhlps instruction.<br/>
		/// <br/>
		/// <c>MOVHLPS xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>NP 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movhpd instruction.<br/>
		/// <br/>
		/// <c>MOVHPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 17 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movhpd instruction.<br/>
		/// <br/>
		/// <c>MOVHPD xmm1, m64</c><br/>
		/// <br/>
		/// <c>66 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movhps instruction.<br/>
		/// <br/>
		/// <c>MOVHPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 17 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movhps instruction.<br/>
		/// <br/>
		/// <c>MOVHPS xmm1, m64</c><br/>
		/// <br/>
		/// <c>NP 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movlhps instruction.<br/>
		/// <br/>
		/// <c>MOVLHPS xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>NP 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movlpd instruction.<br/>
		/// <br/>
		/// <c>MOVLPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 13 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movlpd instruction.<br/>
		/// <br/>
		/// <c>MOVLPD xmm1, m64</c><br/>
		/// <br/>
		/// <c>66 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movlpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movlps instruction.<br/>
		/// <br/>
		/// <c>MOVLPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 13 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movlps instruction.<br/>
		/// <br/>
		/// <c>MOVLPS xmm1, m64</c><br/>
		/// <br/>
		/// <c>NP 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movlps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movmskpd instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPD r32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>movmskpd instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPD r64, xmm</c><br/>
		/// <br/>
		/// <c>66 o64 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>movmskps instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPS r32, xmm</c><br/>
		/// <br/>
		/// <c>NP 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>movmskps instruction.<br/>
		/// <br/>
		/// <c>MOVMSKPS r64, xmm</c><br/>
		/// <br/>
		/// <c>NP o64 0F 50 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>movntdq instruction.<br/>
		/// <br/>
		/// <c>MOVNTDQ m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F E7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movntdqa instruction.<br/>
		/// <br/>
		/// <c>MOVNTDQA xmm1, m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 2A /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movnti instruction.<br/>
		/// <br/>
		/// <c>MOVNTI m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F C3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movnti(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>movnti instruction.<br/>
		/// <br/>
		/// <c>MOVNTI m64, r64</c><br/>
		/// <br/>
		/// <c>NP o64 0F C3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movnti(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>movntpd instruction.<br/>
		/// <br/>
		/// <c>MOVNTPD m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movntps instruction.<br/>
		/// <br/>
		/// <c>MOVNTPS m128, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movntq instruction.<br/>
		/// <br/>
		/// <c>MOVNTQ m64, mm</c><br/>
		/// <br/>
		/// <c>NP 0F E7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntq(AssemblerMemoryOperand dst, AssemblerRegisterMM src);
		/// <summary>movntsd instruction.<br/>
		/// <br/>
		/// <c>MOVNTSD m64, xmm1</c><br/>
		/// <br/>
		/// <c>F2 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movntss instruction.<br/>
		/// <br/>
		/// <c>MOVNTSS m32, xmm1</c><br/>
		/// <br/>
		/// <c>F3 0F 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4A</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movntss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm, r/m64</c><br/>
		/// <br/>
		/// <c>NP o64 0F 6E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movq(AssemblerRegisterMM dst, AssemblerRegister64 src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm, r/m64</c><br/>
		/// <br/>
		/// <c>66 o64 0F 6E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movq(AssemblerRegisterXMM dst, AssemblerRegister64 src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ r/m64, mm</c><br/>
		/// <br/>
		/// <c>NP o64 0F 7E /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movq(AssemblerRegister64 dst, AssemblerRegisterMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6F /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm/m64, mm</c><br/>
		/// <br/>
		/// <c>NP 0F 7F /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq(AssemblerMemoryOperand dst, AssemblerRegisterMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ r/m64, xmm</c><br/>
		/// <br/>
		/// <c>66 o64 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movq(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm2/m64, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F D6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6F /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>movq instruction.<br/>
		/// <br/>
		/// <c>MOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F3 0F 7E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movq2dq instruction.<br/>
		/// <br/>
		/// <c>MOVQ2DQ xmm, mm</c><br/>
		/// <br/>
		/// <c>F3 0F D6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movq2dq(AssemblerRegisterXMM dst, AssemblerRegisterMM src);
		/// <summary>movsb instruction.<br/>
		/// <br/>
		/// <c>MOVSB</c><br/>
		/// <br/>
		/// <c>A4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsb();
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD</c><br/>
		/// <br/>
		/// <c>o32 A5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsd();
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD xmm1/m64, xmm2</c><br/>
		/// <br/>
		/// <c>F2 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movsd instruction.<br/>
		/// <br/>
		/// <c>MOVSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movshdup instruction.<br/>
		/// <br/>
		/// <c>MOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movshdup instruction.<br/>
		/// <br/>
		/// <c>MOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 16 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movsldup instruction.<br/>
		/// <br/>
		/// <c>MOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movsldup instruction.<br/>
		/// <br/>
		/// <c>MOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>F3 0F 12 /r</c><br/>
		/// <br/>
		/// <c>SSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movsq instruction.<br/>
		/// <br/>
		/// <c>MOVSQ</c><br/>
		/// <br/>
		/// <c>o64 A5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsq();
		/// <summary>movss instruction.<br/>
		/// <br/>
		/// <c>MOVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movss instruction.<br/>
		/// <br/>
		/// <c>MOVSS xmm2/m32, xmm1</c><br/>
		/// <br/>
		/// <c>F3 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movss instruction.<br/>
		/// <br/>
		/// <c>MOVSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movsw instruction.<br/>
		/// <br/>
		/// <c>MOVSW</c><br/>
		/// <br/>
		/// <c>o16 A5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsw();
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsx(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsx(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r64, r/m8</c><br/>
		/// <br/>
		/// <c>o64 0F BE /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsx(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsx(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsx(AssemblerRegister32 dst, AssemblerRegister16 src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r64, r/m16</c><br/>
		/// <br/>
		/// <c>o64 0F BF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsx(AssemblerRegister64 dst, AssemblerRegister16 src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVSX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsx(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F BF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVSX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F BE /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movsx(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>movsx instruction.<br/>
		/// <br/>
		/// <c>MOVSX r64, r/m16</c><br/>
		/// <br/>
		/// <c>o64 0F BF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOVSX r64, r/m8</c><br/>
		/// <br/>
		/// <c>o64 0F BE /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsx(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsxd(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsxd(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r64, r/m32</c><br/>
		/// <br/>
		/// <c>o64 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsxd(AssemblerRegister64 dst, AssemblerRegister32 src);
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsxd(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsxd(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>movsxd instruction.<br/>
		/// <br/>
		/// <c>MOVSXD r64, r/m32</c><br/>
		/// <br/>
		/// <c>o64 63 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movsxd(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>movupd instruction.<br/>
		/// <br/>
		/// <c>MOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movupd instruction.<br/>
		/// <br/>
		/// <c>MOVUPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>66 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movupd instruction.<br/>
		/// <br/>
		/// <c>MOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movups instruction.<br/>
		/// <br/>
		/// <c>MOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>movups instruction.<br/>
		/// <br/>
		/// <c>MOVUPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>NP 0F 11 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>movups instruction.<br/>
		/// <br/>
		/// <c>MOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 10 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movzx(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movzx(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r64, r/m8</c><br/>
		/// <br/>
		/// <c>o64 0F B6 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movzx(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movzx(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movzx(AssemblerRegister32 dst, AssemblerRegister16 src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r64, r/m16</c><br/>
		/// <br/>
		/// <c>o64 0F B7 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movzx(AssemblerRegister64 dst, AssemblerRegister16 src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVZX r16, r/m8</c><br/>
		/// <br/>
		/// <c>o16 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movzx(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r32, r/m16</c><br/>
		/// <br/>
		/// <c>o32 0F B7 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MOVZX r32, r/m8</c><br/>
		/// <br/>
		/// <c>o32 0F B6 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void movzx(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>movzx instruction.<br/>
		/// <br/>
		/// <c>MOVZX r64, r/m16</c><br/>
		/// <br/>
		/// <c>o64 0F B7 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MOVZX r64, r/m8</c><br/>
		/// <br/>
		/// <c>o64 0F B6 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void movzx(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>mpsadbw instruction.<br/>
		/// <br/>
		/// <c>MPSADBW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 42 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mul(AssemblerRegister8 dst);
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mul(AssemblerRegister16 dst);
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mul(AssemblerRegister32 dst);
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mul(AssemblerRegister64 dst);
		/// <summary>mul instruction.<br/>
		/// <br/>
		/// <c>MUL r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>MUL r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MUL r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>MUL r/m8</c><br/>
		/// <br/>
		/// <c>F6 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mul(AssemblerMemoryOperand dst);
		/// <summary>mulpd instruction.<br/>
		/// <br/>
		/// <c>MULPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>mulpd instruction.<br/>
		/// <br/>
		/// <c>MULPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>mulps instruction.<br/>
		/// <br/>
		/// <c>MULPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>mulps instruction.<br/>
		/// <br/>
		/// <c>MULPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>mulsd instruction.<br/>
		/// <br/>
		/// <c>MULSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>mulsd instruction.<br/>
		/// <br/>
		/// <c>MULSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>mulss instruction.<br/>
		/// <br/>
		/// <c>MULSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>mulss instruction.<br/>
		/// <br/>
		/// <c>MULSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 59 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
		/// <summary>mulx instruction.<br/>
		/// <br/>
		/// <c>MULX r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F6 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
		/// <summary>mwait instruction.<br/>
		/// <br/>
		/// <c>MWAIT</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C9</c><br/>
		/// <br/>
		/// <c>MONITOR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mwait();
		/// <summary>mwaitx instruction.<br/>
		/// <br/>
		/// <c>MWAITX</c><br/>
		/// <br/>
		/// <c>NP 0F 01 FB</c><br/>
		/// <br/>
		/// <c>MONITORX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void mwaitx();
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m8</c><br/>
		/// <br/>
		/// <c>F6 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void neg(AssemblerRegister8 dst);
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void neg(AssemblerRegister16 dst);
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void neg(AssemblerRegister32 dst);
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void neg(AssemblerRegister64 dst);
		/// <summary>neg instruction.<br/>
		/// <br/>
		/// <c>NEG r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>NEG r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NEG r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NEG r/m8</c><br/>
		/// <br/>
		/// <c>F6 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void neg(AssemblerMemoryOperand dst);
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP</c><br/>
		/// <br/>
		/// <c>o32 90</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOP</c><br/>
		/// <br/>
		/// <c>o16 90</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void nop();
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void nop(AssemblerRegister16 dst);
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void nop(AssemblerRegister32 dst);
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void nop(AssemblerRegister64 dst);
		/// <summary>nop instruction.<br/>
		/// <br/>
		/// <c>NOP r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>NOP r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOP r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /0</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void nop(AssemblerMemoryOperand dst);
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m8</c><br/>
		/// <br/>
		/// <c>F6 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void not_(AssemblerRegister8 dst);
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void not_(AssemblerRegister16 dst);
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void not_(AssemblerRegister32 dst);
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void not_(AssemblerRegister64 dst);
		/// <summary>not instruction.<br/>
		/// <br/>
		/// <c>NOT r/m64</c><br/>
		/// <br/>
		/// <c>o64 F7 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>NOT r/m32</c><br/>
		/// <br/>
		/// <c>o32 F7 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOT r/m16</c><br/>
		/// <br/>
		/// <c>o16 F7 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>NOT r/m8</c><br/>
		/// <br/>
		/// <c>F6 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void not_(AssemblerMemoryOperand dst);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m8, r8</c><br/>
		/// <br/>
		/// <c>08 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m8, r8</c><br/>
		/// <br/>
		/// <c>08 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 09 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 09 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 09 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 09 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 09 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void or_(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 09 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void or_(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r8, r/m8</c><br/>
		/// <br/>
		/// <c>0A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void or_(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AL, imm8</c><br/>
		/// <br/>
		/// <c>0C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 0D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 0D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 0D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /1 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void or_(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /1 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AL, imm8</c><br/>
		/// <br/>
		/// <c>0C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 0D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 0D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>or instruction.<br/>
		/// <br/>
		/// <c>OR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /1 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /1 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>OR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /1 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void or_(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>orpd instruction.<br/>
		/// <br/>
		/// <c>ORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void orpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>orpd instruction.<br/>
		/// <br/>
		/// <c>ORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void orpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>orps instruction.<br/>
		/// <br/>
		/// <c>ORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void orps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>orps instruction.<br/>
		/// <br/>
		/// <c>ORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 56 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void orps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT DX, AL</c><br/>
		/// <br/>
		/// <c>EE</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AL</c><br/>
		/// <br/>
		/// <c>E6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(std::int8_t imm, AssemblerRegister8 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AL</c><br/>
		/// <br/>
		/// <c>E6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(std::uint8_t imm, AssemblerRegister8 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT DX, AX</c><br/>
		/// <br/>
		/// <c>o16 EF</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AX</c><br/>
		/// <br/>
		/// <c>o16 E7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(std::int8_t imm, AssemblerRegister16 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, AX</c><br/>
		/// <br/>
		/// <c>o16 E7 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(std::uint8_t imm, AssemblerRegister16 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT DX, EAX</c><br/>
		/// <br/>
		/// <c>o32 EF</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(AssemblerRegister16 dst, AssemblerRegister32 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, EAX</c><br/>
		/// <br/>
		/// <c>o32 E7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(std::int8_t imm, AssemblerRegister32 src);
		/// <summary>out instruction.<br/>
		/// <br/>
		/// <c>OUT imm8, EAX</c><br/>
		/// <br/>
		/// <c>o32 E7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void out(std::uint8_t imm, AssemblerRegister32 src);
		/// <summary>outsb instruction.<br/>
		/// <br/>
		/// <c>OUTSB</c><br/>
		/// <br/>
		/// <c>6E</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void outsb();
		/// <summary>outsd instruction.<br/>
		/// <br/>
		/// <c>OUTSD</c><br/>
		/// <br/>
		/// <c>o32 6F</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void outsd();
		/// <summary>outsw instruction.<br/>
		/// <br/>
		/// <c>OUTSW</c><br/>
		/// <br/>
		/// <c>o16 6F</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void outsw();
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pabsb instruction.<br/>
		/// <br/>
		/// <c>PABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1C /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pabsd instruction.<br/>
		/// <br/>
		/// <c>PABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1E /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pabsw instruction.<br/>
		/// <br/>
		/// <c>PABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 1D /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6B /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packssdw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6B /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packssdw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>packssdw instruction.<br/>
		/// <br/>
		/// <c>PACKSSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6B /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packssdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 63 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packsswb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 63 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packsswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 63 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packsswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>packsswb instruction.<br/>
		/// <br/>
		/// <c>PACKSSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 63 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packsswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>packusdw instruction.<br/>
		/// <br/>
		/// <c>PACKUSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>packusdw instruction.<br/>
		/// <br/>
		/// <c>PACKUSDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 2B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packusdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 67 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packuswb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 67 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 67 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packuswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>packuswb instruction.<br/>
		/// <br/>
		/// <c>PACKUSWB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 67 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void packuswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddb instruction.<br/>
		/// <br/>
		/// <c>PADDB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FE /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FE /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddd instruction.<br/>
		/// <br/>
		/// <c>PADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D4 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D4 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddq instruction.<br/>
		/// <br/>
		/// <c>PADDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddsb instruction.<br/>
		/// <br/>
		/// <c>PADDSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddsiw instruction.<br/>
		/// <br/>
		/// <c>PADDSIW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 51 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void paddsiw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddsiw instruction.<br/>
		/// <br/>
		/// <c>PADDSIW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 51 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void paddsiw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F ED /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F ED /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F ED /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddsw instruction.<br/>
		/// <br/>
		/// <c>PADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F ED /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DC /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddusb instruction.<br/>
		/// <br/>
		/// <c>PADDUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DC /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddusw instruction.<br/>
		/// <br/>
		/// <c>PADDUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FD /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>paddw instruction.<br/>
		/// <br/>
		/// <c>PADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FD /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void paddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::int8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::uint8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>palignr instruction.<br/>
		/// <br/>
		/// <c>PALIGNR xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0F /r ib</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pand(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pand(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pand instruction.<br/>
		/// <br/>
		/// <c>PAND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pand(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pandn(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pandn(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pandn instruction.<br/>
		/// <br/>
		/// <c>PANDN xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pandn(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pause instruction.<br/>
		/// <br/>
		/// <c>PAUSE</c><br/>
		/// <br/>
		/// <c>F3 90</c><br/>
		/// <br/>
		/// <c>Pentium 4 or later</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pause();
		/// <summary>paveb instruction.<br/>
		/// <br/>
		/// <c>PAVEB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 50 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void paveb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>paveb instruction.<br/>
		/// <br/>
		/// <c>PAVEB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 50 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void paveb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pavgb instruction.<br/>
		/// <br/>
		/// <c>PAVGB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E0 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pavgusb instruction.<br/>
		/// <br/>
		/// <c>PAVGUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BF</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgusb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pavgusb instruction.<br/>
		/// <br/>
		/// <c>PAVGUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BF</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pavgw instruction.<br/>
		/// <br/>
		/// <c>PAVGW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pavgw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pblendvb instruction.<br/>
		/// <br/>
		/// <c>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 10 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pblendvb instruction.<br/>
		/// <br/>
		/// <c>PBLENDVB xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>66 0F 38 10 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pblendvb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pblendw instruction.<br/>
		/// <br/>
		/// <c>PBLENDW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0E /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pclmulqdq instruction.<br/>
		/// <br/>
		/// <c>PCLMULQDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 74 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 74 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 74 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpeqb instruction.<br/>
		/// <br/>
		/// <c>PCMPEQB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 74 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 76 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 76 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 76 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpeqd instruction.<br/>
		/// <br/>
		/// <c>PCMPEQD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 76 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpeqq instruction.<br/>
		/// <br/>
		/// <c>PCMPEQQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 29 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpeqq instruction.<br/>
		/// <br/>
		/// <c>PCMPEQQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 29 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 75 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 75 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 75 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpeqw instruction.<br/>
		/// <br/>
		/// <c>PCMPEQW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 75 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpeqw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pcmpestri instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 61 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pcmpestrm instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>PCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 60 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 64 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 64 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 64 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpgtb instruction.<br/>
		/// <br/>
		/// <c>PCMPGTB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 64 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 66 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 66 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 66 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpgtd instruction.<br/>
		/// <br/>
		/// <c>PCMPGTD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 66 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpgtq instruction.<br/>
		/// <br/>
		/// <c>PCMPGTQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 37 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpgtq instruction.<br/>
		/// <br/>
		/// <c>PCMPGTQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 37 /r</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 65 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 65 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 65 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpgtw instruction.<br/>
		/// <br/>
		/// <c>PCMPGTW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 65 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpgtw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pcmpistri instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 63 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pcmpistrm instruction.<br/>
		/// <br/>
		/// <c>PCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 62 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pcommit instruction.<br/>
		/// <br/>
		/// <c>PCOMMIT</c><br/>
		/// <br/>
		/// <c>66 0F AE F8</c><br/>
		/// <br/>
		/// <c>PCOMMIT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pcommit();
		/// <summary>pconfig instruction.<br/>
		/// <br/>
		/// <c>PCONFIG</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C5</c><br/>
		/// <br/>
		/// <c>PCONFIG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pconfig();
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
		/// <summary>pdep instruction.<br/>
		/// <br/>
		/// <c>PDEP r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
		/// <summary>pdistib instruction.<br/>
		/// <br/>
		/// <c>PDISTIB mm, m64</c><br/>
		/// <br/>
		/// <c>0F 54 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pdistib(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r32a, r32b, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
		/// <summary>pext instruction.<br/>
		/// <br/>
		/// <c>PEXT r64a, r64b, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F5 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrb instruction.<br/>
		/// <br/>
		/// <c>PEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 14 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrd instruction.<br/>
		/// <br/>
		/// <c>PEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrq instruction.<br/>
		/// <br/>
		/// <c>PEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 16 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, std::int8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP o64 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, std::int8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32/m16, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 15 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, std::uint8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, mm, imm8</c><br/>
		/// <br/>
		/// <c>NP o64 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, std::uint8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r64, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F C5 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pextrw instruction.<br/>
		/// <br/>
		/// <c>PEXTRW r32/m16, xmm, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 15 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pf2id instruction.<br/>
		/// <br/>
		/// <c>PF2ID mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pf2id(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pf2id instruction.<br/>
		/// <br/>
		/// <c>PF2ID mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pf2id(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pf2iw instruction.<br/>
		/// <br/>
		/// <c>PF2IW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pf2iw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pf2iw instruction.<br/>
		/// <br/>
		/// <c>PF2IW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 1C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pf2iw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfacc instruction.<br/>
		/// <br/>
		/// <c>PFACC mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AE</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfacc(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfacc instruction.<br/>
		/// <br/>
		/// <c>PFACC mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AE</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfadd instruction.<br/>
		/// <br/>
		/// <c>PFADD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9E</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfadd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfadd instruction.<br/>
		/// <br/>
		/// <c>PFADD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9E</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfadd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfcmpeq instruction.<br/>
		/// <br/>
		/// <c>PFCMPEQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfcmpeq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfcmpeq instruction.<br/>
		/// <br/>
		/// <c>PFCMPEQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfcmpeq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfcmpge instruction.<br/>
		/// <br/>
		/// <c>PFCMPGE mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 90</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfcmpge(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfcmpge instruction.<br/>
		/// <br/>
		/// <c>PFCMPGE mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 90</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfcmpge(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfcmpgt instruction.<br/>
		/// <br/>
		/// <c>PFCMPGT mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfcmpgt(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfcmpgt instruction.<br/>
		/// <br/>
		/// <c>PFCMPGT mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A0</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfcmpgt(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfmax instruction.<br/>
		/// <br/>
		/// <c>PFMAX mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfmax(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfmax instruction.<br/>
		/// <br/>
		/// <c>PFMAX mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfmax(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfmin instruction.<br/>
		/// <br/>
		/// <c>PFMIN mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 94</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfmin(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfmin instruction.<br/>
		/// <br/>
		/// <c>PFMIN mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 94</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfmin(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfmul instruction.<br/>
		/// <br/>
		/// <c>PFMUL mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfmul(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfmul instruction.<br/>
		/// <br/>
		/// <c>PFMUL mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B4</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfmul(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfnacc instruction.<br/>
		/// <br/>
		/// <c>PFNACC mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8A</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfnacc instruction.<br/>
		/// <br/>
		/// <c>PFNACC mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8A</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfpnacc instruction.<br/>
		/// <br/>
		/// <c>PFPNACC mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8E</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfpnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfpnacc instruction.<br/>
		/// <br/>
		/// <c>PFPNACC mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 8E</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfpnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrcp instruction.<br/>
		/// <br/>
		/// <c>PFRCP mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 96</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrcp(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrcp instruction.<br/>
		/// <br/>
		/// <c>PFRCP mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 96</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrcp(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrcpit1 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT1 mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrcpit1(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrcpit1 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT1 mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrcpit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrcpit2 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT2 mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrcpit2(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrcpit2 instruction.<br/>
		/// <br/>
		/// <c>PFRCPIT2 mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B6</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrcpit2(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrcpv instruction.<br/>
		/// <br/>
		/// <c>PFRCPV mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 86</c><br/>
		/// <br/>
		/// <c>AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pfrcpv(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrcpv instruction.<br/>
		/// <br/>
		/// <c>PFRCPV mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 86</c><br/>
		/// <br/>
		/// <c>AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pfrcpv(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrsqit1 instruction.<br/>
		/// <br/>
		/// <c>PFRSQIT1 mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrsqit1(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrsqit1 instruction.<br/>
		/// <br/>
		/// <c>PFRSQIT1 mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r A7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrsqit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrsqrt instruction.<br/>
		/// <br/>
		/// <c>PFRSQRT mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 97</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrsqrt(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrsqrt instruction.<br/>
		/// <br/>
		/// <c>PFRSQRT mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 97</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfrsqrt(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfrsqrtv instruction.<br/>
		/// <br/>
		/// <c>PFRSQRTV mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 87</c><br/>
		/// <br/>
		/// <c>AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pfrsqrtv(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfrsqrtv instruction.<br/>
		/// <br/>
		/// <c>PFRSQRTV mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 87</c><br/>
		/// <br/>
		/// <c>AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pfrsqrtv(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfsub instruction.<br/>
		/// <br/>
		/// <c>PFSUB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9A</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfsub(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfsub instruction.<br/>
		/// <br/>
		/// <c>PFSUB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 9A</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfsub(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pfsubr instruction.<br/>
		/// <br/>
		/// <c>PFSUBR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AA</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfsubr(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pfsubr instruction.<br/>
		/// <br/>
		/// <c>PFSUBR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r AA</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pfsubr(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phaddd instruction.<br/>
		/// <br/>
		/// <c>PHADDD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 02 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phaddsw instruction.<br/>
		/// <br/>
		/// <c>PHADDSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 03 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phaddw instruction.<br/>
		/// <br/>
		/// <c>PHADDW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 01 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phaddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>phminposuw instruction.<br/>
		/// <br/>
		/// <c>PHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 41 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phminposuw instruction.<br/>
		/// <br/>
		/// <c>PHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 41 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phsubd instruction.<br/>
		/// <br/>
		/// <c>PHSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 06 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phsubsw instruction.<br/>
		/// <br/>
		/// <c>PHSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 07 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>phsubw instruction.<br/>
		/// <br/>
		/// <c>PHSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 05 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void phsubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pi2fd instruction.<br/>
		/// <br/>
		/// <c>PI2FD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pi2fd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pi2fd instruction.<br/>
		/// <br/>
		/// <c>PI2FD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0D</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pi2fd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pi2fw instruction.<br/>
		/// <br/>
		/// <c>PI2FW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pi2fw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pi2fw instruction.<br/>
		/// <br/>
		/// <c>PI2FW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r 0C</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pi2fw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>pinsrb instruction.<br/>
		/// <br/>
		/// <c>PINSRB xmm1, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 20 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>pinsrd instruction.<br/>
		/// <br/>
		/// <c>PINSRD xmm1, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>pinsrq instruction.<br/>
		/// <br/>
		/// <c>PINSRQ xmm1, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F 3A 22 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP o64 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP o64 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 o64 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW mm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pinsrw instruction.<br/>
		/// <br/>
		/// <c>PINSRW xmm, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C4 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pmachriw instruction.<br/>
		/// <br/>
		/// <c>PMACHRIW mm, m64</c><br/>
		/// <br/>
		/// <c>0F 5E /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmachriw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaddubsw instruction.<br/>
		/// <br/>
		/// <c>PMADDUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 04 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddwd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaddwd instruction.<br/>
		/// <br/>
		/// <c>PMADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmagw instruction.<br/>
		/// <br/>
		/// <c>PMAGW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 52 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmagw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmagw instruction.<br/>
		/// <br/>
		/// <c>PMAGW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 52 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmagw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxsb instruction.<br/>
		/// <br/>
		/// <c>PMAXSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3C /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaxsb instruction.<br/>
		/// <br/>
		/// <c>PMAXSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3C /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxsd instruction.<br/>
		/// <br/>
		/// <c>PMAXSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3D /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaxsd instruction.<br/>
		/// <br/>
		/// <c>PMAXSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3D /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxsw instruction.<br/>
		/// <br/>
		/// <c>PMAXSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxub(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxub(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxub instruction.<br/>
		/// <br/>
		/// <c>PMAXUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DE /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxud instruction.<br/>
		/// <br/>
		/// <c>PMAXUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3F /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaxud instruction.<br/>
		/// <br/>
		/// <c>PMAXUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3F /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmaxuw instruction.<br/>
		/// <br/>
		/// <c>PMAXUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3E /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmaxuw instruction.<br/>
		/// <br/>
		/// <c>PMAXUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3E /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmaxuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pminsb instruction.<br/>
		/// <br/>
		/// <c>PMINSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 38 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pminsb instruction.<br/>
		/// <br/>
		/// <c>PMINSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 38 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pminsd instruction.<br/>
		/// <br/>
		/// <c>PMINSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 39 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pminsd instruction.<br/>
		/// <br/>
		/// <c>PMINSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 39 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pminsw instruction.<br/>
		/// <br/>
		/// <c>PMINSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminub(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminub(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pminub instruction.<br/>
		/// <br/>
		/// <c>PMINUB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F DA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pminud instruction.<br/>
		/// <br/>
		/// <c>PMINUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pminud instruction.<br/>
		/// <br/>
		/// <c>PMINUD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3B /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pminuw instruction.<br/>
		/// <br/>
		/// <c>PMINUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3A /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pminuw instruction.<br/>
		/// <br/>
		/// <c>PMINUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 3A /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pminuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r32, mm</c><br/>
		/// <br/>
		/// <c>NP 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovmskb(AssemblerRegister32 dst, AssemblerRegisterMM src);
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r64, mm</c><br/>
		/// <br/>
		/// <c>NP o64 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pmovmskb(AssemblerRegister64 dst, AssemblerRegisterMM src);
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r32, xmm</c><br/>
		/// <br/>
		/// <c>66 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>pmovmskb instruction.<br/>
		/// <br/>
		/// <c>PMOVMSKB r64, xmm</c><br/>
		/// <br/>
		/// <c>66 o64 0F D7 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 21 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 21 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovsxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 22 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 22 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovsxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 20 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 20 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovsxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 25 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 25 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovsxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 23 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 23 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovsxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 24 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovsxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 24 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovzxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 31 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovzxbd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 31 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovzxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 32 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovzxbq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>66 0F 38 32 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovzxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 30 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovzxbw instruction.<br/>
		/// <br/>
		/// <c>PMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 30 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovzxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 35 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovzxdq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 35 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovzxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 33 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovzxwd instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 38 33 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmovzxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 34 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmovzxwq instruction.<br/>
		/// <br/>
		/// <c>PMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>66 0F 38 34 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmuldq instruction.<br/>
		/// <br/>
		/// <c>PMULDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 28 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmuldq instruction.<br/>
		/// <br/>
		/// <c>PMULDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 28 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmuldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhriw instruction.<br/>
		/// <br/>
		/// <c>PMULHRIW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 5D /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmulhriw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmulhriw instruction.<br/>
		/// <br/>
		/// <c>PMULHRIW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 5D /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmulhriw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhrsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhrsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhrsw instruction.<br/>
		/// <br/>
		/// <c>PMULHRSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0B /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhrsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhrw instruction.<br/>
		/// <br/>
		/// <c>PMULHRW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhrw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmulhrw instruction.<br/>
		/// <br/>
		/// <c>PMULHRW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r B7</c><br/>
		/// <br/>
		/// <c>3DNOW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhrw_cyrix instruction.<br/>
		/// <br/>
		/// <c>PMULHRW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 59 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmulhrw_cyrix(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmulhrw_cyrix instruction.<br/>
		/// <br/>
		/// <c>PMULHRW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 59 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmulhrw_cyrix(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhuw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhuw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhuw instruction.<br/>
		/// <br/>
		/// <c>PMULHUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulhw instruction.<br/>
		/// <br/>
		/// <c>PMULHW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmulld instruction.<br/>
		/// <br/>
		/// <c>PMULLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 40 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmulld instruction.<br/>
		/// <br/>
		/// <c>PMULLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 40 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmulld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmullw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D5 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmullw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmullw instruction.<br/>
		/// <br/>
		/// <c>PMULLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D5 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmullw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmuludq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmuludq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmuludq instruction.<br/>
		/// <br/>
		/// <c>PMULUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F4 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pmuludq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pmvgezb instruction.<br/>
		/// <br/>
		/// <c>PMVGEZB mm, m64</c><br/>
		/// <br/>
		/// <c>0F 5C /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmvgezb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmvlzb instruction.<br/>
		/// <br/>
		/// <c>PMVLZB mm, m64</c><br/>
		/// <br/>
		/// <c>0F 5B /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmvlzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmvnzb instruction.<br/>
		/// <br/>
		/// <c>PMVNZB mm, m64</c><br/>
		/// <br/>
		/// <c>0F 5A /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmvnzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pmvzb instruction.<br/>
		/// <br/>
		/// <c>PMVZB mm, m64</c><br/>
		/// <br/>
		/// <c>0F 58 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pmvzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r16</c><br/>
		/// <br/>
		/// <c>o16 58+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pop(AssemblerRegister16 dst);
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r32</c><br/>
		/// <br/>
		/// <c>o32 58+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pop(AssemblerRegister32 dst);
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r64</c><br/>
		/// <br/>
		/// <c>o64 58+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pop(AssemblerRegister64 dst);
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP FS</c><br/>
		/// <br/>
		/// <c>o64 0F A1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>POP GS</c><br/>
		/// <br/>
		/// <c>o64 0F A9</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>POP ES</c><br/>
		/// <br/>
		/// <c>o32 07</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP SS</c><br/>
		/// <br/>
		/// <c>o32 17</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP DS</c><br/>
		/// <br/>
		/// <c>o32 1F</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP FS</c><br/>
		/// <br/>
		/// <c>o32 0F A1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP GS</c><br/>
		/// <br/>
		/// <c>o32 0F A9</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP ES</c><br/>
		/// <br/>
		/// <c>o16 07</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP SS</c><br/>
		/// <br/>
		/// <c>o16 17</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP DS</c><br/>
		/// <br/>
		/// <c>o16 1F</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP FS</c><br/>
		/// <br/>
		/// <c>o16 0F A1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>POP GS</c><br/>
		/// <br/>
		/// <c>o16 0F A9</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pop(AssemblerRegisterSegment dst);
		/// <summary>pop instruction.<br/>
		/// <br/>
		/// <c>POP r/m64</c><br/>
		/// <br/>
		/// <c>o64 8F /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>POP r/m32</c><br/>
		/// <br/>
		/// <c>o32 8F /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>POP r/m16</c><br/>
		/// <br/>
		/// <c>o16 8F /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pop(AssemblerMemoryOperand dst);
		/// <summary>popa instruction.<br/>
		/// <br/>
		/// <c>POPA</c><br/>
		/// <br/>
		/// <c>o16 61</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void popa();
		/// <summary>popad instruction.<br/>
		/// <br/>
		/// <c>POPAD</c><br/>
		/// <br/>
		/// <c>o32 61</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void popad();
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void popcnt(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void popcnt(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void popcnt(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void popcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void popcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>popcnt instruction.<br/>
		/// <br/>
		/// <c>POPCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F B8 /r</c><br/>
		/// <br/>
		/// <c>POPCNT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void popcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>popf instruction.<br/>
		/// <br/>
		/// <c>POPF</c><br/>
		/// <br/>
		/// <c>o16 9D</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void popf();
		/// <summary>popfd instruction.<br/>
		/// <br/>
		/// <c>POPFD</c><br/>
		/// <br/>
		/// <c>o32 9D</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void popfd();
		/// <summary>popfq instruction.<br/>
		/// <br/>
		/// <c>POPFQ</c><br/>
		/// <br/>
		/// <c>o64 9D</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void popfq();
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void por(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void por(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EB /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void por(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>por instruction.<br/>
		/// <br/>
		/// <c>POR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void por(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>prefetch instruction.<br/>
		/// <br/>
		/// <c>PREFETCH m8</c><br/>
		/// <br/>
		/// <c>0F 0D /0</c><br/>
		/// <br/>
		/// <c>PREFETCHW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetch(AssemblerMemoryOperand dst);
		/// <summary>prefetchnta instruction.<br/>
		/// <br/>
		/// <c>PREFETCHNTA m8</c><br/>
		/// <br/>
		/// <c>0F 18 /0</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetchnta(AssemblerMemoryOperand dst);
		/// <summary>prefetcht0 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHT0 m8</c><br/>
		/// <br/>
		/// <c>0F 18 /1</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetcht0(AssemblerMemoryOperand dst);
		/// <summary>prefetcht1 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHT1 m8</c><br/>
		/// <br/>
		/// <c>0F 18 /2</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetcht1(AssemblerMemoryOperand dst);
		/// <summary>prefetcht2 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHT2 m8</c><br/>
		/// <br/>
		/// <c>0F 18 /3</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetcht2(AssemblerMemoryOperand dst);
		/// <summary>prefetchw instruction.<br/>
		/// <br/>
		/// <c>PREFETCHW m8</c><br/>
		/// <br/>
		/// <c>0F 0D /1</c><br/>
		/// <br/>
		/// <c>PREFETCHW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetchw(AssemblerMemoryOperand dst);
		/// <summary>prefetchwt1 instruction.<br/>
		/// <br/>
		/// <c>PREFETCHWT1 m8</c><br/>
		/// <br/>
		/// <c>0F 0D /2</c><br/>
		/// <br/>
		/// <c>PREFETCHWT1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void prefetchwt1(AssemblerMemoryOperand dst);
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psadbw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psadbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psadbw instruction.<br/>
		/// <br/>
		/// <c>PSADBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F6 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pshufb instruction.<br/>
		/// <br/>
		/// <c>PSHUFB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 00 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pshufd instruction.<br/>
		/// <br/>
		/// <c>PSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pshufhw instruction.<br/>
		/// <br/>
		/// <c>PSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F3 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>pshuflw instruction.<br/>
		/// <br/>
		/// <c>PSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>F2 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::int8_t imm);
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::uint8_t imm);
		/// <summary>pshufw instruction.<br/>
		/// <br/>
		/// <c>PSHUFW mm1, mm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 70 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psignb instruction.<br/>
		/// <br/>
		/// <c>PSIGNB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 08 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psignd instruction.<br/>
		/// <br/>
		/// <c>PSIGND xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 0A /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psignw instruction.<br/>
		/// <br/>
		/// <c>PSIGNW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 09 /r</c><br/>
		/// <br/>
		/// <c>SSSE3</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psignw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>pslld instruction.<br/>
		/// <br/>
		/// <c>PSLLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslld(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>pslldq instruction.<br/>
		/// <br/>
		/// <c>PSLLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /7 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslldq(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>pslldq instruction.<br/>
		/// <br/>
		/// <c>PSLLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /7 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pslldq(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psllq instruction.<br/>
		/// <br/>
		/// <c>PSLLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllq(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm1, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW mm1, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psllw instruction.<br/>
		/// <br/>
		/// <c>PSLLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /6 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psllw(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psmash instruction.<br/>
		/// <br/>
		/// <c>PSMASH</c><br/>
		/// <br/>
		/// <c>F3 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SEV-SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void psmash();
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psrad instruction.<br/>
		/// <br/>
		/// <c>PSRAD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrad(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psraw instruction.<br/>
		/// <br/>
		/// <c>PSRAW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /4 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psraw(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D2 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D2 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psrld instruction.<br/>
		/// <br/>
		/// <c>PSRLD xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 72 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrld(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psrldq instruction.<br/>
		/// <br/>
		/// <c>PSRLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /3 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrldq(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psrldq instruction.<br/>
		/// <br/>
		/// <c>PSRLDQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /3 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrldq(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D3 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D3 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psrlq instruction.<br/>
		/// <br/>
		/// <c>PSRLQ xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 73 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlq(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D1 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D1 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterMM dst, std::int8_t imm);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterXMM dst, std::int8_t imm);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW mm, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterMM dst, std::uint8_t imm);
		/// <summary>psrlw instruction.<br/>
		/// <br/>
		/// <c>PSRLW xmm1, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 71 /2 ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psrlw(AssemblerRegisterXMM dst, std::uint8_t imm);
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubb instruction.<br/>
		/// <br/>
		/// <c>PSUBB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FA /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FA /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubd instruction.<br/>
		/// <br/>
		/// <c>PSUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FA /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ mm1, mm2/m64</c><br/>
		/// <br/>
		/// <c>NP 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubq instruction.<br/>
		/// <br/>
		/// <c>PSUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F FB /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubsb instruction.<br/>
		/// <br/>
		/// <c>PSUBSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubsiw instruction.<br/>
		/// <br/>
		/// <c>PSUBSIW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 55 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void psubsiw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubsiw instruction.<br/>
		/// <br/>
		/// <c>PSUBSIW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 55 /r</c><br/>
		/// <br/>
		/// <c>CYRIX_EMMI</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void psubsiw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F E9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubsw instruction.<br/>
		/// <br/>
		/// <c>PSUBSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F E9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D8 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubusb instruction.<br/>
		/// <br/>
		/// <c>PSUBUSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D8 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F D9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubusw instruction.<br/>
		/// <br/>
		/// <c>PSUBUSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F D9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F F9 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>psubw instruction.<br/>
		/// <br/>
		/// <c>PSUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F F9 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void psubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>pswapd instruction.<br/>
		/// <br/>
		/// <c>PSWAPD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BB</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pswapd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pswapd instruction.<br/>
		/// <br/>
		/// <c>PSWAPD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>0F 0F /r BB</c><br/>
		/// <br/>
		/// <c>3DNOWEXT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pswapd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>ptest instruction.<br/>
		/// <br/>
		/// <c>PTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 17 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>ptest instruction.<br/>
		/// <br/>
		/// <c>PTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 38 17 /r</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>ptwrite instruction.<br/>
		/// <br/>
		/// <c>PTWRITE r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ptwrite(AssemblerRegister32 dst);
		/// <summary>ptwrite instruction.<br/>
		/// <br/>
		/// <c>PTWRITE r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ptwrite(AssemblerRegister64 dst);
		/// <summary>ptwrite instruction.<br/>
		/// <br/>
		/// <c>PTWRITE r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PTWRITE r/m32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /4</c><br/>
		/// <br/>
		/// <c>PTWRITE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ptwrite(AssemblerMemoryOperand dst);
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 68 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhbw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 68 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 68 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckhbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 68 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6A /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhdq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 6A /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhdq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckhdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6A /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckhqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpckhqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6D /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 69 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhwd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 69 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 69 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckhwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKHWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 69 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckhwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 60 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklbw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 60 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 60 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>punpcklbw instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 60 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 62 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckldq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 62 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 62 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckldq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>punpckldq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 62 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpckldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpcklqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpcklqdq instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLQDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 6C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 61 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklwd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 61 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD mm, mm/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 61 /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>punpcklwd instruction.<br/>
		/// <br/>
		/// <c>PUNPCKLWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 61 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void punpcklwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r16</c><br/>
		/// <br/>
		/// <c>o16 50+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void push(AssemblerRegister16 dst);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r32</c><br/>
		/// <br/>
		/// <c>o32 50+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void push(AssemblerRegister32 dst);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r64</c><br/>
		/// <br/>
		/// <c>o64 50+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void push(AssemblerRegister64 dst);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH FS</c><br/>
		/// <br/>
		/// <c>o64 0F A0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH GS</c><br/>
		/// <br/>
		/// <c>o64 0F A8</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH ES</c><br/>
		/// <br/>
		/// <c>o32 06</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH CS</c><br/>
		/// <br/>
		/// <c>o32 0E</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH SS</c><br/>
		/// <br/>
		/// <c>o32 16</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH DS</c><br/>
		/// <br/>
		/// <c>o32 1E</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH FS</c><br/>
		/// <br/>
		/// <c>o32 0F A0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH GS</c><br/>
		/// <br/>
		/// <c>o32 0F A8</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH ES</c><br/>
		/// <br/>
		/// <c>o16 06</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH CS</c><br/>
		/// <br/>
		/// <c>o16 0E</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH SS</c><br/>
		/// <br/>
		/// <c>o16 16</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH DS</c><br/>
		/// <br/>
		/// <c>o16 1E</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH FS</c><br/>
		/// <br/>
		/// <c>o16 0F A0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PUSH GS</c><br/>
		/// <br/>
		/// <c>o16 0F A8</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void push(AssemblerRegisterSegment dst);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH r/m64</c><br/>
		/// <br/>
		/// <c>o64 FF /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH r/m32</c><br/>
		/// <br/>
		/// <c>o32 FF /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH r/m16</c><br/>
		/// <br/>
		/// <c>o16 FF /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void push(AssemblerMemoryOperand dst);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH imm32</c><br/>
		/// <br/>
		/// <c>o64 68 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm32</c><br/>
		/// <br/>
		/// <c>o32 68 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm16</c><br/>
		/// <br/>
		/// <c>o16 68 iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o64 6A ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o32 6A ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o16 6A ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void push(std::int32_t imm);
		/// <summary>push instruction.<br/>
		/// <br/>
		/// <c>PUSH imm32</c><br/>
		/// <br/>
		/// <c>o32 68 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm16</c><br/>
		/// <br/>
		/// <c>o16 68 iw</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o32 6A ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>PUSH imm8</c><br/>
		/// <br/>
		/// <c>o16 6A ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void push(std::uint32_t imm);
		/// <summary>pusha instruction.<br/>
		/// <br/>
		/// <c>PUSHA</c><br/>
		/// <br/>
		/// <c>o16 60</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pusha();
		/// <summary>pushad instruction.<br/>
		/// <br/>
		/// <c>PUSHAD</c><br/>
		/// <br/>
		/// <c>o32 60</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pushad();
		/// <summary>pushf instruction.<br/>
		/// <br/>
		/// <c>PUSHF</c><br/>
		/// <br/>
		/// <c>o16 9C</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pushf();
		/// <summary>pushfd instruction.<br/>
		/// <br/>
		/// <c>PUSHFD</c><br/>
		/// <br/>
		/// <c>o32 9C</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pushfd();
		/// <summary>pushfq instruction.<br/>
		/// <br/>
		/// <c>PUSHFQ</c><br/>
		/// <br/>
		/// <c>o64 9C</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void pushfq();
		/// <summary>pvalidate instruction.<br/>
		/// <br/>
		/// <c>PVALIDATE</c><br/>
		/// <br/>
		/// <c>a64 F2 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SEV-SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>PVALIDATE</c><br/>
		/// <br/>
		/// <c>a32 F2 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SEV-SNP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>PVALIDATE</c><br/>
		/// <br/>
		/// <c>a16 F2 0F 01 FF</c><br/>
		/// <br/>
		/// <c>SEV-SNP</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void pvalidate();
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pxor(AssemblerRegisterMM dst, AssemblerRegisterMM src);
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR mm, mm/m64</c><br/>
		/// <br/>
		/// <c>NP 0F EF /r</c><br/>
		/// <br/>
		/// <c>MMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pxor(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
		/// <summary>pxor instruction.<br/>
		/// <br/>
		/// <c>PXOR xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F EF /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void pxor(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rcl(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rcl(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rcl(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>rcl instruction.<br/>
		/// <br/>
		/// <c>RCL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /2</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /2</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /2</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /2 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcl(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>rcpps instruction.<br/>
		/// <br/>
		/// <c>RCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>rcpps instruction.<br/>
		/// <br/>
		/// <c>RCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>rcpss instruction.<br/>
		/// <br/>
		/// <c>RCPSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>rcpss instruction.<br/>
		/// <br/>
		/// <c>RCPSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 53 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rcr(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rcr(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rcr(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>rcr instruction.<br/>
		/// <br/>
		/// <c>RCR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RCR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /3 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rcr(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>rdfsbase instruction.<br/>
		/// <br/>
		/// <c>RDFSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /0</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdfsbase(AssemblerRegister32 dst);
		/// <summary>rdfsbase instruction.<br/>
		/// <br/>
		/// <c>RDFSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /0</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdfsbase(AssemblerRegister64 dst);
		/// <summary>rdgsbase instruction.<br/>
		/// <br/>
		/// <c>RDGSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /1</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdgsbase(AssemblerRegister32 dst);
		/// <summary>rdgsbase instruction.<br/>
		/// <br/>
		/// <c>RDGSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /1</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdgsbase(AssemblerRegister64 dst);
		/// <summary>rdm instruction.<br/>
		/// <br/>
		/// <c>RDM</c><br/>
		/// <br/>
		/// <c>0F 3A</c><br/>
		/// <br/>
		/// <c>AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rdm();
		/// <summary>rdmsr instruction.<br/>
		/// <br/>
		/// <c>RDMSR</c><br/>
		/// <br/>
		/// <c>0F 32</c><br/>
		/// <br/>
		/// <c>MSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdmsr();
		/// <summary>rdpid instruction.<br/>
		/// <br/>
		/// <c>RDPID r32</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDPID</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rdpid(AssemblerRegister32 dst);
		/// <summary>rdpid instruction.<br/>
		/// <br/>
		/// <c>RDPID r64</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDPID</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdpid(AssemblerRegister64 dst);
		/// <summary>rdpkru instruction.<br/>
		/// <br/>
		/// <c>RDPKRU</c><br/>
		/// <br/>
		/// <c>NP 0F 01 EE</c><br/>
		/// <br/>
		/// <c>PKU</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdpkru();
		/// <summary>rdpmc instruction.<br/>
		/// <br/>
		/// <c>RDPMC</c><br/>
		/// <br/>
		/// <c>0F 33</c><br/>
		/// <br/>
		/// <c>Pentium MMX or later, or Pentium Pro or later</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdpmc();
		/// <summary>rdpru instruction.<br/>
		/// <br/>
		/// <c>RDPRU</c><br/>
		/// <br/>
		/// <c>0F 01 FD</c><br/>
		/// <br/>
		/// <c>RDPRU</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdpru();
		/// <summary>rdrand instruction.<br/>
		/// <br/>
		/// <c>RDRAND r16</c><br/>
		/// <br/>
		/// <c>o16 0F C7 /6</c><br/>
		/// <br/>
		/// <c>RDRAND</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdrand(AssemblerRegister16 dst);
		/// <summary>rdrand instruction.<br/>
		/// <br/>
		/// <c>RDRAND r32</c><br/>
		/// <br/>
		/// <c>o32 0F C7 /6</c><br/>
		/// <br/>
		/// <c>RDRAND</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdrand(AssemblerRegister32 dst);
		/// <summary>rdrand instruction.<br/>
		/// <br/>
		/// <c>RDRAND r64</c><br/>
		/// <br/>
		/// <c>o64 0F C7 /6</c><br/>
		/// <br/>
		/// <c>RDRAND</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdrand(AssemblerRegister64 dst);
		/// <summary>rdseed instruction.<br/>
		/// <br/>
		/// <c>RDSEED r16</c><br/>
		/// <br/>
		/// <c>o16 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDSEED</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdseed(AssemblerRegister16 dst);
		/// <summary>rdseed instruction.<br/>
		/// <br/>
		/// <c>RDSEED r32</c><br/>
		/// <br/>
		/// <c>o32 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDSEED</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdseed(AssemblerRegister32 dst);
		/// <summary>rdseed instruction.<br/>
		/// <br/>
		/// <c>RDSEED r64</c><br/>
		/// <br/>
		/// <c>o64 0F C7 /7</c><br/>
		/// <br/>
		/// <c>RDSEED</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdseed(AssemblerRegister64 dst);
		/// <summary>rdshr instruction.<br/>
		/// <br/>
		/// <c>RDSHR r/m32</c><br/>
		/// <br/>
		/// <c>0F 36 /0</c><br/>
		/// <br/>
		/// <c>Cyrix 6x86MX, M II, III</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rdshr(AssemblerRegister32 dst);
		/// <summary>rdshr instruction.<br/>
		/// <br/>
		/// <c>RDSHR r/m32</c><br/>
		/// <br/>
		/// <c>0F 36 /0</c><br/>
		/// <br/>
		/// <c>Cyrix 6x86MX, M II, III</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rdshr(AssemblerMemoryOperand dst);
		/// <summary>rdsspd instruction.<br/>
		/// <br/>
		/// <c>RDSSPD r32</c><br/>
		/// <br/>
		/// <c>F3 0F 1E /1</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdsspd(AssemblerRegister32 dst);
		/// <summary>rdsspq instruction.<br/>
		/// <br/>
		/// <c>RDSSPQ r64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F 1E /1</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rdsspq(AssemblerRegister64 dst);
		/// <summary>rdtsc instruction.<br/>
		/// <br/>
		/// <c>RDTSC</c><br/>
		/// <br/>
		/// <c>0F 31</c><br/>
		/// <br/>
		/// <c>TSC</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdtsc();
		/// <summary>rdtscp instruction.<br/>
		/// <br/>
		/// <c>RDTSCP</c><br/>
		/// <br/>
		/// <c>0F 01 F9</c><br/>
		/// <br/>
		/// <c>RDTSCP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdtscp();
		/// <summary>rdudbg instruction.<br/>
		/// <br/>
		/// <c>RDUDBG</c><br/>
		/// <br/>
		/// <c>0F 0E</c><br/>
		/// <br/>
		/// <c>UDBG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rdudbg();
		/// <summary>reservednop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f0d(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f0d(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f0d(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f0d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 0D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f18(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f18(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f18(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f18 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 18 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f19(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f19(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f19(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f19 instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 19 /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1a(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1a(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1a(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1a instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1A /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1b(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1b(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1b(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1b instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1B /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1c(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1c(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1c(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1c instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1C /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1d(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1d(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1d(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1d instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1D /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1e(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1e(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1e(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1e instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1E /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1f(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>reservednop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1f(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>reservednop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1f(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>reservednop_0f1f instruction.<br/>
		/// <br/>
		/// <c>RESERVEDNOP r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F 1F /r</c><br/>
		/// <br/>
		/// <c>CPUID.01H.EAX[Bits 11:8] = 0110B or 1111B</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>ret instruction.<br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o64 C3</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o32 C3</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>RET</c><br/>
		/// <br/>
		/// <c>o16 C3</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ret();
		/// <summary>ret instruction.<br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o64 C2 iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o32 C2 iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o16 C2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ret(std::int16_t imm);
		/// <summary>ret instruction.<br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o64 C2 iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o32 C2 iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>RET imm16</c><br/>
		/// <br/>
		/// <c>o16 C2 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ret(std::uint16_t imm);
		/// <summary>retf instruction.<br/>
		/// <br/>
		/// <c>RETF</c><br/>
		/// <br/>
		/// <c>o64 CB</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RETF</c><br/>
		/// <br/>
		/// <c>o32 CB</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RETF</c><br/>
		/// <br/>
		/// <c>o16 CB</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void retf();
		/// <summary>retf instruction.<br/>
		/// <br/>
		/// <c>RETF imm16</c><br/>
		/// <br/>
		/// <c>o64 CA iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RETF imm16</c><br/>
		/// <br/>
		/// <c>o32 CA iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RETF imm16</c><br/>
		/// <br/>
		/// <c>o16 CA iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void retf(std::int16_t imm);
		/// <summary>retf instruction.<br/>
		/// <br/>
		/// <c>RETF imm16</c><br/>
		/// <br/>
		/// <c>o64 CA iw</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>RETF imm16</c><br/>
		/// <br/>
		/// <c>o32 CA iw</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>RETF imm16</c><br/>
		/// <br/>
		/// <c>o16 CA iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void retf(std::uint16_t imm);
		/// <summary>rmpadjust instruction.<br/>
		/// <br/>
		/// <c>RMPADJUST</c><br/>
		/// <br/>
		/// <c>F3 0F 01 FE</c><br/>
		/// <br/>
		/// <c>SEV-SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rmpadjust();
		/// <summary>rmpupdate instruction.<br/>
		/// <br/>
		/// <c>RMPUPDATE</c><br/>
		/// <br/>
		/// <c>F2 0F 01 FE</c><br/>
		/// <br/>
		/// <c>SEV-SNP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rmpupdate();
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rol(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rol(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rol(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>rol instruction.<br/>
		/// <br/>
		/// <c>ROL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /0</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /0 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rol(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ror(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ror(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ror(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>ror instruction.<br/>
		/// <br/>
		/// <c>ROR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /1</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>ROR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /1 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ror(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r32, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W0 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>rorx instruction.<br/>
		/// <br/>
		/// <c>RORX r64, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F3A.W1 F0 /r ib</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>roundpd instruction.<br/>
		/// <br/>
		/// <c>ROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 09 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>roundps instruction.<br/>
		/// <br/>
		/// <c>ROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 08 /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>roundsd instruction.<br/>
		/// <br/>
		/// <c>ROUNDSD xmm1, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0B /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>roundss instruction.<br/>
		/// <br/>
		/// <c>ROUNDSS xmm1, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>66 0F 3A 0A /r ib</c><br/>
		/// <br/>
		/// <c>SSE4.1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>rsdc instruction.<br/>
		/// <br/>
		/// <c>RSDC Sreg, m80</c><br/>
		/// <br/>
		/// <c>0F 79 /r</c><br/>
		/// <br/>
		/// <c>Cyrix, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rsdc(AssemblerRegisterSegment dst, AssemblerMemoryOperand src);
		/// <summary>rsldt instruction.<br/>
		/// <br/>
		/// <c>RSLDT m80</c><br/>
		/// <br/>
		/// <c>0F 7B /0</c><br/>
		/// <br/>
		/// <c>Cyrix, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rsldt(AssemblerMemoryOperand dst);
		/// <summary>rsm instruction.<br/>
		/// <br/>
		/// <c>RSM</c><br/>
		/// <br/>
		/// <c>0F AA</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rsm();
		/// <summary>rsqrtps instruction.<br/>
		/// <br/>
		/// <c>RSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>rsqrtps instruction.<br/>
		/// <br/>
		/// <c>RSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>rsqrtss instruction.<br/>
		/// <br/>
		/// <c>RSQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>rsqrtss instruction.<br/>
		/// <br/>
		/// <c>RSQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 52 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rsqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>rstorssp instruction.<br/>
		/// <br/>
		/// <c>RSTORSSP m64</c><br/>
		/// <br/>
		/// <c>F3 0F 01 /5</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void rstorssp(AssemblerMemoryOperand dst);
		/// <summary>rsts instruction.<br/>
		/// <br/>
		/// <c>RSTS m80</c><br/>
		/// <br/>
		/// <c>0F 7D /0</c><br/>
		/// <br/>
		/// <c>Cyrix, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void rsts(AssemblerMemoryOperand dst);
		/// <summary>sahf instruction.<br/>
		/// <br/>
		/// <c>SAHF</c><br/>
		/// <br/>
		/// <c>9E</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sahf();
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sal(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sal(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sal(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>sal instruction.<br/>
		/// <br/>
		/// <c>SAL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /6</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /6</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /6 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sal(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>salc instruction.<br/>
		/// <br/>
		/// <c>SALC</c><br/>
		/// <br/>
		/// <c>D6</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void salc();
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sar(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sar(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sar(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>sar instruction.<br/>
		/// <br/>
		/// <c>SAR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /7</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /7</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /7</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SAR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /7 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sar(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sarx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sarx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sarx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>sarx instruction.<br/>
		/// <br/>
		/// <c>SARX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F3.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sarx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
		/// <summary>saveprevssp instruction.<br/>
		/// <br/>
		/// <c>SAVEPREVSSP</c><br/>
		/// <br/>
		/// <c>F3 0F 01 EA</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void saveprevssp();
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m8, r8</c><br/>
		/// <br/>
		/// <c>18 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m8, r8</c><br/>
		/// <br/>
		/// <c>18 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 19 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 19 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 19 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 19 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 19 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sbb(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 19 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sbb(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r8, r/m8</c><br/>
		/// <br/>
		/// <c>1A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 1B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 1B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 1B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sbb(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AL, imm8</c><br/>
		/// <br/>
		/// <c>1C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 1D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 1D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 1D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /3 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sbb(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /3 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /3 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AL, imm8</c><br/>
		/// <br/>
		/// <c>1C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 1D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 1D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>sbb instruction.<br/>
		/// <br/>
		/// <c>SBB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /3 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /3 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /3 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SBB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /3 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sbb(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>scasb instruction.<br/>
		/// <br/>
		/// <c>SCASB</c><br/>
		/// <br/>
		/// <c>AE</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void scasb();
		/// <summary>scasd instruction.<br/>
		/// <br/>
		/// <c>SCASD</c><br/>
		/// <br/>
		/// <c>o32 AF</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void scasd();
		/// <summary>scasq instruction.<br/>
		/// <br/>
		/// <c>SCASQ</c><br/>
		/// <br/>
		/// <c>o64 AF</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void scasq();
		/// <summary>scasw instruction.<br/>
		/// <br/>
		/// <c>SCASW</c><br/>
		/// <br/>
		/// <c>o16 AF</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void scasw();
		/// <summary>seamcall instruction.<br/>
		/// <br/>
		/// <c>SEAMCALL</c><br/>
		/// <br/>
		/// <c>66 0F 01 CF</c><br/>
		/// <br/>
		/// <c>TDX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void seamcall();
		/// <summary>seamops instruction.<br/>
		/// <br/>
		/// <c>SEAMOPS</c><br/>
		/// <br/>
		/// <c>66 0F 01 CE</c><br/>
		/// <br/>
		/// <c>TDX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void seamops();
		/// <summary>seamret instruction.<br/>
		/// <br/>
		/// <c>SEAMRET</c><br/>
		/// <br/>
		/// <c>66 0F 01 CD</c><br/>
		/// <br/>
		/// <c>TDX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void seamret();
		/// <summary>senduipi instruction.<br/>
		/// <br/>
		/// <c>SENDUIPI r64</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /6</c><br/>
		/// <br/>
		/// <c>UINTR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void senduipi(AssemblerRegister64 dst);
		/// <summary>serialize instruction.<br/>
		/// <br/>
		/// <c>SERIALIZE</c><br/>
		/// <br/>
		/// <c>NP 0F 01 E8</c><br/>
		/// <br/>
		/// <c>SERIALIZE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void serialize();
		/// <summary>seta instruction.<br/>
		/// <br/>
		/// <c>SETA r/m8</c><br/>
		/// <br/>
		/// <c>0F 97 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void seta(AssemblerRegister8 dst);
		/// <summary>seta instruction.<br/>
		/// <br/>
		/// <c>SETA r/m8</c><br/>
		/// <br/>
		/// <c>0F 97 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void seta(AssemblerMemoryOperand dst);
		/// <summary>setae instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setae(AssemblerRegister8 dst);
		/// <summary>setae instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setae(AssemblerMemoryOperand dst);
		/// <summary>setb instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setb(AssemblerRegister8 dst);
		/// <summary>setb instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setb(AssemblerMemoryOperand dst);
		/// <summary>setbe instruction.<br/>
		/// <br/>
		/// <c>SETBE r/m8</c><br/>
		/// <br/>
		/// <c>0F 96 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setbe(AssemblerRegister8 dst);
		/// <summary>setbe instruction.<br/>
		/// <br/>
		/// <c>SETBE r/m8</c><br/>
		/// <br/>
		/// <c>0F 96 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setbe(AssemblerMemoryOperand dst);
		/// <summary>setc instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setc(AssemblerRegister8 dst);
		/// <summary>setc instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setc(AssemblerMemoryOperand dst);
		/// <summary>sete instruction.<br/>
		/// <br/>
		/// <c>SETE r/m8</c><br/>
		/// <br/>
		/// <c>0F 94 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sete(AssemblerRegister8 dst);
		/// <summary>sete instruction.<br/>
		/// <br/>
		/// <c>SETE r/m8</c><br/>
		/// <br/>
		/// <c>0F 94 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sete(AssemblerMemoryOperand dst);
		/// <summary>setg instruction.<br/>
		/// <br/>
		/// <c>SETG r/m8</c><br/>
		/// <br/>
		/// <c>0F 9F /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setg(AssemblerRegister8 dst);
		/// <summary>setg instruction.<br/>
		/// <br/>
		/// <c>SETG r/m8</c><br/>
		/// <br/>
		/// <c>0F 9F /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setg(AssemblerMemoryOperand dst);
		/// <summary>setge instruction.<br/>
		/// <br/>
		/// <c>SETGE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setge(AssemblerRegister8 dst);
		/// <summary>setge instruction.<br/>
		/// <br/>
		/// <c>SETGE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setge(AssemblerMemoryOperand dst);
		/// <summary>setl instruction.<br/>
		/// <br/>
		/// <c>SETL r/m8</c><br/>
		/// <br/>
		/// <c>0F 9C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setl(AssemblerRegister8 dst);
		/// <summary>setl instruction.<br/>
		/// <br/>
		/// <c>SETL r/m8</c><br/>
		/// <br/>
		/// <c>0F 9C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setl(AssemblerMemoryOperand dst);
		/// <summary>setle instruction.<br/>
		/// <br/>
		/// <c>SETLE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setle(AssemblerRegister8 dst);
		/// <summary>setle instruction.<br/>
		/// <br/>
		/// <c>SETLE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setle(AssemblerMemoryOperand dst);
		/// <summary>setna instruction.<br/>
		/// <br/>
		/// <c>SETBE r/m8</c><br/>
		/// <br/>
		/// <c>0F 96 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setna(AssemblerRegister8 dst);
		/// <summary>setna instruction.<br/>
		/// <br/>
		/// <c>SETBE r/m8</c><br/>
		/// <br/>
		/// <c>0F 96 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setna(AssemblerMemoryOperand dst);
		/// <summary>setnae instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnae(AssemblerRegister8 dst);
		/// <summary>setnae instruction.<br/>
		/// <br/>
		/// <c>SETB r/m8</c><br/>
		/// <br/>
		/// <c>0F 92 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnae(AssemblerMemoryOperand dst);
		/// <summary>setnb instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnb(AssemblerRegister8 dst);
		/// <summary>setnb instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnb(AssemblerMemoryOperand dst);
		/// <summary>setnbe instruction.<br/>
		/// <br/>
		/// <c>SETA r/m8</c><br/>
		/// <br/>
		/// <c>0F 97 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnbe(AssemblerRegister8 dst);
		/// <summary>setnbe instruction.<br/>
		/// <br/>
		/// <c>SETA r/m8</c><br/>
		/// <br/>
		/// <c>0F 97 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnbe(AssemblerMemoryOperand dst);
		/// <summary>setnc instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnc(AssemblerRegister8 dst);
		/// <summary>setnc instruction.<br/>
		/// <br/>
		/// <c>SETAE r/m8</c><br/>
		/// <br/>
		/// <c>0F 93 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnc(AssemblerMemoryOperand dst);
		/// <summary>setne instruction.<br/>
		/// <br/>
		/// <c>SETNE r/m8</c><br/>
		/// <br/>
		/// <c>0F 95 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setne(AssemblerRegister8 dst);
		/// <summary>setne instruction.<br/>
		/// <br/>
		/// <c>SETNE r/m8</c><br/>
		/// <br/>
		/// <c>0F 95 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setne(AssemblerMemoryOperand dst);
		/// <summary>setng instruction.<br/>
		/// <br/>
		/// <c>SETLE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setng(AssemblerRegister8 dst);
		/// <summary>setng instruction.<br/>
		/// <br/>
		/// <c>SETLE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9E /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setng(AssemblerMemoryOperand dst);
		/// <summary>setnge instruction.<br/>
		/// <br/>
		/// <c>SETL r/m8</c><br/>
		/// <br/>
		/// <c>0F 9C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnge(AssemblerRegister8 dst);
		/// <summary>setnge instruction.<br/>
		/// <br/>
		/// <c>SETL r/m8</c><br/>
		/// <br/>
		/// <c>0F 9C /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnge(AssemblerMemoryOperand dst);
		/// <summary>setnl instruction.<br/>
		/// <br/>
		/// <c>SETGE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnl(AssemblerRegister8 dst);
		/// <summary>setnl instruction.<br/>
		/// <br/>
		/// <c>SETGE r/m8</c><br/>
		/// <br/>
		/// <c>0F 9D /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnl(AssemblerMemoryOperand dst);
		/// <summary>setnle instruction.<br/>
		/// <br/>
		/// <c>SETG r/m8</c><br/>
		/// <br/>
		/// <c>0F 9F /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnle(AssemblerRegister8 dst);
		/// <summary>setnle instruction.<br/>
		/// <br/>
		/// <c>SETG r/m8</c><br/>
		/// <br/>
		/// <c>0F 9F /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnle(AssemblerMemoryOperand dst);
		/// <summary>setno instruction.<br/>
		/// <br/>
		/// <c>SETNO r/m8</c><br/>
		/// <br/>
		/// <c>0F 91 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setno(AssemblerRegister8 dst);
		/// <summary>setno instruction.<br/>
		/// <br/>
		/// <c>SETNO r/m8</c><br/>
		/// <br/>
		/// <c>0F 91 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setno(AssemblerMemoryOperand dst);
		/// <summary>setnp instruction.<br/>
		/// <br/>
		/// <c>SETNP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnp(AssemblerRegister8 dst);
		/// <summary>setnp instruction.<br/>
		/// <br/>
		/// <c>SETNP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnp(AssemblerMemoryOperand dst);
		/// <summary>setns instruction.<br/>
		/// <br/>
		/// <c>SETNS r/m8</c><br/>
		/// <br/>
		/// <c>0F 99 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setns(AssemblerRegister8 dst);
		/// <summary>setns instruction.<br/>
		/// <br/>
		/// <c>SETNS r/m8</c><br/>
		/// <br/>
		/// <c>0F 99 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setns(AssemblerMemoryOperand dst);
		/// <summary>setnz instruction.<br/>
		/// <br/>
		/// <c>SETNE r/m8</c><br/>
		/// <br/>
		/// <c>0F 95 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnz(AssemblerRegister8 dst);
		/// <summary>setnz instruction.<br/>
		/// <br/>
		/// <c>SETNE r/m8</c><br/>
		/// <br/>
		/// <c>0F 95 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setnz(AssemblerMemoryOperand dst);
		/// <summary>seto instruction.<br/>
		/// <br/>
		/// <c>SETO r/m8</c><br/>
		/// <br/>
		/// <c>0F 90 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void seto(AssemblerRegister8 dst);
		/// <summary>seto instruction.<br/>
		/// <br/>
		/// <c>SETO r/m8</c><br/>
		/// <br/>
		/// <c>0F 90 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void seto(AssemblerMemoryOperand dst);
		/// <summary>setp instruction.<br/>
		/// <br/>
		/// <c>SETP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9A /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setp(AssemblerRegister8 dst);
		/// <summary>setp instruction.<br/>
		/// <br/>
		/// <c>SETP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9A /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setp(AssemblerMemoryOperand dst);
		/// <summary>setpe instruction.<br/>
		/// <br/>
		/// <c>SETP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9A /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setpe(AssemblerRegister8 dst);
		/// <summary>setpe instruction.<br/>
		/// <br/>
		/// <c>SETP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9A /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setpe(AssemblerMemoryOperand dst);
		/// <summary>setpo instruction.<br/>
		/// <br/>
		/// <c>SETNP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setpo(AssemblerRegister8 dst);
		/// <summary>setpo instruction.<br/>
		/// <br/>
		/// <c>SETNP r/m8</c><br/>
		/// <br/>
		/// <c>0F 9B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setpo(AssemblerMemoryOperand dst);
		/// <summary>sets instruction.<br/>
		/// <br/>
		/// <c>SETS r/m8</c><br/>
		/// <br/>
		/// <c>0F 98 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sets(AssemblerRegister8 dst);
		/// <summary>sets instruction.<br/>
		/// <br/>
		/// <c>SETS r/m8</c><br/>
		/// <br/>
		/// <c>0F 98 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sets(AssemblerMemoryOperand dst);
		/// <summary>setssbsy instruction.<br/>
		/// <br/>
		/// <c>SETSSBSY</c><br/>
		/// <br/>
		/// <c>F3 0F 01 E8</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setssbsy();
		/// <summary>setz instruction.<br/>
		/// <br/>
		/// <c>SETE r/m8</c><br/>
		/// <br/>
		/// <c>0F 94 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setz(AssemblerRegister8 dst);
		/// <summary>setz instruction.<br/>
		/// <br/>
		/// <c>SETE r/m8</c><br/>
		/// <br/>
		/// <c>0F 94 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void setz(AssemblerMemoryOperand dst);
		/// <summary>sfence instruction.<br/>
		/// <br/>
		/// <c>SFENCE</c><br/>
		/// <br/>
		/// <c>NP 0F AE F8</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sfence();
		/// <summary>sgdt instruction.<br/>
		/// <br/>
		/// <c>SGDT m</c><br/>
		/// <br/>
		/// <c>0F 01 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SGDT m</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>SGDT m</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /0</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void sgdt(AssemblerMemoryOperand dst);
		/// <summary>sha1msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C9 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sha1msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C9 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sha1msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CA /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sha1msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA1MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CA /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sha1nexte instruction.<br/>
		/// <br/>
		/// <c>SHA1NEXTE xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C8 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1nexte(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sha1nexte instruction.<br/>
		/// <br/>
		/// <c>SHA1NEXTE xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 C8 /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1nexte(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>sha1rnds4 instruction.<br/>
		/// <br/>
		/// <c>SHA1RNDS4 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F 3A CC /r ib</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>sha256msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CC /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha256msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sha256msg1 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG1 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CC /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha256msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sha256msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CD /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha256msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sha256msg2 instruction.<br/>
		/// <br/>
		/// <c>SHA256MSG2 xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CD /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha256msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sha256rnds2 instruction.<br/>
		/// <br/>
		/// <c>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CB /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha256rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sha256rnds2 instruction.<br/>
		/// <br/>
		/// <c>SHA256RNDS2 xmm1, xmm2/m128, &lt;XMM0&gt;</c><br/>
		/// <br/>
		/// <c>NP 0F 38 CB /r</c><br/>
		/// <br/>
		/// <c>SHA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sha256rnds2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shl(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shl(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shl(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>shl instruction.<br/>
		/// <br/>
		/// <c>SHL r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /4</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHL r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /4 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shl(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F A5 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>o64 0F A5 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>o64 0F A5 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, std::int8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::int8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, std::uint8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::uint8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>shld instruction.<br/>
		/// <br/>
		/// <c>SHLD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F A4 /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shlx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shlx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shlx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>shlx instruction.<br/>
		/// <br/>
		/// <c>SHLX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.66.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shlx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister16 dst, AssemblerRegister8 src);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister32 dst, AssemblerRegister8 src);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shr(AssemblerRegister64 dst, AssemblerRegister8 src);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, CL</c><br/>
		/// <br/>
		/// <c>o64 D3 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, CL</c><br/>
		/// <br/>
		/// <c>o32 D3 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, CL</c><br/>
		/// <br/>
		/// <c>o16 D3 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, CL</c><br/>
		/// <br/>
		/// <c>D2 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister16 dst, std::int8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister32 dst, std::int8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shr(AssemblerRegister64 dst, std::int8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerMemoryOperand dst, std::int8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister16 dst, std::uint8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerRegister32 dst, std::uint8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shr(AssemblerRegister64 dst, std::uint8_t imm);
		/// <summary>shr instruction.<br/>
		/// <br/>
		/// <c>SHR r/m64, 1</c><br/>
		/// <br/>
		/// <c>o64 D1 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, 1</c><br/>
		/// <br/>
		/// <c>o32 D1 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, 1</c><br/>
		/// <br/>
		/// <c>o16 D1 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 C1 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, 1</c><br/>
		/// <br/>
		/// <c>D0 /5</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SHR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>C0 /5 ib</c><br/>
		/// <br/>
		/// <c>186+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shr(AssemblerMemoryOperand dst, std::uint8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, CL</c><br/>
		/// <br/>
		/// <c>o16 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, CL</c><br/>
		/// <br/>
		/// <c>o32 0F AD /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>o64 0F AD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, CL</c><br/>
		/// <br/>
		/// <c>o64 0F AD /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, std::int8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::int8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::int8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::int8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, std::uint8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m16, r16, imm8</c><br/>
		/// <br/>
		/// <c>o16 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::uint8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m32, r32, imm8</c><br/>
		/// <br/>
		/// <c>o32 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::uint8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>shrd instruction.<br/>
		/// <br/>
		/// <c>SHRD r/m64, r64, imm8</c><br/>
		/// <br/>
		/// <c>o64 0F AC /r ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::uint8_t imm);
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r32a, r/m32, r32b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W0 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shrx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
		/// <summary>shrx instruction.<br/>
		/// <br/>
		/// <c>SHRX r64a, r/m64, r64b</c><br/>
		/// <br/>
		/// <c>VEX.LZ.F2.0F38.W1 F7 /r</c><br/>
		/// <br/>
		/// <c>BMI2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void shrx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>shufpd instruction.<br/>
		/// <br/>
		/// <c>SHUFPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>66 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>shufps instruction.<br/>
		/// <br/>
		/// <c>SHUFPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>NP 0F C6 /r ib</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>sidt instruction.<br/>
		/// <br/>
		/// <c>SIDT m</c><br/>
		/// <br/>
		/// <c>0F 01 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SIDT m</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c><br/>
		/// <br/>
		/// <c>SIDT m</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /1</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void sidt(AssemblerMemoryOperand dst);
		/// <summary>skinit instruction.<br/>
		/// <br/>
		/// <c>SKINIT</c><br/>
		/// <br/>
		/// <c>0F 01 DE</c><br/>
		/// <br/>
		/// <c>SKINIT or SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void skinit();
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /0</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sldt(AssemblerRegister16 dst);
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sldt(AssemblerRegister32 dst);
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 00 /0</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sldt(AssemblerRegister64 dst);
		/// <summary>sldt instruction.<br/>
		/// <br/>
		/// <c>SLDT r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /0</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SLDT r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /0</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sldt(AssemblerMemoryOperand dst);
		/// <summary>slwpcb instruction.<br/>
		/// <br/>
		/// <c>SLWPCB r32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 12 /1</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void slwpcb(AssemblerRegister32 dst);
		/// <summary>slwpcb instruction.<br/>
		/// <br/>
		/// <c>SLWPCB r64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 12 /1</c><br/>
		/// <br/>
		/// <c>LWP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void slwpcb(AssemblerRegister64 dst);
		/// <summary>smint instruction.<br/>
		/// <br/>
		/// <c>SMINT</c><br/>
		/// <br/>
		/// <c>0F 38</c><br/>
		/// <br/>
		/// <c>Cyrix 6x86MX+, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void smint();
		/// <summary>smint_0f7e instruction.<br/>
		/// <br/>
		/// <c>SMINT</c><br/>
		/// <br/>
		/// <c>0F 7E</c><br/>
		/// <br/>
		/// <c>Cyrix 6x86 or earlier</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void smint_0f7e();
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void smsw(AssemblerRegister16 dst);
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void smsw(AssemblerRegister32 dst);
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 01 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void smsw(AssemblerRegister64 dst);
		/// <summary>smsw instruction.<br/>
		/// <br/>
		/// <c>SMSW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 01 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SMSW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 01 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void smsw(AssemblerMemoryOperand dst);
		/// <summary>sqrtpd instruction.<br/>
		/// <br/>
		/// <c>SQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sqrtpd instruction.<br/>
		/// <br/>
		/// <c>SQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sqrtps instruction.<br/>
		/// <br/>
		/// <c>SQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sqrtps instruction.<br/>
		/// <br/>
		/// <c>SQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sqrtsd instruction.<br/>
		/// <br/>
		/// <c>SQRTSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sqrtsd instruction.<br/>
		/// <br/>
		/// <c>SQRTSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>sqrtss instruction.<br/>
		/// <br/>
		/// <c>SQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>sqrtss instruction.<br/>
		/// <br/>
		/// <c>SQRTSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 51 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>stac instruction.<br/>
		/// <br/>
		/// <c>STAC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 CB</c><br/>
		/// <br/>
		/// <c>SMAP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stac();
		/// <summary>stc instruction.<br/>
		/// <br/>
		/// <c>STC</c><br/>
		/// <br/>
		/// <c>F9</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stc();
		/// <summary>std instruction.<br/>
		/// <br/>
		/// <c>STD</c><br/>
		/// <br/>
		/// <c>FD</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void std();
		/// <summary>stgi instruction.<br/>
		/// <br/>
		/// <c>STGI</c><br/>
		/// <br/>
		/// <c>0F 01 DC</c><br/>
		/// <br/>
		/// <c>SKINIT or SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stgi();
		/// <summary>sti instruction.<br/>
		/// <br/>
		/// <c>STI</c><br/>
		/// <br/>
		/// <c>FB</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sti();
		/// <summary>stmxcsr instruction.<br/>
		/// <br/>
		/// <c>STMXCSR m32</c><br/>
		/// <br/>
		/// <c>NP 0F AE /3</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stmxcsr(AssemblerMemoryOperand dst);
		/// <summary>stosb instruction.<br/>
		/// <br/>
		/// <c>STOSB</c><br/>
		/// <br/>
		/// <c>AA</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stosb();
		/// <summary>stosd instruction.<br/>
		/// <br/>
		/// <c>STOSD</c><br/>
		/// <br/>
		/// <c>o32 AB</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stosd();
		/// <summary>stosq instruction.<br/>
		/// <br/>
		/// <c>STOSQ</c><br/>
		/// <br/>
		/// <c>o64 AB</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void stosq();
		/// <summary>stosw instruction.<br/>
		/// <br/>
		/// <c>STOSW</c><br/>
		/// <br/>
		/// <c>o16 AB</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void stosw();
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /1</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void str(AssemblerRegister16 dst);
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void str(AssemblerRegister32 dst);
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 00 /1</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void str(AssemblerRegister64 dst);
		/// <summary>str instruction.<br/>
		/// <br/>
		/// <c>STR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /1</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>STR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /1</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void str(AssemblerMemoryOperand dst);
		/// <summary>sttilecfg instruction.<br/>
		/// <br/>
		/// <c>STTILECFG m512</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 49 !(11):000:bbb</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sttilecfg(AssemblerMemoryOperand dst);
		/// <summary>stui instruction.<br/>
		/// <br/>
		/// <c>STUI</c><br/>
		/// <br/>
		/// <c>F3 0F 01 EF</c><br/>
		/// <br/>
		/// <c>UINTR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void stui();
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m8, r8</c><br/>
		/// <br/>
		/// <c>28 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m8, r8</c><br/>
		/// <br/>
		/// <c>28 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 29 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 29 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 29 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 29 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 29 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sub(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 29 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sub(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r8, r/m8</c><br/>
		/// <br/>
		/// <c>2A /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 2B /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 2B /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 2B /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sub(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AL, imm8</c><br/>
		/// <br/>
		/// <c>2C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 2D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 2D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 2D id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /5 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sub(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /5 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /5 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AL, imm8</c><br/>
		/// <br/>
		/// <c>2C ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 2D iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 2D id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>sub instruction.<br/>
		/// <br/>
		/// <c>SUB r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /5 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /5 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /5 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>SUB r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /5 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sub(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>subpd instruction.<br/>
		/// <br/>
		/// <c>SUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>subpd instruction.<br/>
		/// <br/>
		/// <c>SUBPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>subps instruction.<br/>
		/// <br/>
		/// <c>SUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>subps instruction.<br/>
		/// <br/>
		/// <c>SUBPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>subsd instruction.<br/>
		/// <br/>
		/// <c>SUBSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>subsd instruction.<br/>
		/// <br/>
		/// <c>SUBSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>F2 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>subss instruction.<br/>
		/// <br/>
		/// <c>SUBSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>subss instruction.<br/>
		/// <br/>
		/// <c>SUBSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>F3 0F 5C /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void subss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>svdc instruction.<br/>
		/// <br/>
		/// <c>SVDC m80, Sreg</c><br/>
		/// <br/>
		/// <c>0F 78 /r</c><br/>
		/// <br/>
		/// <c>Cyrix, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void svdc(AssemblerMemoryOperand dst, AssemblerRegisterSegment src);
		/// <summary>svldt instruction.<br/>
		/// <br/>
		/// <c>SVLDT m80</c><br/>
		/// <br/>
		/// <c>0F 7A /0</c><br/>
		/// <br/>
		/// <c>Cyrix, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void svldt(AssemblerMemoryOperand dst);
		/// <summary>svts instruction.<br/>
		/// <br/>
		/// <c>SVTS m80</c><br/>
		/// <br/>
		/// <c>0F 7C /0</c><br/>
		/// <br/>
		/// <c>Cyrix, AMD Geode GX/LX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void svts(AssemblerMemoryOperand dst);
		/// <summary>swapgs instruction.<br/>
		/// <br/>
		/// <c>SWAPGS</c><br/>
		/// <br/>
		/// <c>0F 01 F8</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void swapgs();
		/// <summary>syscall instruction.<br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>0F 05</c><br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void syscall();
		/// <summary>sysenter instruction.<br/>
		/// <br/>
		/// <c>SYSENTER</c><br/>
		/// <br/>
		/// <c>0F 34</c><br/>
		/// <br/>
		/// <c>SEP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sysenter();
		/// <summary>sysexit instruction.<br/>
		/// <br/>
		/// <c>SYSEXIT</c><br/>
		/// <br/>
		/// <c>0F 35</c><br/>
		/// <br/>
		/// <c>SEP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sysexit();
		/// <summary>sysexitq instruction.<br/>
		/// <br/>
		/// <c>SYSEXITQ</c><br/>
		/// <br/>
		/// <c>o64 0F 35</c><br/>
		/// <br/>
		/// <c>SEP</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sysexitq();
		/// <summary>sysret instruction.<br/>
		/// <br/>
		/// <c>SYSRET</c><br/>
		/// <br/>
		/// <c>0F 07</c><br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void sysret();
		/// <summary>sysretq instruction.<br/>
		/// <br/>
		/// <c>SYSRETQ</c><br/>
		/// <br/>
		/// <c>o64 0F 07</c><br/>
		/// <br/>
		/// <c>SYSCALL</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void sysretq();
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void t1mskc(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void t1mskc(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void t1mskc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>t1mskc instruction.<br/>
		/// <br/>
		/// <c>T1MSKC r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /7</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void t1mskc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>tdcall instruction.<br/>
		/// <br/>
		/// <c>TDCALL</c><br/>
		/// <br/>
		/// <c>66 0F 01 CC</c><br/>
		/// <br/>
		/// <c>TDX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tdcall();
		/// <summary>tdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>TDPBF16PS tmm1, tmm2, tmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F38.W0 5C 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AMX-BF16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tdpbf16ps(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
		/// <summary>tdpbssd instruction.<br/>
		/// <br/>
		/// <c>TDPBSSD tmm1, tmm2, tmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F38.W0 5E 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AMX-INT8</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tdpbssd(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
		/// <summary>tdpbsud instruction.<br/>
		/// <br/>
		/// <c>TDPBSUD tmm1, tmm2, tmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F38.W0 5E 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AMX-INT8</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tdpbsud(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
		/// <summary>tdpbusd instruction.<br/>
		/// <br/>
		/// <c>TDPBUSD tmm1, tmm2, tmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 5E 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AMX-INT8</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tdpbusd(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
		/// <summary>tdpbuud instruction.<br/>
		/// <br/>
		/// <c>TDPBUUD tmm1, tmm2, tmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.0F38.W0 5E 11:rrr:bbb</c><br/>
		/// <br/>
		/// <c>AMX-INT8</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tdpbuud(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m8, r8</c><br/>
		/// <br/>
		/// <c>84 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m8, r8</c><br/>
		/// <br/>
		/// <c>84 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 85 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 85 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 85 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 85 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 85 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void test(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 85 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void test(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AL, imm8</c><br/>
		/// <br/>
		/// <c>A8 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 A9 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 A9 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 A9 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 F7 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void test(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 F7 /0 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AL, imm8</c><br/>
		/// <br/>
		/// <c>A8 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 A9 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 A9 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>test instruction.<br/>
		/// <br/>
		/// <c>TEST r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 F7 /0 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 F7 /0 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>TEST r/m8, imm8</c><br/>
		/// <br/>
		/// <c>F6 /0 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void test(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>testui instruction.<br/>
		/// <br/>
		/// <c>TESTUI</c><br/>
		/// <br/>
		/// <c>F3 0F 01 ED</c><br/>
		/// <br/>
		/// <c>UINTR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void testui();
		/// <summary>tileloadd instruction.<br/>
		/// <br/>
		/// <c>TILELOADD tmm1, sibmem</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F38.W0 4B !(11):rrr:100</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tileloadd(AssemblerRegisterTMM dst, AssemblerMemoryOperand src);
		/// <summary>tileloaddt1 instruction.<br/>
		/// <br/>
		/// <c>TILELOADDT1 tmm1, sibmem</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 4B !(11):rrr:100</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tileloaddt1(AssemblerRegisterTMM dst, AssemblerMemoryOperand src);
		/// <summary>tilerelease instruction.<br/>
		/// <br/>
		/// <c>TILERELEASE</c><br/>
		/// <br/>
		/// <c>VEX.128.0F38.W0 49 C0</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tilerelease();
		/// <summary>tilestored instruction.<br/>
		/// <br/>
		/// <c>TILESTORED sibmem, tmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F38.W0 4B !(11):rrr:100</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tilestored(AssemblerMemoryOperand dst, AssemblerRegisterTMM src);
		/// <summary>tilezero instruction.<br/>
		/// <br/>
		/// <c>TILEZERO tmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F38.W0 49 11:rrr:000</c><br/>
		/// <br/>
		/// <c>AMX-TILE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tilezero(AssemblerRegisterTMM dst);
		/// <summary>tlbsync instruction.<br/>
		/// <br/>
		/// <c>TLBSYNC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 FF</c><br/>
		/// <br/>
		/// <c>INVLPGB</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tlbsync();
		/// <summary>tpause instruction.<br/>
		/// <br/>
		/// <c>TPAUSE r32, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>66 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tpause(AssemblerRegister32 dst);
		/// <summary>tpause instruction.<br/>
		/// <br/>
		/// <c>TPAUSE r64, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>66 o64 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tpause(AssemblerRegister64 dst);
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tzcnt(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tzcnt(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tzcnt(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 F3 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>tzcnt instruction.<br/>
		/// <br/>
		/// <c>TZCNT r64, r/m64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F BC /r</c><br/>
		/// <br/>
		/// <c>BMI1</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tzmsk(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tzmsk(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r32, r/m32</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W0 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void tzmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>tzmsk instruction.<br/>
		/// <br/>
		/// <c>TZMSK r64, r/m64</c><br/>
		/// <br/>
		/// <c>XOP.L0.X9.W1 01 /4</c><br/>
		/// <br/>
		/// <c>TBM</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void tzmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>ucomisd instruction.<br/>
		/// <br/>
		/// <c>UCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>ucomisd instruction.<br/>
		/// <br/>
		/// <c>UCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>66 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>ucomiss instruction.<br/>
		/// <br/>
		/// <c>UCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>ucomiss instruction.<br/>
		/// <br/>
		/// <c>UCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 2E /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0</c><br/>
		/// <br/>
		/// <c>0F FF</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud0();
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F FF /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud0(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F FF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud0(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F FF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ud0(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F FF /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud0(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F FF /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud0(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>ud0 instruction.<br/>
		/// <br/>
		/// <c>UD0 r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F FF /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ud0(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B9 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud1(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F B9 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud1(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F B9 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ud1(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F B9 /r</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud1(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F B9 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud1(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>ud1 instruction.<br/>
		/// <br/>
		/// <c>UD1 r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 0F B9 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void ud1(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>ud2 instruction.<br/>
		/// <br/>
		/// <c>UD2</c><br/>
		/// <br/>
		/// <c>0F 0B</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void ud2();
		/// <summary>uiret instruction.<br/>
		/// <br/>
		/// <c>UIRET</c><br/>
		/// <br/>
		/// <c>F3 0F 01 EC</c><br/>
		/// <br/>
		/// <c>UINTR</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void uiret();
		/// <summary>umonitor instruction.<br/>
		/// <br/>
		/// <c>UMONITOR r16</c><br/>
		/// <br/>
		/// <c>a16 F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umonitor(AssemblerRegister16 dst);
		/// <summary>umonitor instruction.<br/>
		/// <br/>
		/// <c>UMONITOR r32</c><br/>
		/// <br/>
		/// <c>a32 F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void umonitor(AssemblerRegister32 dst);
		/// <summary>umonitor instruction.<br/>
		/// <br/>
		/// <c>UMONITOR r64</c><br/>
		/// <br/>
		/// <c>a64 F3 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void umonitor(AssemblerRegister64 dst);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F 10 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F 10 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F 11 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r8, r/m8</c><br/>
		/// <br/>
		/// <c>0F 12 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 13 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>umov instruction.<br/>
		/// <br/>
		/// <c>UMOV r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F 13 /r</c><br/>
		/// <br/>
		/// <c>386/486</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void umov(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>umwait instruction.<br/>
		/// <br/>
		/// <c>UMWAIT r32, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>F2 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void umwait(AssemblerRegister32 dst);
		/// <summary>umwait instruction.<br/>
		/// <br/>
		/// <c>UMWAIT r64, &lt;edx&gt;, &lt;eax&gt;</c><br/>
		/// <br/>
		/// <c>F2 o64 0F AE /6</c><br/>
		/// <br/>
		/// <c>WAITPKG</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void umwait(AssemblerRegister64 dst);
		/// <summary>unpckhpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>unpckhpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpckhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>unpckhps instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>unpckhps instruction.<br/>
		/// <br/>
		/// <c>UNPCKHPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 15 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpckhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>unpcklpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>unpcklpd instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpcklpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>unpcklps instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>unpcklps instruction.<br/>
		/// <br/>
		/// <c>UNPCKLPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 14 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void unpcklps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>v4fmaddps instruction.<br/>
		/// <br/>
		/// <c>V4FMADDPS zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void v4fmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>v4fmaddss instruction.<br/>
		/// <br/>
		/// <c>V4FMADDSS xmm1 {k1}{z}, xmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void v4fmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>v4fnmaddps instruction.<br/>
		/// <br/>
		/// <c>V4FNMADDPS zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void v4fnmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>v4fnmaddss instruction.<br/>
		/// <br/>
		/// <c>V4FNMADDSS xmm1 {k1}{z}, xmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512_4FMAPS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void v4fnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddpd instruction.<br/>
		/// <br/>
		/// <c>VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddph instruction.<br/>
		/// <br/>
		/// <c>VADDPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddph instruction.<br/>
		/// <br/>
		/// <c>VADDPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaddph instruction.<br/>
		/// <br/>
		/// <c>VADDPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaddph instruction.<br/>
		/// <br/>
		/// <c>VADDPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddph instruction.<br/>
		/// <br/>
		/// <c>VADDPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddph instruction.<br/>
		/// <br/>
		/// <c>VADDPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddps instruction.<br/>
		/// <br/>
		/// <c>VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddsd instruction.<br/>
		/// <br/>
		/// <c>VADDSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddsd instruction.<br/>
		/// <br/>
		/// <c>VADDSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddsh instruction.<br/>
		/// <br/>
		/// <c>VADDSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddsh instruction.<br/>
		/// <br/>
		/// <c>VADDSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddss instruction.<br/>
		/// <br/>
		/// <c>VADDSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddss instruction.<br/>
		/// <br/>
		/// <c>VADDSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 58 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaddsubps instruction.<br/>
		/// <br/>
		/// <c>VADDSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG D0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDEC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesdec instruction.<br/>
		/// <br/>
		/// <c>VAESDEC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESDECLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesdeclast instruction.<br/>
		/// <br/>
		/// <c>VAESDECLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENC ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesenc instruction.<br/>
		/// <br/>
		/// <c>VAESENC zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VAESENCLAST ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesenclast instruction.<br/>
		/// <br/>
		/// <c>VAESENCLAST zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512F and VAES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vaesimc instruction.<br/>
		/// <br/>
		/// <c>VAESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vaesimc instruction.<br/>
		/// <br/>
		/// <c>VAESIMC xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vaeskeygenassist instruction.<br/>
		/// <br/>
		/// <c>VAESKEYGENASSIST xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG DF /r ib</c><br/>
		/// <br/>
		/// <c>AES and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>valignd instruction.<br/>
		/// <br/>
		/// <c>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>valignq instruction.<br/>
		/// <br/>
		/// <c>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 03 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandnpd instruction.<br/>
		/// <br/>
		/// <c>VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 55 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandnps instruction.<br/>
		/// <br/>
		/// <c>VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandpd instruction.<br/>
		/// <br/>
		/// <c>VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 54 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vandps instruction.<br/>
		/// <br/>
		/// <c>VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendmpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendmps instruction.<br/>
		/// <br/>
		/// <c>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vblendpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0D /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vblendps instruction.<br/>
		/// <br/>
		/// <c>VBLENDPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0C /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vblendvpd instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4B /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vblendvps instruction.<br/>
		/// <br/>
		/// <c>VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4A /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vbroadcastf128 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF128 ymm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 1A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X4 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X4 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf32x8 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF32X8 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF64X2 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF64X2 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastf64x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTF64X4 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastf64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti128 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI128 ymm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti32x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X4 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti32x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X4 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti32x8 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI32X8 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI64X2 ymm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti64x2 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI64X2 zmm1 {k1}{z}, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcasti64x4 instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTI64X4 zmm1 {k1}{z}, m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcasti64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastsd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastsd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSD ymm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 19 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastsd instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 19 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastss(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastss(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS xmm1, m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VBROADCASTSS ymm1, m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastss(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vbroadcastss instruction.<br/>
		/// <br/>
		/// <c>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 18 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vbroadcastss(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ossh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ossh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_ussh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_ussh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpeqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpeqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalse_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpfalse_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_ossh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_ossh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalse_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalse_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalseph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalseph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpfalseph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalseps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpfalsess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpfalsess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpge_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpge_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpge_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpge_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpgtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpgtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmple_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmple_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmple_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmple_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmplt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmplt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmplt_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_oqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ospd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ossd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ossh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ossh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_osss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_ussh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_ussh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneq_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpneqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpneqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnge_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnge_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnge_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnge_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngeps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpngtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpngtss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnle_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnle_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnle_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnle_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnleps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnless instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnlt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnlt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnlt_uqss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpnltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpnltss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_ssh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_ssh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmppd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmpss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_uspd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrue_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmptrue_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_ussd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_ussh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_ussh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrue_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrue_usss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruepd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrueph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrueph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmptrueph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptrueps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruesd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruesh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmptruess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmptruess instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_spd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpunord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_ssd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_ssh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_ssh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunord_sss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordpd instruction.<br/>
		/// <br/>
		/// <c>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpunordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordph instruction.<br/>
		/// <br/>
		/// <c>VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordps instruction.<br/>
		/// <br/>
		/// <c>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordsd instruction.<br/>
		/// <br/>
		/// <c>VCMPSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordsh instruction.<br/>
		/// <br/>
		/// <c>VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F3A.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcmpunordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcmpunordss instruction.<br/>
		/// <br/>
		/// <c>VCMPSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG C2 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcomisd instruction.<br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcomisd instruction.<br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcomish instruction.<br/>
		/// <br/>
		/// <c>VCOMISH xmm1, xmm2/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP5.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcomish(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcomish instruction.<br/>
		/// <br/>
		/// <c>VCOMISH xmm1, xmm2/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP5.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcomish(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcomiss instruction.<br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcomiss instruction.<br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompresspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompresspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompresspd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcompresspd instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompressps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompressps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompressps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcompressps instruction.<br/>
		/// <br/>
		/// <c>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtdq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtdq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtdq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2phy instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtdq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtne2ps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtneps2bf16 instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtneps2bf16x instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16x(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtneps2bf16y instruction.<br/>
		/// <br/>
		/// <c>VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtneps2bf16y(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2dqx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2dqy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtpd2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtpd2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtpd2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2phy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2phz instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2psy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2udqx instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2udqy instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2dq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2dq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PD xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PD ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PD zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2pd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PD xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PD ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PD zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2ps(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2ps(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PSX xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2psx(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PSX ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2psx(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PSX zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2psx(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtph2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PSX xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PSX ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2psx(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2PSX zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2psx(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2qq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2udq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2udq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uqq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2uw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2w(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2w(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtph2w(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>F16C</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vcvtps2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1D /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vcvtps2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phx(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phx(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtps2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phx(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtps2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phx(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2phxx instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phxx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2phxy instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2phxy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2phy instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2phz instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtqq2psy instruction.<br/>
		/// <br/>
		/// <c>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsd2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SH xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtsd2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SH xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.MAP5.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtsd2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r32, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSD2USI r64, xmm1/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsh2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SD xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtsh2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SD xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SI r32, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SI r64, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsh2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SI r32, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SI r64, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsh2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsh2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SS xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtsh2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2SS xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP6.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2USI r32, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2USI r64, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsh2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2USI r32, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsh2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSH2USI r64, xmm1/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsh2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
		/// <summary>vcvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
		/// <summary>vcvtsi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SD xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtsi2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SH xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
		/// <summary>vcvtsi2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SH xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
		/// <summary>vcvtsi2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SH xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SH xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
		/// <summary>vcvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
		/// <summary>vcvtsi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtss2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtss2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtss2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vcvtss2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP5.W0 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTSS2SI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r32, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTSS2USI r64, xmm1/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2dqx instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2dqy instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2udqx instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2udqy instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttpd2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2dq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2dq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP5.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2qq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2udq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2udq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uqq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2uw instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2uw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2w(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2w(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttph2w instruction.<br/>
		/// <br/>
		/// <c>VCVTTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP5.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttph2w(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 5B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2dq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 5B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2qq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2udq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttps2uqq instruction.<br/>
		/// <br/>
		/// <c>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsd2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSD2SI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r32, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsd2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSD2USI r64, xmm1/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2SI r32, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsh2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2SI r64, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsh2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2SI r32, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsh2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsh2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2SI r64, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsh2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2USI r32, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsh2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2USI r64, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsh2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2USI r32, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttsh2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttsh2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSH2USI r64, xmm1/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttsh2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttss2si instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTTSS2SI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r32, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvttss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vcvttss2usi instruction.<br/>
		/// <br/>
		/// <c>VCVTTSS2USI r64, xmm1/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvttss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtudq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtudq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtudq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2phy instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtudq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2pd instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtuqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtuqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtuqq2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2phx instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2phy instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2phz instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2ps instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2psx instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuqq2psy instruction.<br/>
		/// <br/>
		/// <c>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtusi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
		/// <summary>vcvtusi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
		/// <summary>vcvtusi2sd instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUSI2SD xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtusi2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SH xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
		/// <summary>vcvtusi2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SH xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
		/// <summary>vcvtusi2sh instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SH xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUSI2SH xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtusi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
		/// <summary>vcvtusi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
		/// <summary>vcvtusi2ss instruction.<br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W1 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VCVTUSI2SS xmm1, xmm2, r/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vcvtuw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuw2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtuw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuw2ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtuw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuw2ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtuw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuw2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuw2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtuw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTUW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtuw2ph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtw2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vcvtw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtw2ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vcvtw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtw2ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vcvtw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtw2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtw2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vcvtw2ph instruction.<br/>
		/// <br/>
		/// <c>VCVTW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP5.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vcvtw2ph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vdbpsadbw instruction.<br/>
		/// <br/>
		/// <c>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivpd instruction.<br/>
		/// <br/>
		/// <c>VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivph instruction.<br/>
		/// <br/>
		/// <c>VDIVPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdivph instruction.<br/>
		/// <br/>
		/// <c>VDIVPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vdivph instruction.<br/>
		/// <br/>
		/// <c>VDIVPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vdivph instruction.<br/>
		/// <br/>
		/// <c>VDIVPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivph instruction.<br/>
		/// <br/>
		/// <c>VDIVPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivph instruction.<br/>
		/// <br/>
		/// <c>VDIVPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivps instruction.<br/>
		/// <br/>
		/// <c>VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivsd instruction.<br/>
		/// <br/>
		/// <c>VDIVSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdivsd instruction.<br/>
		/// <br/>
		/// <c>VDIVSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivsh instruction.<br/>
		/// <br/>
		/// <c>VDIVSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdivsh instruction.<br/>
		/// <br/>
		/// <c>VDIVSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdivss instruction.<br/>
		/// <br/>
		/// <c>VDIVSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdivss instruction.<br/>
		/// <br/>
		/// <c>VDIVSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdpbf16ps instruction.<br/>
		/// <br/>
		/// <c>VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_BF16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vdppd instruction.<br/>
		/// <br/>
		/// <c>VDPPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 41 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vdpps instruction.<br/>
		/// <br/>
		/// <c>VDPPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 40 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void verr(AssemblerRegister16 dst);
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void verr(AssemblerRegister32 dst);
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 00 /4</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void verr(AssemblerRegister64 dst);
		/// <summary>verr instruction.<br/>
		/// <br/>
		/// <c>VERR r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /4</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VERR r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /4</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void verr(AssemblerMemoryOperand dst);
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /5</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void verw(AssemblerRegister16 dst);
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void verw(AssemblerRegister32 dst);
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r64/m16</c><br/>
		/// <br/>
		/// <c>o64 0F 00 /5</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void verw(AssemblerRegister64 dst);
		/// <summary>verw instruction.<br/>
		/// <br/>
		/// <c>VERW r32/m16</c><br/>
		/// <br/>
		/// <c>o32 0F 00 /5</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VERW r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F 00 /5</c><br/>
		/// <br/>
		/// <c>286+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void verw(AssemblerMemoryOperand dst);
		/// <summary>vexp2pd instruction.<br/>
		/// <br/>
		/// <c>VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexp2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vexp2pd instruction.<br/>
		/// <br/>
		/// <c>VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexp2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vexp2ps instruction.<br/>
		/// <br/>
		/// <c>VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexp2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vexp2ps instruction.<br/>
		/// <br/>
		/// <c>VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C8 /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexp2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vexpandpd instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vexpandps instruction.<br/>
		/// <br/>
		/// <c>VEXPANDPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 88 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vexpandps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextractf128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 19 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractf64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextracti128 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI128 xmm1/m128, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti32x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti32x8 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti64x2 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 39 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextracti64x4 instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r64/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vextractps instruction.<br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VEXTRACTPS r/m32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 17 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfcmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfcmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfcmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfcmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmaddcsh instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.MAP6.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfcmaddcsh instruction.<br/>
		/// <br/>
		/// <c>VFCMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.MAP6.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmulcph instruction.<br/>
		/// <br/>
		/// <c>VFCMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfcmulcph instruction.<br/>
		/// <br/>
		/// <c>VFCMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfcmulcph instruction.<br/>
		/// <br/>
		/// <c>VFCMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfcmulcph instruction.<br/>
		/// <br/>
		/// <c>VFCMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmulcph instruction.<br/>
		/// <br/>
		/// <c>VFCMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmulcph instruction.<br/>
		/// <br/>
		/// <c>VFCMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfcmulcsh instruction.<br/>
		/// <br/>
		/// <c>VFCMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.MAP6.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfcmulcsh instruction.<br/>
		/// <br/>
		/// <c>VFCMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.MAP6.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfcmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmpd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmps instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 54 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vfixupimmsd instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vfixupimmss instruction.<br/>
		/// <br/>
		/// <c>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 55 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 98 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132sh instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd132sh instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 99 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213sh instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd213sh instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 A9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B8 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231sh instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd231sh instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 B9 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddcph instruction.<br/>
		/// <br/>
		/// <c>VFMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP6.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddcsh instruction.<br/>
		/// <br/>
		/// <c>VFMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP6.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddcsh instruction.<br/>
		/// <br/>
		/// <c>VFMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP6.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 69 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddps instruction.<br/>
		/// <br/>
		/// <c>VFMADDPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 68 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddss instruction.<br/>
		/// <br/>
		/// <c>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddss instruction.<br/>
		/// <br/>
		/// <c>VFMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddss instruction.<br/>
		/// <br/>
		/// <c>VFMADDSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 96 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmaddsubps instruction.<br/>
		/// <br/>
		/// <c>VFMADDSUBPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132sh instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub132sh instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213sh instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub213sh instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231sh instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub231sh instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 97 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 B7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubaddpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubaddps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBADDPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 5E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 6D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubps instruction.<br/>
		/// <br/>
		/// <c>VFMSUBPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 6C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmsubss instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubss instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 6E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfmsubss instruction.<br/>
		/// <br/>
		/// <c>VFMSUBSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 6E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfmulcph instruction.<br/>
		/// <br/>
		/// <c>VFMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmulcph instruction.<br/>
		/// <br/>
		/// <c>VFMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfmulcph instruction.<br/>
		/// <br/>
		/// <c>VFMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfmulcph instruction.<br/>
		/// <br/>
		/// <c>VFMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmulcph instruction.<br/>
		/// <br/>
		/// <c>VFMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmulcph instruction.<br/>
		/// <br/>
		/// <c>VFMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.MAP6.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfmulcsh instruction.<br/>
		/// <br/>
		/// <c>VFMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP6.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfmulcsh instruction.<br/>
		/// <br/>
		/// <c>VFMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP6.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132sh instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd132sh instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213sh instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd213sh instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BC /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231sh instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd231sh instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmadd231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BD /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmaddpd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 79 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmaddps instruction.<br/>
		/// <br/>
		/// <c>VFNMADDPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 78 /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddsd instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7B /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmaddss instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddss instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmaddss instruction.<br/>
		/// <br/>
		/// <c>VFNMADDSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7A /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 9E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub132sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132sh instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub132sh instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub132ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 9F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 AE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub213sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213sh instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub213sh instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub213ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 AF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231pd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ph instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 BE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub231sd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231sh instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub231sh instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vfnmsub231ss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>FMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 BF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmsubpd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPD ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 7D /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmsubps instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBPS ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 7C /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubsd instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSD xmm1, xmm2, xmm3, xmm4/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7F /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfnmsubss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W0 7E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vfnmsubss instruction.<br/>
		/// <br/>
		/// <c>VFNMSUBSS xmm1, xmm2, xmm3, xmm4/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.W1 7E /r /is4</c><br/>
		/// <br/>
		/// <c>FMA4</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vfpclasspd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasspdx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspdx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasspdy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspdy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasspdz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspdz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vfpclassph instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassph(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclassphx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassphx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclassphx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassphx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclassphy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassphy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclassphy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassphy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclassphz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassphz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclassphz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassphz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vfpclassps instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasspsx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspsx instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasspsy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspsy instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasspsz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasspsz instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 66 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfpclasssd instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSD k2 {k1}, xmm2/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclasssh instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSH k1 {k2}, xmm2/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vfpclasssh instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSH k1 {k2}, xmm2/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssh(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclasssh instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSH k1 {k2}, xmm2/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfpclasssh instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSH k1 {k2}, xmm2/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclasssh(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vfpclassss instruction.<br/>
		/// <br/>
		/// <c>VFPCLASSSS k2 {k1}, xmm2/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 67 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vfrczpd instruction.<br/>
		/// <br/>
		/// <c>VFRCZPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 81 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vfrczps instruction.<br/>
		/// <br/>
		/// <c>VFRCZPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X9.W0 80 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vfrczsd instruction.<br/>
		/// <br/>
		/// <c>VFRCZSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 83 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vfrczsd instruction.<br/>
		/// <br/>
		/// <c>VFRCZSD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 83 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vfrczss instruction.<br/>
		/// <br/>
		/// <c>VFRCZSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 82 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vfrczss instruction.<br/>
		/// <br/>
		/// <c>VFRCZSS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 82 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vfrczss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD ymm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD zmm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vgatherdpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPD ymm1, vm32x, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS ymm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS zmm1 {k1}, vm32z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 92 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vgatherdps instruction.<br/>
		/// <br/>
		/// <c>VGATHERDPS ymm1, vm32y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 92 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
		/// <summary>vgatherpf0dpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf0dpd(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf0dps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf0dps(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf0qpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf0qpd(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf0qps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF0QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf0qps(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf1dpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf1dpd(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf1dps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf1dps(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf1qpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf1qpd(AssemblerMemoryOperand dst);
		/// <summary>vgatherpf1qps instruction.<br/>
		/// <br/>
		/// <c>VGATHERPF1QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherpf1qps(AssemblerMemoryOperand dst);
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD ymm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD zmm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vgatherqpd instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPD ymm1, vm64y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
		/// <summary>vgatherqps instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherqps instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPS ymm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 93 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgatherqps instruction.<br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGATHERQPS xmm1, vm64y, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 93 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexppd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexppd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexppd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexppd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpph instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vgetexpph instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vgetexpph instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vgetexpph instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpph instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpph instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpps instruction.<br/>
		/// <br/>
		/// <c>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 42 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vgetexpsd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vgetexpsd instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vgetexpsh instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vgetexpsh instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vgetexpss instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vgetexpss instruction.<br/>
		/// <br/>
		/// <c>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 43 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantpd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantph instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantps instruction.<br/>
		/// <br/>
		/// <c>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 26 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vgetmantsd instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgetmantsh instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vgetmantsh instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgetmantsh instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vgetmantsh instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vgetmantss instruction.<br/>
		/// <br/>
		/// <c>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 27 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8affineinvqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CF /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8affineqb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 CE /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vgf2p8mulb instruction.<br/>
		/// <br/>
		/// <c>VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CF /r</c><br/>
		/// <br/>
		/// <c>AVX512F and GFNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhaddpd instruction.<br/>
		/// <br/>
		/// <c>VHADDPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhaddps instruction.<br/>
		/// <br/>
		/// <c>VHADDPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhsubpd instruction.<br/>
		/// <br/>
		/// <c>VHSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vhsubps instruction.<br/>
		/// <br/>
		/// <c>VHSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 7D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinsertf128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertf32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vinsertf32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertf64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 18 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vinsertf64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinserti128 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti32x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vinserti32x8 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti64x2 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 38 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vinserti64x4 instruction.<br/>
		/// <br/>
		/// <c>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vinsertps instruction.<br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VINSERTPS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 21 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vlddqu instruction.<br/>
		/// <br/>
		/// <c>VLDDQU xmm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG F0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vlddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vlddqu instruction.<br/>
		/// <br/>
		/// <c>VLDDQU ymm1, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG F0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vlddqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vldmxcsr instruction.<br/>
		/// <br/>
		/// <c>VLDMXCSR m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F.WIG AE /2</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vldmxcsr(AssemblerMemoryOperand dst);
		/// <summary>vmaskmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVDQU xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaskmovpd instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPD ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaskmovps instruction.<br/>
		/// <br/>
		/// <c>VMASKMOVPS ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaskmovps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxpd instruction.<br/>
		/// <br/>
		/// <c>VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxph instruction.<br/>
		/// <br/>
		/// <c>VMAXPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaxph instruction.<br/>
		/// <br/>
		/// <c>VMAXPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmaxph instruction.<br/>
		/// <br/>
		/// <c>VMAXPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vmaxph instruction.<br/>
		/// <br/>
		/// <c>VMAXPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxph instruction.<br/>
		/// <br/>
		/// <c>VMAXPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxph instruction.<br/>
		/// <br/>
		/// <c>VMAXPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxps instruction.<br/>
		/// <br/>
		/// <c>VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxsd instruction.<br/>
		/// <br/>
		/// <c>VMAXSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaxsd instruction.<br/>
		/// <br/>
		/// <c>VMAXSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxsh instruction.<br/>
		/// <br/>
		/// <c>VMAXSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaxsh instruction.<br/>
		/// <br/>
		/// <c>VMAXSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmaxss instruction.<br/>
		/// <br/>
		/// <c>VMAXSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmaxss instruction.<br/>
		/// <br/>
		/// <c>VMAXSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmcall instruction.<br/>
		/// <br/>
		/// <c>VMCALL</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C1</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmcall();
		/// <summary>vmclear instruction.<br/>
		/// <br/>
		/// <c>VMCLEAR m64</c><br/>
		/// <br/>
		/// <c>66 0F C7 /6</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmclear(AssemblerMemoryOperand dst);
		/// <summary>vmfunc instruction.<br/>
		/// <br/>
		/// <c>VMFUNC</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D4</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmfunc();
		/// <summary>vmgexit instruction.<br/>
		/// <br/>
		/// <c>VMGEXIT</c><br/>
		/// <br/>
		/// <c>F3 0F 01 D9</c><br/>
		/// <br/>
		/// <c>SEV-ES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmgexit();
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminpd instruction.<br/>
		/// <br/>
		/// <c>VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminph instruction.<br/>
		/// <br/>
		/// <c>VMINPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vminph instruction.<br/>
		/// <br/>
		/// <c>VMINPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vminph instruction.<br/>
		/// <br/>
		/// <c>VMINPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vminph instruction.<br/>
		/// <br/>
		/// <c>VMINPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminph instruction.<br/>
		/// <br/>
		/// <c>VMINPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminph instruction.<br/>
		/// <br/>
		/// <c>VMINPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminps instruction.<br/>
		/// <br/>
		/// <c>VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminsd instruction.<br/>
		/// <br/>
		/// <c>VMINSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vminsd instruction.<br/>
		/// <br/>
		/// <c>VMINSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminsh instruction.<br/>
		/// <br/>
		/// <c>VMINSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vminsh instruction.<br/>
		/// <br/>
		/// <c>VMINSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vminss instruction.<br/>
		/// <br/>
		/// <c>VMINSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vminss instruction.<br/>
		/// <br/>
		/// <c>VMINSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmlaunch instruction.<br/>
		/// <br/>
		/// <c>VMLAUNCH</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C2</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmlaunch();
		/// <summary>vmload instruction.<br/>
		/// <br/>
		/// <c>VMLOAD</c><br/>
		/// <br/>
		/// <c>a64 0F 01 DA</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMLOAD</c><br/>
		/// <br/>
		/// <c>a32 0F 01 DA</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMLOAD</c><br/>
		/// <br/>
		/// <c>a16 0F 01 DA</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmload();
		/// <summary>vmmcall instruction.<br/>
		/// <br/>
		/// <c>VMMCALL</c><br/>
		/// <br/>
		/// <c>0F 01 D9</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmmcall();
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovapd instruction.<br/>
		/// <br/>
		/// <c>VMOVAPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovapd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVAPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovaps instruction.<br/>
		/// <br/>
		/// <c>VMOVAPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovaps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD r/m32, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovd instruction.<br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVD xmm1, r/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovddup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovddup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVDDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovddup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovddup instruction.<br/>
		/// <br/>
		/// <c>VMOVDDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovddup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqa64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqa64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 7F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 6F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu16 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu16(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu32 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu64 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W1 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovdqu8 instruction.<br/>
		/// <br/>
		/// <c>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.W0 6F /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovdqu8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovhlps instruction.<br/>
		/// <br/>
		/// <c>VMOVHLPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHLPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmovhpd instruction.<br/>
		/// <br/>
		/// <c>VMOVHPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 17 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovhpd instruction.<br/>
		/// <br/>
		/// <c>VMOVHPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmovhps instruction.<br/>
		/// <br/>
		/// <c>VMOVHPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 17 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovhps instruction.<br/>
		/// <br/>
		/// <c>VMOVHPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVHPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmovlhps instruction.<br/>
		/// <br/>
		/// <c>VMOVLHPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLHPS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmovlpd instruction.<br/>
		/// <br/>
		/// <c>VMOVLPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 13 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPD m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovlpd instruction.<br/>
		/// <br/>
		/// <c>VMOVLPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPD xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovlpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmovlps instruction.<br/>
		/// <br/>
		/// <c>VMOVLPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 13 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPS m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovlps instruction.<br/>
		/// <br/>
		/// <c>VMOVLPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVLPS xmm2, xmm1, m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r32, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r64, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r32, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterYMM src);
		/// <summary>vmovmskpd instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPD r64, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterYMM src);
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r32, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r64, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r32, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovmskps(AssemblerRegister32 dst, AssemblerRegisterYMM src);
		/// <summary>vmovmskps instruction.<br/>
		/// <br/>
		/// <c>VMOVMSKPS r64, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.W1 50 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovmskps(AssemblerRegister64 dst, AssemblerRegisterYMM src);
		/// <summary>vmovntdq instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQ m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQ m128, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 E7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovntdq instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQ m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQ m256, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 E7 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovntdq instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQ m512, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 E7 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovntdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQA xmm1, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 2A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQA xmm1, m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovntdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQA ymm1, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 2A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTDQA ymm1, m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovntdqa instruction.<br/>
		/// <br/>
		/// <c>VMOVNTDQA zmm1, m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntdqa(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovntpd instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPD m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPD m128, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovntpd instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPD m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPD m256, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovntpd instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPD m512, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovntps instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPS m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPS m128, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovntps instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPS m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVNTPS m256, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovntps instruction.<br/>
		/// <br/>
		/// <c>VMOVNTPS m512, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 6E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1, r/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovq(AssemblerRegisterXMM dst, AssemblerRegister64 src);
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ r/m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ r/m64, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovq(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1/m64, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1/m64, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D6 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovq instruction.<br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 7E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovsd instruction.<br/>
		/// <br/>
		/// <c>VMOVSD m64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSD m64 {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovsd instruction.<br/>
		/// <br/>
		/// <c>VMOVSD xmm1, m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSD xmm1 {k1}{z}, m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovsd instruction.<br/>
		/// <br/>
		/// <c>VMOVSD xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSD xmm1 {k1}{z}, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmovsh instruction.<br/>
		/// <br/>
		/// <c>VMOVSH m16 {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsh(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovsh instruction.<br/>
		/// <br/>
		/// <c>VMOVSH xmm1 {k1}{z}, m16</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsh(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovsh instruction.<br/>
		/// <br/>
		/// <c>VMOVSH xmm1 {k1}{z}, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovshdup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovshdup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 16 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovshdup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovshdup instruction.<br/>
		/// <br/>
		/// <c>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovshdup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsldup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsldup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 12 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsldup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovsldup instruction.<br/>
		/// <br/>
		/// <c>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovsldup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovss instruction.<br/>
		/// <br/>
		/// <c>VMOVSS m32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSS m32 {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovss instruction.<br/>
		/// <br/>
		/// <c>VMOVSS xmm1, m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSS xmm1 {k1}{z}, m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovss instruction.<br/>
		/// <br/>
		/// <c>VMOVSS xmm1, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVSS xmm1 {k1}{z}, xmm2, xmm3</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovupd instruction.<br/>
		/// <br/>
		/// <c>VMOVUPD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovupd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS xmm2/m128, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS xmm2/m128 {k1}{z}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS ymm2/m256, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 11 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS ymm2/m256 {k1}{z}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS zmm2/m512 {k1}{z}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 10 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMOVUPS ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovups instruction.<br/>
		/// <br/>
		/// <c>VMOVUPS zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovups(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vmovw instruction.<br/>
		/// <br/>
		/// <c>VMOVW xmm1, r32/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovw(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>vmovw instruction.<br/>
		/// <br/>
		/// <c>VMOVW xmm1, r64/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W1 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovw(AssemblerRegisterXMM dst, AssemblerRegister64 src);
		/// <summary>vmovw instruction.<br/>
		/// <br/>
		/// <c>VMOVW r32/m16, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovw(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vmovw instruction.<br/>
		/// <br/>
		/// <c>VMOVW r64/m16, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmovw(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vmovw instruction.<br/>
		/// <br/>
		/// <c>VMOVW r32/m16, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vmovw instruction.<br/>
		/// <br/>
		/// <c>VMOVW xmm1, r32/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP5.W0 6E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmovw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vmpsadbw instruction.<br/>
		/// <br/>
		/// <c>VMPSADBW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 42 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vmptrld instruction.<br/>
		/// <br/>
		/// <c>VMPTRLD m64</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /6</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmptrld(AssemblerMemoryOperand dst);
		/// <summary>vmptrst instruction.<br/>
		/// <br/>
		/// <c>VMPTRST m64</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /7</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmptrst(AssemblerMemoryOperand dst);
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmread(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmread(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m64, r64</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmread(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>vmread instruction.<br/>
		/// <br/>
		/// <c>VMREAD r/m64, r64</c><br/>
		/// <br/>
		/// <c>NP 0F 78 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmread(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>vmresume instruction.<br/>
		/// <br/>
		/// <c>VMRESUME</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C3</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmresume();
		/// <summary>vmrun instruction.<br/>
		/// <br/>
		/// <c>VMRUN</c><br/>
		/// <br/>
		/// <c>a64 0F 01 D8</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMRUN</c><br/>
		/// <br/>
		/// <c>a32 0F 01 D8</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMRUN</c><br/>
		/// <br/>
		/// <c>a16 0F 01 D8</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmrun();
		/// <summary>vmsave instruction.<br/>
		/// <br/>
		/// <c>VMSAVE</c><br/>
		/// <br/>
		/// <c>a64 0F 01 DB</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VMSAVE</c><br/>
		/// <br/>
		/// <c>a32 0F 01 DB</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMSAVE</c><br/>
		/// <br/>
		/// <c>a16 0F 01 DB</c><br/>
		/// <br/>
		/// <c>SVM</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmsave();
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulpd instruction.<br/>
		/// <br/>
		/// <c>VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulph instruction.<br/>
		/// <br/>
		/// <c>VMULPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmulph instruction.<br/>
		/// <br/>
		/// <c>VMULPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmulph instruction.<br/>
		/// <br/>
		/// <c>VMULPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vmulph instruction.<br/>
		/// <br/>
		/// <c>VMULPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulph instruction.<br/>
		/// <br/>
		/// <c>VMULPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulph instruction.<br/>
		/// <br/>
		/// <c>VMULPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulps instruction.<br/>
		/// <br/>
		/// <c>VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulsd instruction.<br/>
		/// <br/>
		/// <c>VMULSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmulsd instruction.<br/>
		/// <br/>
		/// <c>VMULSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulsh instruction.<br/>
		/// <br/>
		/// <c>VMULSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmulsh instruction.<br/>
		/// <br/>
		/// <c>VMULSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmulss instruction.<br/>
		/// <br/>
		/// <c>VMULSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vmulss instruction.<br/>
		/// <br/>
		/// <c>VMULSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 59 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r32, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmwrite(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r64, r/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmwrite(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r32, r/m32</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void vmwrite(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>vmwrite instruction.<br/>
		/// <br/>
		/// <c>VMWRITE r64, r/m64</c><br/>
		/// <br/>
		/// <c>NP 0F 79 /r</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vmwrite(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>vmxoff instruction.<br/>
		/// <br/>
		/// <c>VMXOFF</c><br/>
		/// <br/>
		/// <c>NP 0F 01 C4</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmxoff();
		/// <summary>vmxon instruction.<br/>
		/// <br/>
		/// <c>VMXON m64</c><br/>
		/// <br/>
		/// <c>F3 0F C7 /6</c><br/>
		/// <br/>
		/// <c>VMX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vmxon(AssemblerMemoryOperand dst);
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vorpd instruction.<br/>
		/// <br/>
		/// <c>VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 56 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vorps instruction.<br/>
		/// <br/>
		/// <c>VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 56 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp2intersectd instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp2intersectq instruction.<br/>
		/// <br/>
		/// <c>VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W1 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512F and AVX512_VP2INTERSECT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp4dpwssd instruction.<br/>
		/// <br/>
		/// <c>VP4DPWSSD zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512_4VNNIW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp4dpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vp4dpwssds instruction.<br/>
		/// <br/>
		/// <c>VP4DPWSSDS zmm1 {k1}{z}, zmm2+3, m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512_4VNNIW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vp4dpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsb instruction.<br/>
		/// <br/>
		/// <c>VPABSB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsd instruction.<br/>
		/// <br/>
		/// <c>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 1E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsq instruction.<br/>
		/// <br/>
		/// <c>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 1F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPABSW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpabsw instruction.<br/>
		/// <br/>
		/// <c>VPABSW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 1D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpabsw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackssdw instruction.<br/>
		/// <br/>
		/// <c>VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpacksswb instruction.<br/>
		/// <br/>
		/// <c>VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 2B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackusdw instruction.<br/>
		/// <br/>
		/// <c>VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpackuswb instruction.<br/>
		/// <br/>
		/// <c>VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 67 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddb instruction.<br/>
		/// <br/>
		/// <c>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddd instruction.<br/>
		/// <br/>
		/// <c>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FE /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddq instruction.<br/>
		/// <br/>
		/// <c>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddsb instruction.<br/>
		/// <br/>
		/// <c>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddsw instruction.<br/>
		/// <br/>
		/// <c>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG ED /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddusb instruction.<br/>
		/// <br/>
		/// <c>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DC /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddusw instruction.<br/>
		/// <br/>
		/// <c>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpaddw instruction.<br/>
		/// <br/>
		/// <c>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG FD /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpalignr instruction.<br/>
		/// <br/>
		/// <c>VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 0F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpand instruction.<br/>
		/// <br/>
		/// <c>VPAND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandd instruction.<br/>
		/// <br/>
		/// <c>VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandn instruction.<br/>
		/// <br/>
		/// <c>VPANDN ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandnd instruction.<br/>
		/// <br/>
		/// <c>VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandnq instruction.<br/>
		/// <br/>
		/// <c>VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpandq instruction.<br/>
		/// <br/>
		/// <c>VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 DB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpavgb instruction.<br/>
		/// <br/>
		/// <c>VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E0 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpavgw instruction.<br/>
		/// <br/>
		/// <c>VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E3 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpblendd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 02 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmd instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmq instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendmw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vpblendvb instruction.<br/>
		/// <br/>
		/// <c>VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 4C /r /is4</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpblendw instruction.<br/>
		/// <br/>
		/// <c>VPBLENDW ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 0E /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB zmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB zmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB xmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1, xmm2/m8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTB ymm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastb instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTB zmm1 {k1}{z}, xmm2/m8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 78 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD zmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastd instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 58 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastmb2q instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMB2Q xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastmb2q(AssemblerRegisterXMM dst, AssemblerRegisterK src);
		/// <summary>vpbroadcastmb2q instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMB2Q ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastmb2q(AssemblerRegisterYMM dst, AssemblerRegisterK src);
		/// <summary>vpbroadcastmb2q instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMB2Q zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 2A /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastmb2q(AssemblerRegisterZMM dst, AssemblerRegisterK src);
		/// <summary>vpbroadcastmw2d instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMW2D xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastmw2d(AssemblerRegisterXMM dst, AssemblerRegisterK src);
		/// <summary>vpbroadcastmw2d instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMW2D ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastmw2d(AssemblerRegisterYMM dst, AssemblerRegisterK src);
		/// <summary>vpbroadcastmw2d instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTMW2D zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastmw2d(AssemblerRegisterZMM dst, AssemblerRegisterK src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1 {k1}{z}, r64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegister64 src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1 {k1}{z}, r64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegister64 src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ zmm1 {k1}{z}, r64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegister64 src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 59 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastq instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 59 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW zmm1 {k1}{z}, r32</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegister32 src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW zmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPBROADCASTW ymm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpbroadcastw instruction.<br/>
		/// <br/>
		/// <c>VPBROADCASTW zmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 79 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmulhqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmulhqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmullqhqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmullqlqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>PCLMULQDQ and AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpclmulqdq instruction.<br/>
		/// <br/>
		/// <c>VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.WIG 44 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F and VPCLMULQDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>XOP.256.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV ymm1, ymm2, ymm3/m256, ymm4</c><br/>
		/// <br/>
		/// <c>XOP.256.X8.W0 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W1 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vpcmov instruction.<br/>
		/// <br/>
		/// <c>VPCMOV ymm1, ymm2, ymm3, ymm4/m256</c><br/>
		/// <br/>
		/// <c>XOP.256.X8.W1 A2 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 74 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 76 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 29 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpeqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPEQW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpcmpestri instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpcmpestri64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRI64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 61 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpcmpestrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpcmpestrm64 instruction.<br/>
		/// <br/>
		/// <c>VPCMPESTRM64 xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 60 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpcmpfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtb instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 64 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 66 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtd instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 66 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 37 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtq instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 37 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpgtw instruction.<br/>
		/// <br/>
		/// <c>VPCMPGTW k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 65 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpcmpistri instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRI xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 63 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpcmpistrm instruction.<br/>
		/// <br/>
		/// <c>VPCMPISTRM xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 62 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpcmpleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmplew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmplew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmplew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmplew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmplew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmplew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpneqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpneqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpneqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpneqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpneqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpneqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpneqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpneqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpneqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequb instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequd instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnequw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpneqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpneqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpneqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpneqw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnled instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnleuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnlew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnlew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnlew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnlew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnlew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnlew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltd instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmpnltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmpnltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmpnltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpnltw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmptrueb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrueb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrueb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrueb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueb instruction.<br/>
		/// <br/>
		/// <c>VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrued instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrued instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrued instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrued instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrued instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrued instruction.<br/>
		/// <br/>
		/// <c>VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrueq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrueq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrueq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueq instruction.<br/>
		/// <br/>
		/// <c>VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrueub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrueub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrueub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrueud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrueud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrueud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptruew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcmptruew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpcmptruew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpcmptruew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptruew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmptruew instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpub instruction.<br/>
		/// <br/>
		/// <c>VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpud instruction.<br/>
		/// <br/>
		/// <c>VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpuq instruction.<br/>
		/// <br/>
		/// <c>VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 1E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpuw instruction.<br/>
		/// <br/>
		/// <c>VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3E /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcmpw instruction.<br/>
		/// <br/>
		/// <c>VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 3F /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomeqb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomeqb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomeqd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomeqd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomeqq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomeqq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomequb instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomequb instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomequd instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomequd instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomequq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomequq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomequw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomequw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomeqw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomeqw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalseb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalsed instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalseq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalseub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalseud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalseuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalseuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomfalsew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgeb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgeb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomged instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomged instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgeq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgeq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgeub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgeub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgeud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgeud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgeuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgeuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgeuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgeuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomgtw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomgtw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomleb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomleb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomled instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomled instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomleq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomleq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomleub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomleub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomleud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomleud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomleuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomleuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomleuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomleuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomlew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomlew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomltw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomltw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomneqb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomneqb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomneqd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomneqd instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomneqq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomneqq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomnequb instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomnequb instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomnequd instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomnequd instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomnequq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomnequq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomnequw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomnequw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomneqw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomneqw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressb instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressd instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressq instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpcompressw instruction.<br/>
		/// <br/>
		/// <c>VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 63 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomtrueb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrueb instruction.<br/>
		/// <br/>
		/// <c>VPCOMB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtrued instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrued instruction.<br/>
		/// <br/>
		/// <c>VPCOMD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtrueq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrueq instruction.<br/>
		/// <br/>
		/// <c>VPCOMQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtrueub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrueub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtrueud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrueud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrueuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtrueuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomtruew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpcomtruew instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomub instruction.<br/>
		/// <br/>
		/// <c>VPCOMUB xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EC /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomud instruction.<br/>
		/// <br/>
		/// <c>VPCOMUD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EE /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomuq instruction.<br/>
		/// <br/>
		/// <c>VPCOMUQ xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 EF /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomuw instruction.<br/>
		/// <br/>
		/// <c>VPCOMUW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 ED /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpcomw instruction.<br/>
		/// <br/>
		/// <c>VPCOMW xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 CD /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpconflictd instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpconflictq instruction.<br/>
		/// <br/>
		/// <c>VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C4 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpconflictq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpbusd instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 50 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSDS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSDS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSDS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPBUSDS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpbusds instruction.<br/>
		/// <br/>
		/// <c>VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpwssd instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 52 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSDS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSDS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSDS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPDPWSSDS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX-VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpdpwssds instruction.<br/>
		/// <br/>
		/// <c>VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 53 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VNNI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vperm2f128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2F128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 06 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vperm2i128 instruction.<br/>
		/// <br/>
		/// <c>VPERM2I128 ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 46 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermb instruction.<br/>
		/// <br/>
		/// <c>VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermd instruction.<br/>
		/// <br/>
		/// <c>VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2b instruction.<br/>
		/// <br/>
		/// <c>VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2d instruction.<br/>
		/// <br/>
		/// <c>VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 77 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2q instruction.<br/>
		/// <br/>
		/// <c>VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 76 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermi2w instruction.<br/>
		/// <br/>
		/// <c>VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 75 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::int8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::int8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::int8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::int8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::int8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::int8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::uint8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::uint8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::uint8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::uint8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::uint8_t imm);
		/// <summary>vpermil2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 49 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::uint8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::int8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::int8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::int8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::int8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::int8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::int8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::uint8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::uint8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::uint8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::uint8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm4</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::uint8_t imm);
		/// <summary>vpermil2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm4</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 48 /r /is5</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::uint8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 0D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermilpd instruction.<br/>
		/// <br/>
		/// <c>VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 05 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 0C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermilps instruction.<br/>
		/// <br/>
		/// <c>VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 04 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermpd instruction.<br/>
		/// <br/>
		/// <c>VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 01 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermps instruction.<br/>
		/// <br/>
		/// <c>VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 16 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 36 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermq instruction.<br/>
		/// <br/>
		/// <c>VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 00 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2b instruction.<br/>
		/// <br/>
		/// <c>VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2d instruction.<br/>
		/// <br/>
		/// <c>VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2pd instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2ps instruction.<br/>
		/// <br/>
		/// <c>VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 7F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2q instruction.<br/>
		/// <br/>
		/// <c>VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermt2w instruction.<br/>
		/// <br/>
		/// <c>VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 7D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpermw instruction.<br/>
		/// <br/>
		/// <c>VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 8D /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandb instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandd instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDD zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandq instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 89 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpexpandw instruction.<br/>
		/// <br/>
		/// <c>VPEXPANDW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpexpandw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r64/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrb instruction.<br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRB r32/m8, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 14 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrd instruction.<br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRD r/m32, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrq instruction.<br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRQ r/m64, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 16 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r64, xmm1, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C5 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpextrw instruction.<br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPEXTRW r32/m16, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 15 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD ymm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD zmm1 {k1}, vm32z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpgatherdd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDD ymm1, vm32y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ xmm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ ymm1 {k1}, vm32x</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ zmm1 {k1}, vm32y</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 90 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ xmm1, vm32x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpgatherdq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERDQ ymm1, vm32x, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 90 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
		/// <summary>vpgatherqd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherqd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQD ymm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherqd instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPGATHERQD xmm1, vm64y, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ xmm1 {k1}, vm64x</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ ymm1 {k1}, vm64y</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ zmm1 {k1}, vm64z</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 91 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ xmm1, vm64x, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpgatherqq instruction.<br/>
		/// <br/>
		/// <c>VPGATHERQQ ymm1, vm64y, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 91 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
		/// <summary>vphaddbd instruction.<br/>
		/// <br/>
		/// <c>VPHADDBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddbd instruction.<br/>
		/// <br/>
		/// <c>VPHADDBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddbq instruction.<br/>
		/// <br/>
		/// <c>VPHADDBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddbq instruction.<br/>
		/// <br/>
		/// <c>VPHADDBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddbw instruction.<br/>
		/// <br/>
		/// <c>VPHADDBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddbw instruction.<br/>
		/// <br/>
		/// <c>VPHADDBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphaddd instruction.<br/>
		/// <br/>
		/// <c>VPHADDD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 02 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphadddq instruction.<br/>
		/// <br/>
		/// <c>VPHADDDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 CB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphadddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphadddq instruction.<br/>
		/// <br/>
		/// <c>VPHADDDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 CB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphadddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphaddsw instruction.<br/>
		/// <br/>
		/// <c>VPHADDSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 03 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphaddubd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddubd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddubq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddubq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddubw instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddubw instruction.<br/>
		/// <br/>
		/// <c>VPHADDUBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddudq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 DB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddudq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddudq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 DB /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddudq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphadduwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphadduwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphadduwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphadduwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphadduwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphadduwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphadduwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDUWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphadduwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphaddw instruction.<br/>
		/// <br/>
		/// <c>VPHADDW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 01 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphaddwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddwd instruction.<br/>
		/// <br/>
		/// <c>VPHADDWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C6 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphaddwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphaddwq instruction.<br/>
		/// <br/>
		/// <c>VPHADDWQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 C7 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphaddwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphminposuw instruction.<br/>
		/// <br/>
		/// <c>VPHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 41 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphminposuw instruction.<br/>
		/// <br/>
		/// <c>VPHMINPOSUW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 41 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphsubbw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphsubbw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBBW xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E1 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphsubd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 06 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphsubdq instruction.<br/>
		/// <br/>
		/// <c>VPHSUBDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphsubdq instruction.<br/>
		/// <br/>
		/// <c>VPHSUBDQ xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E3 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphsubsw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 07 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphsubw instruction.<br/>
		/// <br/>
		/// <c>VPHSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 05 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vphsubwd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vphsubwd instruction.<br/>
		/// <br/>
		/// <c>VPHSUBWD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vphsubwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::int8_t imm);
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::int8_t imm);
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::uint8_t imm);
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r64/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::uint8_t imm);
		/// <summary>vpinsrb instruction.<br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRB xmm1, xmm2, r32/m8, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 20 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::int8_t imm);
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::uint8_t imm);
		/// <summary>vpinsrd instruction.<br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRD xmm1, xmm2, r/m32, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::int8_t imm);
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::uint8_t imm);
		/// <summary>vpinsrq instruction.<br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRQ xmm1, xmm2, r/m64, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 22 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::int8_t imm);
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::int8_t imm);
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::uint8_t imm);
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r64/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::uint8_t imm);
		/// <summary>vpinsrw instruction.<br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPINSRW xmm1, xmm2, r32/m16, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 C4 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vplzcntd instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vplzcntq instruction.<br/>
		/// <br/>
		/// <c>VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 44 /r</c><br/>
		/// <br/>
		/// <c>AVX512CD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vplzcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmacsdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 9F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 97 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 97 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssdd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8E /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssdqh instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 8F /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 87 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssdql instruction.<br/>
		/// <br/>
		/// <c>VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 87 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 86 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 86 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssww instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 85 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacssww instruction.<br/>
		/// <br/>
		/// <c>VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 85 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 96 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacswd instruction.<br/>
		/// <br/>
		/// <c>VPMACSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 96 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsww instruction.<br/>
		/// <br/>
		/// <c>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 95 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmacsww instruction.<br/>
		/// <br/>
		/// <c>VPMACSWW xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 95 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmadcsswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmadcsswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmadcswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 B6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpmadcswd instruction.<br/>
		/// <br/>
		/// <c>VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 B6 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmadd52huq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B5 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmadd52luq instruction.<br/>
		/// <br/>
		/// <c>VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 B4 /r</c><br/>
		/// <br/>
		/// <c>AVX512_IFMA</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaddubsw instruction.<br/>
		/// <br/>
		/// <c>VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 04 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaddwd instruction.<br/>
		/// <br/>
		/// <c>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaskmovd instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVD ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ m128, xmm1, xmm2</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ m256, ymm1, ymm2</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 8E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ xmm1, xmm2, m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaskmovq instruction.<br/>
		/// <br/>
		/// <c>VPMASKMOVQ ymm1, ymm2, m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 8C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaskmovq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsb instruction.<br/>
		/// <br/>
		/// <c>VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3C /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsd instruction.<br/>
		/// <br/>
		/// <c>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsq instruction.<br/>
		/// <br/>
		/// <c>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxsw instruction.<br/>
		/// <br/>
		/// <c>VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxub instruction.<br/>
		/// <br/>
		/// <c>VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DE /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3F /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxud instruction.<br/>
		/// <br/>
		/// <c>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxuq instruction.<br/>
		/// <br/>
		/// <c>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmaxuw instruction.<br/>
		/// <br/>
		/// <c>VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3E /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsb instruction.<br/>
		/// <br/>
		/// <c>VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 39 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsd instruction.<br/>
		/// <br/>
		/// <c>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsq instruction.<br/>
		/// <br/>
		/// <c>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminsw instruction.<br/>
		/// <br/>
		/// <c>VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG EA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminub instruction.<br/>
		/// <br/>
		/// <c>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG DA /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminud instruction.<br/>
		/// <br/>
		/// <c>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminuq instruction.<br/>
		/// <br/>
		/// <c>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 3B /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpminuw instruction.<br/>
		/// <br/>
		/// <c>VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 3A /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmovb2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVB2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
		/// <summary>vpmovb2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVB2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
		/// <summary>vpmovb2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVB2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
		/// <summary>vpmovd2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVD2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
		/// <summary>vpmovd2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVD2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
		/// <summary>vpmovd2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVD2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovm2b instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2B xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2b(AssemblerRegisterXMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2b instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2B ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2b(AssemblerRegisterYMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2b instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2B zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2b(AssemblerRegisterZMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2d instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2D xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2d(AssemblerRegisterXMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2d instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2D ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2d(AssemblerRegisterYMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2d instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2D zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2d(AssemblerRegisterZMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2q instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2Q xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2q(AssemblerRegisterXMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2q instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2Q ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2q(AssemblerRegisterYMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2q instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2Q zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 38 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2q(AssemblerRegisterZMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2w instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2W xmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2w(AssemblerRegisterXMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2w instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2W ymm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2w(AssemblerRegisterYMM dst, AssemblerRegisterK src);
		/// <summary>vpmovm2w instruction.<br/>
		/// <br/>
		/// <c>VPMOVM2W zmm1, k1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovm2w(AssemblerRegisterZMM dst, AssemblerRegisterK src);
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r32, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src);
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r64, xmm1</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.W1 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src);
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r32, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W0 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterYMM src);
		/// <summary>vpmovmskb instruction.<br/>
		/// <br/>
		/// <c>VPMOVMSKB r64, ymm1</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.W1 D7 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterYMM src);
		/// <summary>vpmovq2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVQ2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
		/// <summary>vpmovq2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVQ2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
		/// <summary>vpmovq2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVQ2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 39 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 21 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 22 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 20 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 25 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 25 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 23 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovsxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 24 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovsxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusdb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDB xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusdw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSDW ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 13 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m16 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m32 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusqb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQB xmm1/m64 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusqd instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQD ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m32 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m64 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovusqw instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSQW xmm1/m128 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovuswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovuswb instruction.<br/>
		/// <br/>
		/// <c>VPMOVUSWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovw2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVW2M k1, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
		/// <summary>vpmovw2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVW2M k1, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
		/// <summary>vpmovw2m instruction.<br/>
		/// <br/>
		/// <c>VPMOVW2M k1, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 29 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m64 {k1}{z}, xmm2</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB xmm1/m128 {k1}{z}, ymm2</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovwb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
		/// <summary>vpmovwb instruction.<br/>
		/// <br/>
		/// <c>VPMOVWB ymm1/m256 {k1}{z}, zmm2</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBD ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBD zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 31 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1, xmm2/m16</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 32 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXBW ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxbw instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXBW zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 30 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 35 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxdq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 35 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD xmm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWD ymm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxwd instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWD zmm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 33 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmovzxwq instruction.<br/>
		/// <br/>
		/// <c>VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 34 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmovzxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 28 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmuldq instruction.<br/>
		/// <br/>
		/// <c>VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 28 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhrsw instruction.<br/>
		/// <br/>
		/// <c>VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 0B /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhuw instruction.<br/>
		/// <br/>
		/// <c>VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E4 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulhw instruction.<br/>
		/// <br/>
		/// <c>VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 40 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmulld instruction.<br/>
		/// <br/>
		/// <c>VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmullq instruction.<br/>
		/// <br/>
		/// <c>VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 40 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmullw instruction.<br/>
		/// <br/>
		/// <c>VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D5 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmultishiftqb instruction.<br/>
		/// <br/>
		/// <c>VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 83 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F4 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpmuludq instruction.<br/>
		/// <br/>
		/// <c>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F4 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntb instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTB zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntd instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntq instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 55 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VPOPCNTDQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW xmm1 {k1}{z}, xmm2/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW ymm1 {k1}{z}, ymm2/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vpopcntw instruction.<br/>
		/// <br/>
		/// <c>VPOPCNTW zmm1 {k1}{z}, zmm2/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 54 /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpopcntw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpor instruction.<br/>
		/// <br/>
		/// <c>VPOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpord instruction.<br/>
		/// <br/>
		/// <c>VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vporq instruction.<br/>
		/// <br/>
		/// <c>VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpperm instruction.<br/>
		/// <br/>
		/// <c>VPPERM xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A3 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
		/// <summary>vpperm instruction.<br/>
		/// <br/>
		/// <c>VPPERM xmm1, xmm2, xmm3/m128, xmm4</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 A3 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
		/// <summary>vpperm instruction.<br/>
		/// <br/>
		/// <c>VPPERM xmm1, xmm2, xmm3, xmm4/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W1 A3 /r /is4</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprold instruction.<br/>
		/// <br/>
		/// <c>VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprolq instruction.<br/>
		/// <br/>
		/// <c>VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /1 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprolvd instruction.<br/>
		/// <br/>
		/// <c>VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprolvq instruction.<br/>
		/// <br/>
		/// <c>VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprord instruction.<br/>
		/// <br/>
		/// <c>VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprorq instruction.<br/>
		/// <br/>
		/// <c>VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /0 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprorvd instruction.<br/>
		/// <br/>
		/// <c>VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprorvq instruction.<br/>
		/// <br/>
		/// <c>VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 90 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 90 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 90 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprotb instruction.<br/>
		/// <br/>
		/// <c>VPROTB xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C0 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 92 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 92 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 92 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprotd instruction.<br/>
		/// <br/>
		/// <c>VPROTD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C2 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 93 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 93 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 93 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprotq instruction.<br/>
		/// <br/>
		/// <c>VPROTQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C3 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 91 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 91 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 91 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vprotw instruction.<br/>
		/// <br/>
		/// <c>VPROTW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>XOP.128.X8.W0 C1 /r ib</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSADBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsadbw instruction.<br/>
		/// <br/>
		/// <c>VPSADBW zmm1, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F6 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpscatterdd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDD vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpscatterdd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDD vm32y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpscatterdd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDD vm32z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpscatterdq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDQ vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpscatterdq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDQ vm32x {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpscatterdq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERDQ vm32y {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A0 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpscatterqd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQD vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSCATTERQD vm64y {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpscatterqd instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQD vm64z {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpscatterqq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQQ vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vpscatterqq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQQ vm64y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vpscatterqq instruction.<br/>
		/// <br/>
		/// <c>VPSCATTERQQ vm64z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A1 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vpshab instruction.<br/>
		/// <br/>
		/// <c>VPSHAB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 98 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshab instruction.<br/>
		/// <br/>
		/// <c>VPSHAB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 98 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshab(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshab instruction.<br/>
		/// <br/>
		/// <c>VPSHAB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 98 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshad instruction.<br/>
		/// <br/>
		/// <c>VPSHAD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9A /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshad instruction.<br/>
		/// <br/>
		/// <c>VPSHAD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9A /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshad instruction.<br/>
		/// <br/>
		/// <c>VPSHAD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 9A /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshaq instruction.<br/>
		/// <br/>
		/// <c>VPSHAQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9B /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshaq instruction.<br/>
		/// <br/>
		/// <c>VPSHAQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 9B /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshaq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshaq instruction.<br/>
		/// <br/>
		/// <c>VPSHAQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 9B /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshaw instruction.<br/>
		/// <br/>
		/// <c>VPSHAW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 99 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshaw instruction.<br/>
		/// <br/>
		/// <c>VPSHAW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 99 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshaw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshaw instruction.<br/>
		/// <br/>
		/// <c>VPSHAW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 99 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshlb instruction.<br/>
		/// <br/>
		/// <c>VPSHLB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 94 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshlb instruction.<br/>
		/// <br/>
		/// <c>VPSHLB xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 94 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshlb instruction.<br/>
		/// <br/>
		/// <c>VPSHLB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 94 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshld instruction.<br/>
		/// <br/>
		/// <c>VPSHLD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 96 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshld instruction.<br/>
		/// <br/>
		/// <c>VPSHLD xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 96 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshld instruction.<br/>
		/// <br/>
		/// <c>VPSHLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 96 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 71 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvd instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvq instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 71 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldvw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 70 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshldw instruction.<br/>
		/// <br/>
		/// <c>VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshlq instruction.<br/>
		/// <br/>
		/// <c>VPSHLQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 97 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshlq instruction.<br/>
		/// <br/>
		/// <c>VPSHLQ xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 97 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshlq instruction.<br/>
		/// <br/>
		/// <c>VPSHLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 97 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshlw instruction.<br/>
		/// <br/>
		/// <c>VPSHLW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 95 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshlw instruction.<br/>
		/// <br/>
		/// <c>VPSHLW xmm1, xmm2/m128, xmm3</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W0 95 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
		/// <summary>vpshlw instruction.<br/>
		/// <br/>
		/// <c>VPSHLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>XOP.128.X9.W1 95 /r</c><br/>
		/// <br/>
		/// <c>XOP</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 73 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvd instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvq instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 73 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdvw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 72 /r</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshrdw instruction.<br/>
		/// <br/>
		/// <c>VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 72 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512_VBMI2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshufb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.WIG 00 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshufbitqmb instruction.<br/>
		/// <br/>
		/// <c>VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 8F /r</c><br/>
		/// <br/>
		/// <c>AVX512_BITALG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshufd instruction.<br/>
		/// <br/>
		/// <c>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshufhw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpshuflw instruction.<br/>
		/// <br/>
		/// <c>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.F2.0F.WIG 70 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsignb instruction.<br/>
		/// <br/>
		/// <c>VPSIGNB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 08 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsignd instruction.<br/>
		/// <br/>
		/// <c>VPSIGND ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 0A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsignw instruction.<br/>
		/// <br/>
		/// <c>VPSIGNW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 09 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 F2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpslld instruction.<br/>
		/// <br/>
		/// <c>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpslldq instruction.<br/>
		/// <br/>
		/// <c>VPSLLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /7 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 F3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsllq instruction.<br/>
		/// <br/>
		/// <c>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvd instruction.<br/>
		/// <br/>
		/// <c>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvq instruction.<br/>
		/// <br/>
		/// <c>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 47 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllvw instruction.<br/>
		/// <br/>
		/// <c>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 12 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSLLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsllw instruction.<br/>
		/// <br/>
		/// <c>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /6 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrad instruction.<br/>
		/// <br/>
		/// <c>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 E2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsraq instruction.<br/>
		/// <br/>
		/// <c>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 72 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravd instruction.<br/>
		/// <br/>
		/// <c>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravq instruction.<br/>
		/// <br/>
		/// <c>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 46 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsravw instruction.<br/>
		/// <br/>
		/// <c>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 11 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRAW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsraw instruction.<br/>
		/// <br/>
		/// <c>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /4 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D2 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 D2 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLD ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrld instruction.<br/>
		/// <br/>
		/// <c>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 72 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrldq instruction.<br/>
		/// <br/>
		/// <c>VPSRLDQ zmm1, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 73 /3 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D3 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 D3 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLQ ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrlq instruction.<br/>
		/// <br/>
		/// <c>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 73 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvd instruction.<br/>
		/// <br/>
		/// <c>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvq instruction.<br/>
		/// <br/>
		/// <c>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 45 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlvw instruction.<br/>
		/// <br/>
		/// <c>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 10 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D1 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW xmm1, xmm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSRLW ymm1, ymm2, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsrlw instruction.<br/>
		/// <br/>
		/// <c>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 71 /2 ib</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubb instruction.<br/>
		/// <br/>
		/// <c>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FA /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubd instruction.<br/>
		/// <br/>
		/// <c>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 FA /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG FB /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubq instruction.<br/>
		/// <br/>
		/// <c>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 FB /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubsb instruction.<br/>
		/// <br/>
		/// <c>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubsw instruction.<br/>
		/// <br/>
		/// <c>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG E9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubusb instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D8 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubusw instruction.<br/>
		/// <br/>
		/// <c>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG D9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpsubw instruction.<br/>
		/// <br/>
		/// <c>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG F9 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpternlogd instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vpternlogq instruction.<br/>
		/// <br/>
		/// <c>VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 25 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptest(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vptest instruction.<br/>
		/// <br/>
		/// <c>VPTEST ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.WIG 17 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptest(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmb instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMB k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmd instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W0 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmq instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 27 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vptestnmw instruction.<br/>
		/// <br/>
		/// <c>VPTESTNMW k2 {k1}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.F3.0F38.W1 26 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 68 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6A /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 6A /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6D /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckhwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 69 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklbw instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 60 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 62 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpckldq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 62 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 6C /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklqdq instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 6C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpunpcklwd instruction.<br/>
		/// <br/>
		/// <c>VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.WIG 61 /r</c><br/>
		/// <br/>
		/// <c>AVX512BW</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxor instruction.<br/>
		/// <br/>
		/// <c>VPXOR ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG EF /r</c><br/>
		/// <br/>
		/// <c>AVX2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxord instruction.<br/>
		/// <br/>
		/// <c>VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W0 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vpxorq instruction.<br/>
		/// <br/>
		/// <c>VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 EF /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangepd instruction.<br/>
		/// <br/>
		/// <c>VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangeps instruction.<br/>
		/// <br/>
		/// <c>VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 50 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrangesd instruction.<br/>
		/// <br/>
		/// <c>VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrangess instruction.<br/>
		/// <br/>
		/// <c>VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 51 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp14pd instruction.<br/>
		/// <br/>
		/// <c>VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp14ps instruction.<br/>
		/// <br/>
		/// <c>VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp14sd instruction.<br/>
		/// <br/>
		/// <c>VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrcp14sd instruction.<br/>
		/// <br/>
		/// <c>VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrcp14ss instruction.<br/>
		/// <br/>
		/// <c>VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrcp14ss instruction.<br/>
		/// <br/>
		/// <c>VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrcp28pd instruction.<br/>
		/// <br/>
		/// <c>VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrcp28pd instruction.<br/>
		/// <br/>
		/// <c>VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp28ps instruction.<br/>
		/// <br/>
		/// <c>VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrcp28ps instruction.<br/>
		/// <br/>
		/// <c>VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CA /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcp28sd instruction.<br/>
		/// <br/>
		/// <c>VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrcp28sd instruction.<br/>
		/// <br/>
		/// <c>VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrcp28ss instruction.<br/>
		/// <br/>
		/// <c>VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrcp28ss instruction.<br/>
		/// <br/>
		/// <c>VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CB /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrcpph instruction.<br/>
		/// <br/>
		/// <c>VRCPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrcpph instruction.<br/>
		/// <br/>
		/// <c>VRCPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrcpph instruction.<br/>
		/// <br/>
		/// <c>VRCPPH zmm1 {k1}{z}, zmm2/m512/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrcpph instruction.<br/>
		/// <br/>
		/// <c>VRCPPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcpph instruction.<br/>
		/// <br/>
		/// <c>VRCPPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcpph instruction.<br/>
		/// <br/>
		/// <c>VRCPPH zmm1 {k1}{z}, zmm2/m512/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 4C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcpps instruction.<br/>
		/// <br/>
		/// <c>VRCPPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrcpsh instruction.<br/>
		/// <br/>
		/// <c>VRCPSH xmm1 {k1}{z}, xmm2, xmm3/m16</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrcpsh instruction.<br/>
		/// <br/>
		/// <c>VRCPSH xmm1 {k1}{z}, xmm2, xmm3/m16</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 4D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrcpss instruction.<br/>
		/// <br/>
		/// <c>VRCPSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrcpss instruction.<br/>
		/// <br/>
		/// <c>VRCPSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 53 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreducepd instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreduceph instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreduceps instruction.<br/>
		/// <br/>
		/// <c>VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 56 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vreducesd instruction.<br/>
		/// <br/>
		/// <c>VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vreducesh instruction.<br/>
		/// <br/>
		/// <c>VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vreducesh instruction.<br/>
		/// <br/>
		/// <c>VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vreducesh instruction.<br/>
		/// <br/>
		/// <c>VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vreducesh instruction.<br/>
		/// <br/>
		/// <c>VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vreducess instruction.<br/>
		/// <br/>
		/// <c>VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 57 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscalepd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscaleph instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscaleps instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrndscalesd instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W1 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrndscalesh instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrndscalesh instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrndscalesh instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrndscalesh instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vrndscaless instruction.<br/>
		/// <br/>
		/// <c>VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F3A.W0 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vroundpd instruction.<br/>
		/// <br/>
		/// <c>VROUNDPD ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 09 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS xmm1, xmm2/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vroundps instruction.<br/>
		/// <br/>
		/// <c>VROUNDPS ymm1, ymm2/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F3A.WIG 08 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm);
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vroundsd instruction.<br/>
		/// <br/>
		/// <c>VROUNDSD xmm1, xmm2, xmm3/m64, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0B /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vroundss instruction.<br/>
		/// <br/>
		/// <c>VROUNDSS xmm1, xmm2, xmm3/m32, imm8</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F3A.WIG 0A /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt14pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt14ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt14sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrsqrt14sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrsqrt14ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrsqrt14ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrsqrt28pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrsqrt28pd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt28ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrsqrt28ps instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 CC /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrt28sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrsqrt28sd instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrsqrt28ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrsqrt28ss instruction.<br/>
		/// <br/>
		/// <c>VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 CD /r</c><br/>
		/// <br/>
		/// <c>AVX512ER</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrsqrtph instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrsqrtph instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrsqrtph instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vrsqrtph instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrtph instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrtph instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 4E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrtps instruction.<br/>
		/// <br/>
		/// <c>VRSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vrsqrtsh instruction.<br/>
		/// <br/>
		/// <c>VRSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrsqrtsh instruction.<br/>
		/// <br/>
		/// <c>VRSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 4F /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vrsqrtss instruction.<br/>
		/// <br/>
		/// <c>VRSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vrsqrtss instruction.<br/>
		/// <br/>
		/// <c>VRSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 52 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefpd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefph instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vscalefph instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vscalefph instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vscalefph instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.MAP6.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefph instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.MAP6.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefph instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.MAP6.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefps instruction.<br/>
		/// <br/>
		/// <c>VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 2C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefsd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vscalefsd instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W1 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefsh instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vscalefsh instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.MAP6.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscalefss instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vscalefss instruction.<br/>
		/// <br/>
		/// <c>VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F38.W0 2D /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vscatterdpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPD vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vscatterdpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPD vm32x {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vscatterdpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPD vm32y {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vscatterdps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPS vm32x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vscatterdps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPS vm32y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vscatterdps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERDPS vm32z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A2 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vscatterpf0dpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf0dpd(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf0dps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf0dps(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf0qpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf0qpd(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf0qps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF0QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /5 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf0qps(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf1dpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1DPD vm32y {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C6 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf1dpd(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf1dps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1DPS vm32z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C6 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf1dps(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf1qpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1QPD vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 C7 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf1qpd(AssemblerMemoryOperand dst);
		/// <summary>vscatterpf1qps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERPF1QPS vm64z {k1}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 C7 /6 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512PF</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterpf1qps(AssemblerMemoryOperand dst);
		/// <summary>vscatterqpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPD vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W1 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vscatterqpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPD vm64y {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W1 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vscatterqpd instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPD vm64z {k1}, zmm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W1 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
		/// <summary>vscatterqps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPS vm64x {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F38.W0 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSCATTERQPS vm64y {k1}, xmm1</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F38.W0 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
		/// <summary>vscatterqps instruction.<br/>
		/// <br/>
		/// <c>VSCATTERQPS vm64z {k1}, ymm1</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F38.W0 A3 /vsib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshuff32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshuff64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 23 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufi32x4 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W0 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufi64x2 instruction.<br/>
		/// <br/>
		/// <c>VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F3A.W1 43 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufpd instruction.<br/>
		/// <br/>
		/// <c>VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS xmm1, xmm2, xmm3/m128, imm8</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS ymm1, ymm2, ymm3/m256, imm8</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vshufps instruction.<br/>
		/// <br/>
		/// <c>VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 C6 /r ib</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm);
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtpd instruction.<br/>
		/// <br/>
		/// <c>VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtph instruction.<br/>
		/// <br/>
		/// <c>VSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vsqrtph instruction.<br/>
		/// <br/>
		/// <c>VSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vsqrtph instruction.<br/>
		/// <br/>
		/// <c>VSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vsqrtph instruction.<br/>
		/// <br/>
		/// <c>VSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtph instruction.<br/>
		/// <br/>
		/// <c>VSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtph instruction.<br/>
		/// <br/>
		/// <c>VSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtps instruction.<br/>
		/// <br/>
		/// <c>VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
		/// <summary>vsqrtsd instruction.<br/>
		/// <br/>
		/// <c>VSQRTSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsqrtsd instruction.<br/>
		/// <br/>
		/// <c>VSQRTSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsqrtsh instruction.<br/>
		/// <br/>
		/// <c>VSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsqrtsh instruction.<br/>
		/// <br/>
		/// <c>VSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsqrtss instruction.<br/>
		/// <br/>
		/// <c>VSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsqrtss instruction.<br/>
		/// <br/>
		/// <c>VSQRTSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 51 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 51 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vstmxcsr instruction.<br/>
		/// <br/>
		/// <c>VSTMXCSR m32</c><br/>
		/// <br/>
		/// <c>VEX.LZ.0F.WIG AE /3</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vstmxcsr(AssemblerMemoryOperand dst);
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubpd instruction.<br/>
		/// <br/>
		/// <c>VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubph instruction.<br/>
		/// <br/>
		/// <c>VSUBPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsubph instruction.<br/>
		/// <br/>
		/// <c>VSUBPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vsubph instruction.<br/>
		/// <br/>
		/// <c>VSUBPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vsubph instruction.<br/>
		/// <br/>
		/// <c>VSUBPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubph instruction.<br/>
		/// <br/>
		/// <c>VSUBPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubph instruction.<br/>
		/// <br/>
		/// <c>VSUBPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubps instruction.<br/>
		/// <br/>
		/// <c>VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubsd instruction.<br/>
		/// <br/>
		/// <c>VSUBSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsubsd instruction.<br/>
		/// <br/>
		/// <c>VSUBSD xmm1, xmm2, xmm3/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F2.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F2.0F.W1 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubsh instruction.<br/>
		/// <br/>
		/// <c>VSUBSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsubsh instruction.<br/>
		/// <br/>
		/// <c>VSUBSH xmm1 {k1}{z}, xmm2, xmm3/m16{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.MAP5.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vsubss instruction.<br/>
		/// <br/>
		/// <c>VSUBSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vsubss instruction.<br/>
		/// <br/>
		/// <c>VSUBSS xmm1, xmm2, xmm3/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.F3.0F.WIG 5C /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.F3.0F.W0 5C /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vtestpd instruction.<br/>
		/// <br/>
		/// <c>VTESTPD ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0F /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vtestps instruction.<br/>
		/// <br/>
		/// <c>VTESTPS ymm1, ymm2/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F38.W0 0E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vtestps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
		/// <summary>vucomisd instruction.<br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vucomisd instruction.<br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64</c><br/>
		/// <br/>
		/// <c>VEX.LIG.66.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISD xmm1, xmm2/m64{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.66.0F.W1 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vucomish instruction.<br/>
		/// <br/>
		/// <c>VUCOMISH xmm1, xmm2/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP5.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vucomish(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vucomish instruction.<br/>
		/// <br/>
		/// <c>VUCOMISH xmm1, xmm2/m16{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.MAP5.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512-FP16</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vucomish(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vucomiss instruction.<br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>vucomiss instruction.<br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32</c><br/>
		/// <br/>
		/// <c>VEX.LIG.0F.WIG 2E /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUCOMISS xmm1, xmm2/m32{sae}</c><br/>
		/// <br/>
		/// <c>EVEX.LIG.0F.W0 2E /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpckhpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 15 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpckhps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 15 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpcklpd instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 14 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vunpcklps instruction.<br/>
		/// <br/>
		/// <c>VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 14 /r</c><br/>
		/// <br/>
		/// <c>AVX512F</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.66.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vxorpd instruction.<br/>
		/// <br/>
		/// <c>VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.66.0F.W1 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS xmm1, xmm2, xmm3/m128</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.128.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS ymm1, ymm2, ymm3/m256</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 57 /r</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.256.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512VL and AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
		/// <summary>vxorps instruction.<br/>
		/// <br/>
		/// <c>VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst</c><br/>
		/// <br/>
		/// <c>EVEX.512.0F.W0 57 /r</c><br/>
		/// <br/>
		/// <c>AVX512DQ</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
		/// <summary>vzeroall instruction.<br/>
		/// <br/>
		/// <c>VZEROALL</c><br/>
		/// <br/>
		/// <c>VEX.256.0F.WIG 77</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vzeroall();
		/// <summary>vzeroupper instruction.<br/>
		/// <br/>
		/// <c>VZEROUPPER</c><br/>
		/// <br/>
		/// <c>VEX.128.0F.WIG 77</c><br/>
		/// <br/>
		/// <c>AVX</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void vzeroupper();
		/// <summary>wait instruction.<br/>
		/// <br/>
		/// <c>WAIT</c><br/>
		/// <br/>
		/// <c>9B</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wait();
		/// <summary>wbinvd instruction.<br/>
		/// <br/>
		/// <c>WBINVD</c><br/>
		/// <br/>
		/// <c>0F 09</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wbinvd();
		/// <summary>wbnoinvd instruction.<br/>
		/// <br/>
		/// <c>WBNOINVD</c><br/>
		/// <br/>
		/// <c>F3 0F 09</c><br/>
		/// <br/>
		/// <c>WBNOINVD</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wbnoinvd();
		/// <summary>wrfsbase instruction.<br/>
		/// <br/>
		/// <c>WRFSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /2</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void wrfsbase(AssemblerRegister32 dst);
		/// <summary>wrfsbase instruction.<br/>
		/// <br/>
		/// <c>WRFSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /2</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void wrfsbase(AssemblerRegister64 dst);
		/// <summary>wrgsbase instruction.<br/>
		/// <br/>
		/// <c>WRGSBASE r32</c><br/>
		/// <br/>
		/// <c>F3 0F AE /3</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void wrgsbase(AssemblerRegister32 dst);
		/// <summary>wrgsbase instruction.<br/>
		/// <br/>
		/// <c>WRGSBASE r64</c><br/>
		/// <br/>
		/// <c>F3 o64 0F AE /3</c><br/>
		/// <br/>
		/// <c>FSGSBASE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void wrgsbase(AssemblerRegister64 dst);
		/// <summary>wrmsr instruction.<br/>
		/// <br/>
		/// <c>WRMSR</c><br/>
		/// <br/>
		/// <c>0F 30</c><br/>
		/// <br/>
		/// <c>MSR</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wrmsr();
		/// <summary>wrpkru instruction.<br/>
		/// <br/>
		/// <c>WRPKRU</c><br/>
		/// <br/>
		/// <c>NP 0F 01 EF</c><br/>
		/// <br/>
		/// <c>PKU</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wrpkru();
		/// <summary>wrshr instruction.<br/>
		/// <br/>
		/// <c>WRSHR r/m32</c><br/>
		/// <br/>
		/// <c>0F 37 /0</c><br/>
		/// <br/>
		/// <c>Cyrix 6x86MX, M II, III</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void wrshr(AssemblerRegister32 dst);
		/// <summary>wrshr instruction.<br/>
		/// <br/>
		/// <c>WRSHR r/m32</c><br/>
		/// <br/>
		/// <c>0F 37 /0</c><br/>
		/// <br/>
		/// <c>Cyrix 6x86MX, M II, III</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void wrshr(AssemblerMemoryOperand dst);
		/// <summary>wrssd instruction.<br/>
		/// <br/>
		/// <c>WRSSD m32, r32</c><br/>
		/// <br/>
		/// <c>NP 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wrssd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>wrssq instruction.<br/>
		/// <br/>
		/// <c>WRSSQ m64, r64</c><br/>
		/// <br/>
		/// <c>NP o64 0F 38 F6 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void wrssq(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>wrudbg instruction.<br/>
		/// <br/>
		/// <c>WRUDBG</c><br/>
		/// <br/>
		/// <c>0F 0F</c><br/>
		/// <br/>
		/// <c>UDBG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wrudbg();
		/// <summary>wrussd instruction.<br/>
		/// <br/>
		/// <c>WRUSSD m32, r32</c><br/>
		/// <br/>
		/// <c>66 0F 38 F5 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void wrussd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>wrussq instruction.<br/>
		/// <br/>
		/// <c>WRUSSQ m64, r64</c><br/>
		/// <br/>
		/// <c>66 o64 0F 38 F5 /r</c><br/>
		/// <br/>
		/// <c>CET_SS</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void wrussq(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>xabort instruction.<br/>
		/// <br/>
		/// <c>XABORT imm8</c><br/>
		/// <br/>
		/// <c>C6 F8 ib</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xabort(std::int8_t imm);
		/// <summary>xabort instruction.<br/>
		/// <br/>
		/// <c>XABORT imm8</c><br/>
		/// <br/>
		/// <c>C6 F8 ib</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xabort(std::uint8_t imm);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F C0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xadd(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m8, r8</c><br/>
		/// <br/>
		/// <c>0F C0 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xadd(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xadd(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xadd(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xadd(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 0F C1 /r</c><br/>
		/// <br/>
		/// <c>486+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xadd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F C1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xadd(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>xadd instruction.<br/>
		/// <br/>
		/// <c>XADD r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 0F C1 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xadd(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>xbegin instruction.<br/>
		/// <br/>
		/// <c>XBEGIN rel16</c><br/>
		/// <br/>
		/// <c>o16 C7 F8 cw</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XBEGIN rel32</c><br/>
		/// <br/>
		/// <c>o32 C7 F8 cd</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xbegin(Iced::Intel::Label dst);
		/// <summary>xbegin instruction.<br/>
		/// <br/>
		/// <c>XBEGIN rel16</c><br/>
		/// <br/>
		/// <c>o16 C7 F8 cw</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XBEGIN rel32</c><br/>
		/// <br/>
		/// <c>o32 C7 F8 cd</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xbegin(std::uint64_t dst);
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xbts(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xbts(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xbts(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>xbts instruction.<br/>
		/// <br/>
		/// <c>XBTS r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 0F A6 /r</c><br/>
		/// <br/>
		/// <c>386 A0</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xbts(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>86 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xchg(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m8, r8</c><br/>
		/// <br/>
		/// <c>86 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xchg(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r16, AX</c><br/>
		/// <br/>
		/// <c>o16 90+rw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 87 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xchg(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 87 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xchg(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r32, EAX</c><br/>
		/// <br/>
		/// <c>o32 90+rd</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 87 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xchg(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 87 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xchg(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r64, RAX</c><br/>
		/// <br/>
		/// <c>o64 90+ro</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 87 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xchg(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>xchg instruction.<br/>
		/// <br/>
		/// <c>XCHG r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 87 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xchg(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>xcryptcbc instruction.<br/>
		/// <br/>
		/// <c>XCRYPTCBC</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A7 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCBC</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A7 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCBC</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A7 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xcryptcbc();
		/// <summary>xcryptcfb instruction.<br/>
		/// <br/>
		/// <c>XCRYPTCFB</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A7 E0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCFB</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A7 E0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCFB</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A7 E0</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xcryptcfb();
		/// <summary>xcryptctr instruction.<br/>
		/// <br/>
		/// <c>XCRYPTCTR</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A7 D8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCTR</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A7 D8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTCTR</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A7 D8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xcryptctr();
		/// <summary>xcryptecb instruction.<br/>
		/// <br/>
		/// <c>XCRYPTECB</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A7 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTECB</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A7 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTECB</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A7 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xcryptecb();
		/// <summary>xcryptofb instruction.<br/>
		/// <br/>
		/// <c>XCRYPTOFB</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A7 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTOFB</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A7 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XCRYPTOFB</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A7 E8</c><br/>
		/// <br/>
		/// <c>PADLOCK_ACE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xcryptofb();
		/// <summary>xend instruction.<br/>
		/// <br/>
		/// <c>XEND</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D5</c><br/>
		/// <br/>
		/// <c>RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xend();
		/// <summary>xgetbv instruction.<br/>
		/// <br/>
		/// <c>XGETBV</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D0</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xgetbv();
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m8, r8</c><br/>
		/// <br/>
		/// <c>30 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister8 dst, AssemblerRegister8 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m8, r8</c><br/>
		/// <br/>
		/// <c>30 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerMemoryOperand dst, AssemblerRegister8 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 31 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister16 dst, AssemblerRegister16 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m16, r16</c><br/>
		/// <br/>
		/// <c>o16 31 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerMemoryOperand dst, AssemblerRegister16 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 31 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister32 dst, AssemblerRegister32 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m32, r32</c><br/>
		/// <br/>
		/// <c>o32 31 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerMemoryOperand dst, AssemblerRegister32 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 31 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xor_(AssemblerRegister64 dst, AssemblerRegister64 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m64, r64</c><br/>
		/// <br/>
		/// <c>o64 31 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xor_(AssemblerMemoryOperand dst, AssemblerRegister64 src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r8, r/m8</c><br/>
		/// <br/>
		/// <c>32 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister8 dst, AssemblerMemoryOperand src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r16, r/m16</c><br/>
		/// <br/>
		/// <c>o16 33 /r</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister16 dst, AssemblerMemoryOperand src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r32, r/m32</c><br/>
		/// <br/>
		/// <c>o32 33 /r</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister32 dst, AssemblerMemoryOperand src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r64, r/m64</c><br/>
		/// <br/>
		/// <c>o64 33 /r</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xor_(AssemblerRegister64 dst, AssemblerMemoryOperand src);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AL, imm8</c><br/>
		/// <br/>
		/// <c>34 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister8 dst, std::int8_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 35 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister16 dst, std::int16_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 35 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister32 dst, std::int32_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR RAX, imm32</c><br/>
		/// <br/>
		/// <c>o64 35 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /6 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xor_(AssemblerRegister64 dst, std::int32_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m64, imm32</c><br/>
		/// <br/>
		/// <c>o64 81 /6 id</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m64, imm8</c><br/>
		/// <br/>
		/// <c>o64 83 /6 ib</c><br/>
		/// <br/>
		/// <c>X64</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerMemoryOperand dst, std::int32_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AL, imm8</c><br/>
		/// <br/>
		/// <c>34 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister8 dst, std::uint8_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR AX, imm16</c><br/>
		/// <br/>
		/// <c>o16 35 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister16 dst, std::uint16_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR EAX, imm32</c><br/>
		/// <br/>
		/// <c>o32 35 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerRegister32 dst, std::uint32_t imm);
		/// <summary>xor instruction.<br/>
		/// <br/>
		/// <c>XOR r/m32, imm32</c><br/>
		/// <br/>
		/// <c>o32 81 /6 id</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m32, imm8</c><br/>
		/// <br/>
		/// <c>o32 83 /6 ib</c><br/>
		/// <br/>
		/// <c>386+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm16</c><br/>
		/// <br/>
		/// <c>o16 81 /6 iw</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m16, imm8</c><br/>
		/// <br/>
		/// <c>o16 83 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XOR r/m8, imm8</c><br/>
		/// <br/>
		/// <c>80 /6 ib</c><br/>
		/// <br/>
		/// <c>8086+</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xor_(AssemblerMemoryOperand dst, std::uint32_t imm);
		/// <summary>xorpd instruction.<br/>
		/// <br/>
		/// <c>XORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>xorpd instruction.<br/>
		/// <br/>
		/// <c>XORPD xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>66 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE2</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xorpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>xorps instruction.<br/>
		/// <br/>
		/// <c>XORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
		/// <summary>xorps instruction.<br/>
		/// <br/>
		/// <c>XORPS xmm1, xmm2/m128</c><br/>
		/// <br/>
		/// <c>NP 0F 57 /r</c><br/>
		/// <br/>
		/// <c>SSE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xorps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
		/// <summary>xresldtrk instruction.<br/>
		/// <br/>
		/// <c>XRESLDTRK</c><br/>
		/// <br/>
		/// <c>F2 0F 01 E9</c><br/>
		/// <br/>
		/// <c>TSXLDTRK</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xresldtrk();
		/// <summary>xrstor instruction.<br/>
		/// <br/>
		/// <c>XRSTOR mem</c><br/>
		/// <br/>
		/// <c>NP 0F AE /5</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xrstor(AssemblerMemoryOperand dst);
		/// <summary>xrstor64 instruction.<br/>
		/// <br/>
		/// <c>XRSTOR64 mem</c><br/>
		/// <br/>
		/// <c>NP o64 0F AE /5</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xrstor64(AssemblerMemoryOperand dst);
		/// <summary>xrstors instruction.<br/>
		/// <br/>
		/// <c>XRSTORS mem</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /3</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xrstors(AssemblerMemoryOperand dst);
		/// <summary>xrstors64 instruction.<br/>
		/// <br/>
		/// <c>XRSTORS64 mem</c><br/>
		/// <br/>
		/// <c>NP o64 0F C7 /3</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xrstors64(AssemblerMemoryOperand dst);
		/// <summary>xsave instruction.<br/>
		/// <br/>
		/// <c>XSAVE mem</c><br/>
		/// <br/>
		/// <c>NP 0F AE /4</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xsave(AssemblerMemoryOperand dst);
		/// <summary>xsave64 instruction.<br/>
		/// <br/>
		/// <c>XSAVE64 mem</c><br/>
		/// <br/>
		/// <c>NP o64 0F AE /4</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xsave64(AssemblerMemoryOperand dst);
		/// <summary>xsavec instruction.<br/>
		/// <br/>
		/// <c>XSAVEC mem</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /4</c><br/>
		/// <br/>
		/// <c>XSAVEC</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xsavec(AssemblerMemoryOperand dst);
		/// <summary>xsavec64 instruction.<br/>
		/// <br/>
		/// <c>XSAVEC64 mem</c><br/>
		/// <br/>
		/// <c>NP o64 0F C7 /4</c><br/>
		/// <br/>
		/// <c>XSAVEC</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xsavec64(AssemblerMemoryOperand dst);
		/// <summary>xsaveopt instruction.<br/>
		/// <br/>
		/// <c>XSAVEOPT mem</c><br/>
		/// <br/>
		/// <c>NP 0F AE /6</c><br/>
		/// <br/>
		/// <c>XSAVEOPT</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xsaveopt(AssemblerMemoryOperand dst);
		/// <summary>xsaveopt64 instruction.<br/>
		/// <br/>
		/// <c>XSAVEOPT64 mem</c><br/>
		/// <br/>
		/// <c>NP o64 0F AE /6</c><br/>
		/// <br/>
		/// <c>XSAVEOPT</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xsaveopt64(AssemblerMemoryOperand dst);
		/// <summary>xsaves instruction.<br/>
		/// <br/>
		/// <c>XSAVES mem</c><br/>
		/// <br/>
		/// <c>NP 0F C7 /5</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xsaves(AssemblerMemoryOperand dst);
		/// <summary>xsaves64 instruction.<br/>
		/// <br/>
		/// <c>XSAVES64 mem</c><br/>
		/// <br/>
		/// <c>NP o64 0F C7 /5</c><br/>
		/// <br/>
		/// <c>XSAVES</c><br/>
		/// <br/>
		/// <c>64-bit</c></summary>
		void xsaves64(AssemblerMemoryOperand dst);
		/// <summary>xsetbv instruction.<br/>
		/// <br/>
		/// <c>XSETBV</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D1</c><br/>
		/// <br/>
		/// <c>XSAVE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xsetbv();
		/// <summary>xsha1 instruction.<br/>
		/// <br/>
		/// <c>XSHA1</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A6 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XSHA1</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A6 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XSHA1</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A6 C8</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xsha1();
		/// <summary>xsha256 instruction.<br/>
		/// <br/>
		/// <c>XSHA256</c><br/>
		/// <br/>
		/// <c>a64 F3 0F A6 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XSHA256</c><br/>
		/// <br/>
		/// <c>a32 F3 0F A6 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XSHA256</c><br/>
		/// <br/>
		/// <c>a16 F3 0F A6 D0</c><br/>
		/// <br/>
		/// <c>PADLOCK_PHE</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xsha256();
		/// <summary>xstore instruction.<br/>
		/// <br/>
		/// <c>XSTORE</c><br/>
		/// <br/>
		/// <c>a64 0F A7 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_RNG</c><br/>
		/// <br/>
		/// <c>64-bit</c><br/>
		/// <br/>
		/// <c>XSTORE</c><br/>
		/// <br/>
		/// <c>a32 0F A7 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_RNG</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c><br/>
		/// <br/>
		/// <c>XSTORE</c><br/>
		/// <br/>
		/// <c>a16 0F A7 C0</c><br/>
		/// <br/>
		/// <c>PADLOCK_RNG</c><br/>
		/// <br/>
		/// <c>16/32-bit</c></summary>
		void xstore();
		/// <summary>xsusldtrk instruction.<br/>
		/// <br/>
		/// <c>XSUSLDTRK</c><br/>
		/// <br/>
		/// <c>F2 0F 01 E8</c><br/>
		/// <br/>
		/// <c>TSXLDTRK</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xsusldtrk();
		/// <summary>xtest instruction.<br/>
		/// <br/>
		/// <c>XTEST</c><br/>
		/// <br/>
		/// <c>NP 0F 01 D6</c><br/>
		/// <br/>
		/// <c>HLE or RTM</c><br/>
		/// <br/>
		/// <c>16/32/64-bit</c></summary>
		void xtest();
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12, std::uint8_t imm13);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12, std::uint8_t imm13, std::uint8_t imm14);
		/// <summary>Creates a db asm directive with the type byte.</summary>
		void db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12, std::uint8_t imm13, std::uint8_t imm14, std::uint8_t imm15);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12, std::int8_t imm13);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12, std::int8_t imm13, std::int8_t imm14);
		/// <summary>Creates a db asm directive with the type sbyte.</summary>
		void db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12, std::int8_t imm13, std::int8_t imm14, std::int8_t imm15);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4, std::uint16_t imm5);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4, std::uint16_t imm5, std::uint16_t imm6);
		/// <summary>Creates a dw asm directive with the type ushort.</summary>
		void dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4, std::uint16_t imm5, std::uint16_t imm6, std::uint16_t imm7);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4, std::int16_t imm5);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4, std::int16_t imm5, std::int16_t imm6);
		/// <summary>Creates a dw asm directive with the type short.</summary>
		void dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4, std::int16_t imm5, std::int16_t imm6, std::int16_t imm7);
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		void dd(std::uint32_t imm0);
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		void dd(std::uint32_t imm0, std::uint32_t imm1);
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		void dd(std::uint32_t imm0, std::uint32_t imm1, std::uint32_t imm2);
		/// <summary>Creates a dd asm directive with the type uint.</summary>
		void dd(std::uint32_t imm0, std::uint32_t imm1, std::uint32_t imm2, std::uint32_t imm3);
		/// <summary>Creates a dd asm directive with the type int.</summary>
		void dd(std::int32_t imm0);
		/// <summary>Creates a dd asm directive with the type int.</summary>
		void dd(std::int32_t imm0, std::int32_t imm1);
		/// <summary>Creates a dd asm directive with the type int.</summary>
		void dd(std::int32_t imm0, std::int32_t imm1, std::int32_t imm2);
		/// <summary>Creates a dd asm directive with the type int.</summary>
		void dd(std::int32_t imm0, std::int32_t imm1, std::int32_t imm2, std::int32_t imm3);
		/// <summary>Creates a dd asm directive with the type float.</summary>
	  //C# TO C++ CONVERTER TODO TASK: C# 'unsafe' code is not converted by C# to C++ Converter:
	    void dd(float imm0)
	    {
	     AddInstruction(Instruction::CreateDeclareDword( * (uint * ) & imm0));
	    }
		/// <summary>Creates a dd asm directive with the type float.</summary>
	  //C# TO C++ CONVERTER TODO TASK: C# 'unsafe' code is not converted by C# to C++ Converter:
	    void dd(float imm0, float imm1)
	    {
	     AddInstruction(Instruction::CreateDeclareDword( * (uint * ) & imm0, * (uint * ) & imm1));
	    }
		/// <summary>Creates a dd asm directive with the type float.</summary>
	  //C# TO C++ CONVERTER TODO TASK: C# 'unsafe' code is not converted by C# to C++ Converter:
	    void dd(float imm0, float imm1, float imm2)
	    {
	     AddInstruction(Instruction::CreateDeclareDword( * (uint * ) & imm0, * (uint * ) & imm1, * (uint * ) & imm2));
	    }
		/// <summary>Creates a dd asm directive with the type float.</summary>
	  //C# TO C++ CONVERTER TODO TASK: C# 'unsafe' code is not converted by C# to C++ Converter:
	    void dd(float imm0, float imm1, float imm2, float imm3)
	    {
	     AddInstruction(Instruction::CreateDeclareDword( * (uint * ) & imm0, * (uint * ) & imm1, * (uint * ) & imm2, * (uint * ) & imm3));
	    }
		/// <summary>Creates a dq asm directive with the type ulong.</summary>
		void dq(std::uint64_t imm0);
		/// <summary>Creates a dq asm directive with the type ulong.</summary>
		void dq(std::uint64_t imm0, std::uint64_t imm1);
		/// <summary>Creates a dq asm directive with the type long.</summary>
		void dq(std::int64_t imm0);
		/// <summary>Creates a dq asm directive with the type long.</summary>
		void dq(std::int64_t imm0, std::int64_t imm1);
		/// <summary>Creates a dq asm directive with the type double.</summary>
	  //C# TO C++ CONVERTER TODO TASK: C# 'unsafe' code is not converted by C# to C++ Converter:
	    void dq(double imm0)
	    {
	     AddInstruction(Instruction::CreateDeclareQword( * (ulong * ) & imm0));
	    }
		/// <summary>Creates a dq asm directive with the type double.</summary>
	  //C# TO C++ CONVERTER TODO TASK: C# 'unsafe' code is not converted by C# to C++ Converter:
	    void dq(double imm0, double imm1)
	    {
	     AddInstruction(Instruction::CreateDeclareQword( * (ulong * ) & imm0, * (ulong * ) & imm1));
	    }
	};
}
