#pragma once

#include <cstdint>
#include <string>

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
namespace Iced::Intel
{
	enum class Register;
	enum class AssemblerOperandFlags;
	
	class AssemblerMemoryOperand;
	class AssemblerRegisterXMM;
	class AssemblerRegisterYMM;
	class AssemblerRegisterZMM;

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
   //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
   //ORIGINAL LINE: [DebuggerDisplay("{" + nameof(Value) + "}")][EditorBrowsable(EditorBrowsableState.Never)] public partial struct AssemblerRegister32: IEquatable<AssemblerRegister32>
	class AssemblerRegister32
	{
		/// <summary>
		/// Creates a new instance.
		/// </summary>
		/// <param name="value">A Register</param>
	public:
		constexpr AssemblerRegister32(Register value);
		/// <summary>
		/// The register value.
		/// </summary>
		Register Value = static_cast<Register>(0);
		/// <summary>
		/// Creates a new instance.
		/// </summary>
		/// <param name="value">A register</param>
		/// <param name="flags">The mask</param>
		constexpr AssemblerRegister32(Register value, AssemblerOperandFlags flags);
		AssemblerOperandFlags Flags = static_cast<AssemblerOperandFlags>(0);
		/// <summary>
		/// Apply mask Register K1.
		/// </summary>
		constexpr AssemblerRegister32 k1() const;
		/// <summary>
		/// Apply mask Register K2.
		/// </summary>
		constexpr AssemblerRegister32 k2() const;
		/// <summary>
		/// Apply mask Register K3.
		/// </summary>
		constexpr AssemblerRegister32 k3() const;
		/// <summary>
		/// Apply mask Register K4.
		/// </summary>
		constexpr AssemblerRegister32 k4() const;
		/// <summary>
		/// Apply mask Register K5.
		/// </summary>
		constexpr AssemblerRegister32 k5() const;
		/// <summary>
		/// Apply mask Register K6.
		/// </summary>
		constexpr AssemblerRegister32 k6() const;
		/// <summary>
		/// Apply mask Register K7.
		/// </summary>
		constexpr AssemblerRegister32 k7() const;
		/// <summary>
		/// Apply mask Zeroing.
		/// </summary>
		constexpr AssemblerRegister32 z() const;
		/// <summary>
		/// Suppress all exceptions
		/// </summary>
		constexpr AssemblerRegister32 sae() const;
		/// <summary>
		/// Round to nearest (even)
		/// </summary>
		constexpr AssemblerRegister32 rn_sae() const;
		/// <summary>
		/// Round down (toward -inf)
		/// </summary>
		constexpr AssemblerRegister32 rd_sae() const;
		/// <summary>
		/// Round up (toward +inf)
		/// </summary>
		constexpr AssemblerRegister32 ru_sae() const;
		/// <summary>
		/// Round toward zero (truncate)
		/// </summary>
		constexpr AssemblerRegister32 rz_sae() const;
		/// <summary>
		/// Converts a <see cref="AssemblerRegister32"/> to a <see cref="Register"/>.
		/// </summary>
		/// <param name="reg">AssemblerRegister32</param>
		/// <returns></returns>
		constexpr operator Register() const;
		/// <summary>
		/// Adds a register (base) to another register (index) and return a memory operand.
		/// </summary>
		/// <param name="left">The base register.</param>
		/// <param name="right">The index register</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator + (AssemblerRegister32 right) const;
		/// <summary>
		/// Adds a register (base) to another register (index) and return a memory operand.
		/// </summary>
		/// <param name="left">The base register.</param>
		/// <param name="right">The index register</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator + (AssemblerRegisterXMM right) const;
		/// <summary>
		/// Adds a register (base) to another register (index) and return a memory operand.
		/// </summary>
		/// <param name="left">The base register.</param>
		/// <param name="right">The index register</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator + (AssemblerRegisterYMM right) const;
		/// <summary>
		/// Adds a register (base) to another register (index) and return a memory operand.
		/// </summary>
		/// <param name="left">The base register.</param>
		/// <param name="right">The index register</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator + (AssemblerRegisterZMM right) const;
		/// <summary>
		/// Adds a register (base) with a displacement and return a memory operand.
		/// </summary>
		/// <param name="left">The base register</param>
		/// <param name="displacement">The displacement</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator + (std::int64_t displacement) const;
		/// <summary>
		/// Subtracts a register (base) with a displacement and return a memory operand.
		/// </summary>
		/// <param name="left">The base register</param>
		/// <param name="displacement">The displacement</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator - (std::int64_t displacement) const;
		/// <summary>
		/// Multiplies an index register by a scale and return a memory operand.
		/// </summary>
		/// <param name="left">The base register</param>
		/// <param name="scale">The scale</param>
		/// <returns></returns>
		constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;
		/// <inheritdoc />
		inline std::int32_t GetHashCode() const;
		/// <summary>
		/// Equality operator for <see cref="AssemblerRegister32"/>
		/// </summary>
		/// <param name="left">Register</param>
		/// <param name="right">Register</param>
		/// <returns></returns>
		constexpr bool operator == (AssemblerRegister32 right) const;
		/// <summary>
		/// Inequality operator for <see cref="AssemblerRegister32"/>
		/// </summary>
		/// <param name="left">Register</param>
		/// <param name="right">Register</param>
		/// <returns></returns>
		constexpr bool operator != (AssemblerRegister32 right) const;

		constexpr bool operator == (Register right) const;
		
		inline std::string ToString() const;

		constexpr AssemblerRegister32() = default;
	};
}
