// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

#include "MemoryOperandSize.g.h"
#include "../Register.g.h"
#include "AssemblerOperandFlags.h"
#include "AssemblerMemoryOperand.h"
#include "Label.h"
#include "AssemblerRegister16.h"
#include "AssemblerRegister32.h"
#include "AssemblerRegister64.h"

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
namespace Iced::Intel
{
	/// <summary>
	/// Memory operand factory.
	/// </summary>
   //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
   //ORIGINAL LINE: [EditorBrowsable(EditorBrowsableState.Never)] public partial struct AssemblerMemoryOperandFactory
	class AssemblerMemoryOperandFactory
	{
		/// <summary>
		/// Creates a new instance.
		/// </summary>
		/// <param name="size">Size of this memory operand.</param>
	public:
		AssemblerMemoryOperandFactory(MemoryOperandSize size);
		/// <summary>
		/// Creates a new instance.
		/// </summary>
		/// <param name="size">Size of this memory operand.</param>
		/// <param name="segment">Segment register</param>
		/// <param name="flags">Flags</param>
		AssemblerMemoryOperandFactory(MemoryOperandSize size, Register segment, AssemblerOperandFlags flags);
		/// <summary>
		/// Size of this memory operand.
		/// </summary>
		MemoryOperandSize Size = static_cast<MemoryOperandSize>(0);
		/// <summary>
		/// Segment register.
		/// </summary>
		Register Segment = static_cast<Register>(0);
		/// <summary>
		/// Gets the mask associated with this operand.
		/// </summary>
		AssemblerOperandFlags Flags = static_cast<AssemblerOperandFlags>(0);
		/// <summary>
		/// Use the ES register with this memory operand.
		/// </summary>
		AssemblerMemoryOperandFactory GetEs() const;
		/// <summary>
		/// Use the CS register with this memory operand.
		/// </summary>
		AssemblerMemoryOperandFactory GetCs() const;
		/// <summary>
		/// Use the CS register with this memory operand.
		/// </summary>
		AssemblerMemoryOperandFactory GetSs() const;
		/// <summary>
		/// Use the DS register with this memory operand.
		/// </summary>
		AssemblerMemoryOperandFactory GetDs() const;
		/// <summary>
		/// Use the FS register with this memory operand.
		/// </summary>
		AssemblerMemoryOperandFactory GetFs() const;
		/// <summary>
		/// Use the GS register with this memory operand.
		/// </summary>
		AssemblerMemoryOperandFactory GetGs() const;
		/// <summary>
		/// Specify the content of the memory operand (Base + Index * Scale + Displacement).
		/// </summary>
		/// <param name="operand">Size of this memory operand.</param>
		AssemblerMemoryOperand operator [](AssemblerMemoryOperand operand);
		/// <summary>
		/// Specify a long offset displacement.
		/// </summary>
		/// <param name="offset">Offset of this memory operand.</param>
		AssemblerMemoryOperand operator [](std::int64_t offset);
		/// <summary>
		/// Specify a ulong offset displacement.
		/// </summary>
		/// <param name="offset">Offset of this memory operand.</param>
		AssemblerMemoryOperand operator [](std::uint64_t offset);
		/// <summary>
		/// Specify a memory operand with a label.
		/// </summary>
		AssemblerMemoryOperand operator [](const Label& label);


		/// <summary>
		/// Specify a base register used with this memory operand (Base + Index * Scale + Displacement)
		/// </summary>
		/// <param name="register">Size of this memory operand.</param>
		AssemblerMemoryOperand operator [](AssemblerRegister16 register_);


		/// <summary>
		/// Specify a base register used with this memory operand (Base + Index * Scale + Displacement)
		/// </summary>
		/// <param name="register">Size of this memory operand.</param>
		AssemblerMemoryOperand operator [](AssemblerRegister32 register_);


		/// <summary>
		/// Specify a base register used with this memory operand (Base + Index * Scale + Displacement)
		/// </summary>
		/// <param name="register">Size of this memory operand.</param>
		AssemblerMemoryOperand operator [](AssemblerRegister64 register_);

		AssemblerMemoryOperandFactory() = default;
	};
}
