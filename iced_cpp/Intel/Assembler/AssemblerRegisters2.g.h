/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(ENCODER) && defined(BLOCK_ENCODER) && defined(CODE_ASSEMBLER)
#include "AssemblerMemoryOperandFactory.h"
#include "../Register.g.h"

namespace Iced::Intel {
	/// <summary>
	/// Registers used for <see cref="Assembler"/>. 
	/// </summary>
	namespace AssemblerRegisters {
		/// <summary>
		/// Gets a memory operand with no size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __ = AssemblerMemoryOperandFactory(MemoryOperandSize::None);

		/// <summary>
		/// Gets a memory operand with a <c>BYTE PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __byte_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Byte);

		/// <summary>
		/// Gets a memory operand with a <c>WORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __word_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Word);

		/// <summary>
		/// Gets a memory operand with a <c>DWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __dword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Dword);

		/// <summary>
		/// Gets a memory operand with a <c>QWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __qword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Qword);

		/// <summary>
		/// Gets a memory operand with an <c>MMWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __mmword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Qword);

		/// <summary>
		/// Gets a memory operand with a <c>TBYTE PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __tbyte_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Tbyte);

		/// <summary>
		/// Gets a memory operand with a <c>TWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __tword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Tbyte);

		/// <summary>
		/// Gets a memory operand with an <c>FWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __fword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Fword);

		/// <summary>
		/// Gets a memory operand with an <c>OWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __oword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Xword);

		/// <summary>
		/// Gets a memory operand with an <c>XMMWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __xmmword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Xword);

		/// <summary>
		/// Gets a memory operand with a <c>YMMWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __ymmword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Yword);

		/// <summary>
		/// Gets a memory operand with a <c>ZMMWORD PTR</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __zmmword_ptr = AssemblerMemoryOperandFactory(MemoryOperandSize::Zword);

		/// <summary>
		/// Gets a broadcast memory operand with no size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __bcst = AssemblerMemoryOperandFactory(MemoryOperandSize::None, Register::None, AssemblerOperandFlags::Broadcast);

		/// <summary>
		/// Gets a broadcast memory operand with a <c>WORD BCST</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __word_bcst = AssemblerMemoryOperandFactory(MemoryOperandSize::Word, Register::None, AssemblerOperandFlags::Broadcast);

		/// <summary>
		/// Gets a broadcast memory operand with a <c>DWORD BCST</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __dword_bcst = AssemblerMemoryOperandFactory(MemoryOperandSize::Dword, Register::None, AssemblerOperandFlags::Broadcast);

		/// <summary>
		/// Gets a broadcast memory operand with a <c>QWORD BCST</c> size hint
		/// </summary>
		inline constexpr AssemblerMemoryOperandFactory __qword_bcst = AssemblerMemoryOperandFactory(MemoryOperandSize::Qword, Register::None, AssemblerOperandFlags::Broadcast);
	}
}
#endif
