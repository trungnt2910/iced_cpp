// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

#include "../Register.g.h"
#include "AssemblerOperandFlags.h"
#include <any>
#include <format>

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
namespace Iced::Intel
{
	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
   //C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
   //ORIGINAL LINE: [DebuggerDisplay("{" + nameof(Value) + "}")][EditorBrowsable(EditorBrowsableState.Never)] public partial struct AssemblerRegisterK: IEquatable<AssemblerRegisterK>
	class AssemblerRegisterK : public IEquatable<AssemblerRegisterK>
	{
		/// <summary>
		/// Creates a new instance.
		/// </summary>
		/// <param name="value">A Register</param>
	public:
		AssemblerRegisterK(Register value);
		/// <summary>
		/// The register value.
		/// </summary>
		Register Value = static_cast<Register>(0);
		/// <summary>
		/// Creates a new instance.
		/// </summary>
		/// <param name="value">A register</param>
		/// <param name="flags">The mask</param>
		AssemblerRegisterK(Register value, AssemblerOperandFlags flags);
		AssemblerOperandFlags Flags = static_cast<AssemblerOperandFlags>(0);
		/// <summary>
		/// Apply mask Register K1.
		/// </summary>
		AssemblerRegisterK k1() const;
		/// <summary>
		/// Apply mask Register K2.
		/// </summary>
		AssemblerRegisterK k2() const;
		/// <summary>
		/// Apply mask Register K3.
		/// </summary>
		AssemblerRegisterK k3() const;
		/// <summary>
		/// Apply mask Register K4.
		/// </summary>
		AssemblerRegisterK k4() const;
		/// <summary>
		/// Apply mask Register K5.
		/// </summary>
		AssemblerRegisterK k5() const;
		/// <summary>
		/// Apply mask Register K6.
		/// </summary>
		AssemblerRegisterK k6() const;
		/// <summary>
		/// Apply mask Register K7.
		/// </summary>
		AssemblerRegisterK k7() const;
		/// <summary>
		/// Apply mask Zeroing.
		/// </summary>
		AssemblerRegisterK z() const;
		/// <summary>
		/// Converts a <see cref="AssemblerRegisterK"/> to a <see cref="Register"/>.
		/// </summary>
		/// <param name="reg">AssemblerRegisterK</param>
		/// <returns></returns>
		operator Register() const;
		/// <inheritdoc />
		bool Equals(AssemblerRegisterK other) override;
		/// <inheritdoc />
		std::int32_t GetHashCode();
		/// <inheritdoc />
	  //C# TO C++ CONVERTER WARNING: Nullable reference types have no equivalent in C++:
	  //ORIGINAL LINE: public override bool Equals(Object? obj)
		bool Equals(std::any obj);
		/// <summary>
		/// Equality operator for <see cref="AssemblerRegisterK"/>
		/// </summary>
		/// <param name="left">Register</param>
		/// <param name="right">Register</param>
		/// <returns></returns>
		bool operator == (AssemblerRegisterK right);
		/// <summary>
		/// Inequality operator for <see cref="AssemblerRegisterK"/>
		/// </summary>
		/// <param name="left">Register</param>
		/// <param name="right">Register</param>
		/// <returns></returns>
		bool operator != (AssemblerRegisterK right);

		inline bool operator == (Register right) { return (Register)(*this) == right; }
		inline std::string ToString() const { return to_string(Value); }

		AssemblerRegisterK() = default;
	};
}
