/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

/// <summary>
/// Specify a base register used with this memory operand (Base + Index * Scale + Displacement)
/// </summary>
/// <param name="register">Size of this memory operand.</param>
constexpr AssemblerMemoryOperand operator[](AssemblerRegister16 register_) const {
	return AssemblerMemoryOperand(Size, Segment, register_, Register::None, 1, 0, Flags);
}
/// <summary>
/// Specify a base register used with this memory operand (Base + Index * Scale + Displacement)
/// </summary>
/// <param name="register">Size of this memory operand.</param>
constexpr AssemblerMemoryOperand operator[](AssemblerRegister32 register_) const {
	return AssemblerMemoryOperand(Size, Segment, register_, Register::None, 1, 0, Flags);
}
/// <summary>
/// Specify a base register used with this memory operand (Base + Index * Scale + Displacement)
/// </summary>
/// <param name="register">Size of this memory operand.</param>
constexpr AssemblerMemoryOperand operator[](AssemblerRegister64 register_) const {
	return AssemblerMemoryOperand(Size, Segment, register_, Register::None, 1, 0, Flags);
}
