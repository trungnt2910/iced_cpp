/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(ENCODER) && defined(BLOCK_ENCODER) && defined(CODE_ASSEMBLER)
#include <cstdint>
#include <string>
#include "../Register.g.h"
#include "AssemblerMemoryOperand.h"

namespace Iced::Intel {

	struct AssemblerRegister8;
	struct AssemblerRegister16;
	struct AssemblerRegister32;
	struct AssemblerRegister64;
	struct AssemblerRegisterSegment;
	struct AssemblerRegisterCR;
	struct AssemblerRegisterDR;
	struct AssemblerRegisterTR;
	struct AssemblerRegisterST;
	struct AssemblerRegisterMM;
	struct AssemblerRegisterXMM;
	struct AssemblerRegisterYMM;
	struct AssemblerRegisterZMM;
	struct AssemblerRegisterTMM;
	struct AssemblerRegisterK;
	struct AssemblerRegisterBND;
	struct AssemblerMemoryOperand;

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegister8 {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegister8(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegister8"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegister8</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegister8"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegister8& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister8"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegister8& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister8"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegister16 {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegister16(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegister16"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegister16</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegister16& right) const;

			/// <summary>
			/// Adds a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(std::int64_t displacement) const;

			/// <summary>
			/// Subtracts a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator -(std::int64_t displacement) const;

			/// <summary>
			/// Multiplies an index register by a scale and return a memory operand.
			/// </summary>
			/// <param name="scale">The scale</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegister16"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegister16& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister16"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegister16& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister16"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegister32 {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

			const AssemblerOperandFlags Flags;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegister32(Register value);


			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A register</param>
			/// <param name="flags">The mask</param>
			constexpr AssemblerRegister32(Register value, AssemblerOperandFlags flags);

			/// <summary>
			/// Apply mask Register K1.
			/// </summary>
			constexpr AssemblerRegister32 k1() const;

			/// <summary>
			/// Apply mask Register K2.
			/// </summary>
			constexpr AssemblerRegister32 k2() const;

			/// <summary>
			/// Apply mask Register K3.
			/// </summary>
			constexpr AssemblerRegister32 k3() const;

			/// <summary>
			/// Apply mask Register K4.
			/// </summary>
			constexpr AssemblerRegister32 k4() const;

			/// <summary>
			/// Apply mask Register K5.
			/// </summary>
			constexpr AssemblerRegister32 k5() const;

			/// <summary>
			/// Apply mask Register K6.
			/// </summary>
			constexpr AssemblerRegister32 k6() const;

			/// <summary>
			/// Apply mask Register K7.
			/// </summary>
			constexpr AssemblerRegister32 k7() const;

			/// <summary>
			/// Apply mask Zeroing.
			/// </summary>
			constexpr AssemblerRegister32 z() const;

			/// <summary>
			/// Suppress all exceptions
			/// </summary>
			constexpr AssemblerRegister32 sae() const;

			/// <summary>
			/// Round to nearest (even)
			/// </summary>
			constexpr AssemblerRegister32 rn_sae() const;

			/// <summary>
			/// Round down (toward -inf)
			/// </summary>
			constexpr AssemblerRegister32 rd_sae() const;

			/// <summary>
			/// Round up (toward +inf)
			/// </summary>
			constexpr AssemblerRegister32 ru_sae() const;

			/// <summary>
			/// Round toward zero (truncate)
			/// </summary>
			constexpr AssemblerRegister32 rz_sae() const;

			/// <summary>
			/// Converts a <see cref="AssemblerRegister32"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegister32</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegister32& right) const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegisterXMM& right) const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegisterYMM& right) const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegisterZMM& right) const;

			/// <summary>
			/// Adds a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(std::int64_t displacement) const;

			/// <summary>
			/// Subtracts a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator -(std::int64_t displacement) const;

			/// <summary>
			/// Multiplies an index register by a scale and return a memory operand.
			/// </summary>
			/// <param name="scale">The scale</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegister32"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegister32& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister32"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegister32& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister32"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegister64 {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

			const AssemblerOperandFlags Flags;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegister64(Register value);


			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A register</param>
			/// <param name="flags">The mask</param>
			constexpr AssemblerRegister64(Register value, AssemblerOperandFlags flags);

			/// <summary>
			/// Apply mask Register K1.
			/// </summary>
			constexpr AssemblerRegister64 k1() const;

			/// <summary>
			/// Apply mask Register K2.
			/// </summary>
			constexpr AssemblerRegister64 k2() const;

			/// <summary>
			/// Apply mask Register K3.
			/// </summary>
			constexpr AssemblerRegister64 k3() const;

			/// <summary>
			/// Apply mask Register K4.
			/// </summary>
			constexpr AssemblerRegister64 k4() const;

			/// <summary>
			/// Apply mask Register K5.
			/// </summary>
			constexpr AssemblerRegister64 k5() const;

			/// <summary>
			/// Apply mask Register K6.
			/// </summary>
			constexpr AssemblerRegister64 k6() const;

			/// <summary>
			/// Apply mask Register K7.
			/// </summary>
			constexpr AssemblerRegister64 k7() const;

			/// <summary>
			/// Apply mask Zeroing.
			/// </summary>
			constexpr AssemblerRegister64 z() const;

			/// <summary>
			/// Suppress all exceptions
			/// </summary>
			constexpr AssemblerRegister64 sae() const;

			/// <summary>
			/// Round to nearest (even)
			/// </summary>
			constexpr AssemblerRegister64 rn_sae() const;

			/// <summary>
			/// Round down (toward -inf)
			/// </summary>
			constexpr AssemblerRegister64 rd_sae() const;

			/// <summary>
			/// Round up (toward +inf)
			/// </summary>
			constexpr AssemblerRegister64 ru_sae() const;

			/// <summary>
			/// Round toward zero (truncate)
			/// </summary>
			constexpr AssemblerRegister64 rz_sae() const;

			/// <summary>
			/// Converts a <see cref="AssemblerRegister64"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegister64</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegister64& right) const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegisterXMM& right) const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegisterYMM& right) const;

			/// <summary>
			/// Adds a register (base) to another register (index) and return a memory operand.
			/// </summary>
			/// <param name="right">The index register</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(const AssemblerRegisterZMM& right) const;

			/// <summary>
			/// Adds a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(std::int64_t displacement) const;

			/// <summary>
			/// Subtracts a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator -(std::int64_t displacement) const;

			/// <summary>
			/// Multiplies an index register by a scale and return a memory operand.
			/// </summary>
			/// <param name="scale">The scale</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegister64"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegister64& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister64"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegister64& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegister64"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterSegment {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterSegment(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterSegment"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterSegment</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterSegment"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterSegment& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterSegment"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterSegment& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterSegment"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterCR {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterCR(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterCR"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterCR</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterCR"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterCR& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterCR"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterCR& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterCR"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterDR {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterDR(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterDR"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterDR</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterDR"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterDR& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterDR"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterDR& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterDR"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterTR {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterTR(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterTR"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterTR</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterTR"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterTR& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterTR"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterTR& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterTR"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterST {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterST(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterST"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterST</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterST"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterST& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterST"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterST& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterST"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterMM {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterMM(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterMM"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterMM</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterMM"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterXMM {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

			const AssemblerOperandFlags Flags;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterXMM(Register value);


			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A register</param>
			/// <param name="flags">The mask</param>
			constexpr AssemblerRegisterXMM(Register value, AssemblerOperandFlags flags);

			/// <summary>
			/// Apply mask Register K1.
			/// </summary>
			constexpr AssemblerRegisterXMM k1() const;

			/// <summary>
			/// Apply mask Register K2.
			/// </summary>
			constexpr AssemblerRegisterXMM k2() const;

			/// <summary>
			/// Apply mask Register K3.
			/// </summary>
			constexpr AssemblerRegisterXMM k3() const;

			/// <summary>
			/// Apply mask Register K4.
			/// </summary>
			constexpr AssemblerRegisterXMM k4() const;

			/// <summary>
			/// Apply mask Register K5.
			/// </summary>
			constexpr AssemblerRegisterXMM k5() const;

			/// <summary>
			/// Apply mask Register K6.
			/// </summary>
			constexpr AssemblerRegisterXMM k6() const;

			/// <summary>
			/// Apply mask Register K7.
			/// </summary>
			constexpr AssemblerRegisterXMM k7() const;

			/// <summary>
			/// Apply mask Zeroing.
			/// </summary>
			constexpr AssemblerRegisterXMM z() const;

			/// <summary>
			/// Suppress all exceptions
			/// </summary>
			constexpr AssemblerRegisterXMM sae() const;

			/// <summary>
			/// Round to nearest (even)
			/// </summary>
			constexpr AssemblerRegisterXMM rn_sae() const;

			/// <summary>
			/// Round down (toward -inf)
			/// </summary>
			constexpr AssemblerRegisterXMM rd_sae() const;

			/// <summary>
			/// Round up (toward +inf)
			/// </summary>
			constexpr AssemblerRegisterXMM ru_sae() const;

			/// <summary>
			/// Round toward zero (truncate)
			/// </summary>
			constexpr AssemblerRegisterXMM rz_sae() const;

			/// <summary>
			/// Converts a <see cref="AssemblerRegisterXMM"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterXMM</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <summary>
			/// Adds a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(std::int64_t displacement) const;

			/// <summary>
			/// Subtracts a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator -(std::int64_t displacement) const;

			/// <summary>
			/// Multiplies an index register by a scale and return a memory operand.
			/// </summary>
			/// <param name="scale">The scale</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterXMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterXMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterXMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterXMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterXMM"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterYMM {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

			const AssemblerOperandFlags Flags;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterYMM(Register value);


			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A register</param>
			/// <param name="flags">The mask</param>
			constexpr AssemblerRegisterYMM(Register value, AssemblerOperandFlags flags);

			/// <summary>
			/// Apply mask Register K1.
			/// </summary>
			constexpr AssemblerRegisterYMM k1() const;

			/// <summary>
			/// Apply mask Register K2.
			/// </summary>
			constexpr AssemblerRegisterYMM k2() const;

			/// <summary>
			/// Apply mask Register K3.
			/// </summary>
			constexpr AssemblerRegisterYMM k3() const;

			/// <summary>
			/// Apply mask Register K4.
			/// </summary>
			constexpr AssemblerRegisterYMM k4() const;

			/// <summary>
			/// Apply mask Register K5.
			/// </summary>
			constexpr AssemblerRegisterYMM k5() const;

			/// <summary>
			/// Apply mask Register K6.
			/// </summary>
			constexpr AssemblerRegisterYMM k6() const;

			/// <summary>
			/// Apply mask Register K7.
			/// </summary>
			constexpr AssemblerRegisterYMM k7() const;

			/// <summary>
			/// Apply mask Zeroing.
			/// </summary>
			constexpr AssemblerRegisterYMM z() const;

			/// <summary>
			/// Suppress all exceptions
			/// </summary>
			constexpr AssemblerRegisterYMM sae() const;

			/// <summary>
			/// Round to nearest (even)
			/// </summary>
			constexpr AssemblerRegisterYMM rn_sae() const;

			/// <summary>
			/// Round down (toward -inf)
			/// </summary>
			constexpr AssemblerRegisterYMM rd_sae() const;

			/// <summary>
			/// Round up (toward +inf)
			/// </summary>
			constexpr AssemblerRegisterYMM ru_sae() const;

			/// <summary>
			/// Round toward zero (truncate)
			/// </summary>
			constexpr AssemblerRegisterYMM rz_sae() const;

			/// <summary>
			/// Converts a <see cref="AssemblerRegisterYMM"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterYMM</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <summary>
			/// Adds a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(std::int64_t displacement) const;

			/// <summary>
			/// Subtracts a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator -(std::int64_t displacement) const;

			/// <summary>
			/// Multiplies an index register by a scale and return a memory operand.
			/// </summary>
			/// <param name="scale">The scale</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterYMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterYMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterYMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterYMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterYMM"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterZMM {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

			const AssemblerOperandFlags Flags;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterZMM(Register value);


			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A register</param>
			/// <param name="flags">The mask</param>
			constexpr AssemblerRegisterZMM(Register value, AssemblerOperandFlags flags);

			/// <summary>
			/// Apply mask Register K1.
			/// </summary>
			constexpr AssemblerRegisterZMM k1() const;

			/// <summary>
			/// Apply mask Register K2.
			/// </summary>
			constexpr AssemblerRegisterZMM k2() const;

			/// <summary>
			/// Apply mask Register K3.
			/// </summary>
			constexpr AssemblerRegisterZMM k3() const;

			/// <summary>
			/// Apply mask Register K4.
			/// </summary>
			constexpr AssemblerRegisterZMM k4() const;

			/// <summary>
			/// Apply mask Register K5.
			/// </summary>
			constexpr AssemblerRegisterZMM k5() const;

			/// <summary>
			/// Apply mask Register K6.
			/// </summary>
			constexpr AssemblerRegisterZMM k6() const;

			/// <summary>
			/// Apply mask Register K7.
			/// </summary>
			constexpr AssemblerRegisterZMM k7() const;

			/// <summary>
			/// Apply mask Zeroing.
			/// </summary>
			constexpr AssemblerRegisterZMM z() const;

			/// <summary>
			/// Suppress all exceptions
			/// </summary>
			constexpr AssemblerRegisterZMM sae() const;

			/// <summary>
			/// Round to nearest (even)
			/// </summary>
			constexpr AssemblerRegisterZMM rn_sae() const;

			/// <summary>
			/// Round down (toward -inf)
			/// </summary>
			constexpr AssemblerRegisterZMM rd_sae() const;

			/// <summary>
			/// Round up (toward +inf)
			/// </summary>
			constexpr AssemblerRegisterZMM ru_sae() const;

			/// <summary>
			/// Round toward zero (truncate)
			/// </summary>
			constexpr AssemblerRegisterZMM rz_sae() const;

			/// <summary>
			/// Converts a <see cref="AssemblerRegisterZMM"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterZMM</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <summary>
			/// Adds a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator +(std::int64_t displacement) const;

			/// <summary>
			/// Subtracts a register (base) with a displacement and return a memory operand.
			/// </summary>
			/// <param name="displacement">The displacement</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator -(std::int64_t displacement) const;

			/// <summary>
			/// Multiplies an index register by a scale and return a memory operand.
			/// </summary>
			/// <param name="scale">The scale</param>
			/// <returns></returns>
			constexpr AssemblerMemoryOperand operator *(std::int32_t scale) const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterZMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterZMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterZMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterZMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterZMM"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterTMM {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterTMM(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterTMM"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterTMM</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterTMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterTMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterTMM"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterTMM& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterTMM"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterK {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

			const AssemblerOperandFlags Flags;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterK(Register value);


			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A register</param>
			/// <param name="flags">The mask</param>
			constexpr AssemblerRegisterK(Register value, AssemblerOperandFlags flags);

			/// <summary>
			/// Apply mask Register K1.
			/// </summary>
			constexpr AssemblerRegisterK k1() const;

			/// <summary>
			/// Apply mask Register K2.
			/// </summary>
			constexpr AssemblerRegisterK k2() const;

			/// <summary>
			/// Apply mask Register K3.
			/// </summary>
			constexpr AssemblerRegisterK k3() const;

			/// <summary>
			/// Apply mask Register K4.
			/// </summary>
			constexpr AssemblerRegisterK k4() const;

			/// <summary>
			/// Apply mask Register K5.
			/// </summary>
			constexpr AssemblerRegisterK k5() const;

			/// <summary>
			/// Apply mask Register K6.
			/// </summary>
			constexpr AssemblerRegisterK k6() const;

			/// <summary>
			/// Apply mask Register K7.
			/// </summary>
			constexpr AssemblerRegisterK k7() const;

			/// <summary>
			/// Apply mask Zeroing.
			/// </summary>
			constexpr AssemblerRegisterK z() const;

			/// <summary>
			/// Converts a <see cref="AssemblerRegisterK"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterK</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterK"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterK& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterK"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterK& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterK"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};

	/// <summary>
	/// An assembler register used with <see cref="Assembler"/>.
	/// </summary>
	struct AssemblerRegisterBND {
		public:
			/// <summary>
			/// The register value.
			/// </summary>
			const Register Value;

		public:
			/// <summary>
			/// Creates a new instance.
			/// </summary>
			/// <param name="value">A Register</param>
			constexpr AssemblerRegisterBND(Register value);


			/// <summary>
			/// Converts a <see cref="AssemblerRegisterBND"/> to a <see cref="Register"/>.
			/// </summary>
			/// <param name="reg">AssemblerRegisterBND</param>
			/// <returns></returns>
			constexpr operator Register() const;

			/// <inheritdoc />
			constexpr std::size_t GetHashCode() const;

			/// <inheritdoc />
			constexpr std::string ToString() const;

			/// <summary>
			/// Equality operator for <see cref="AssemblerRegisterBND"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const AssemblerRegisterBND& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterBND"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator !=(const AssemblerRegisterBND& right) const;

			/// <summary>
			/// Inequality operator for <see cref="AssemblerRegisterBND"/> with <see cref="Register"/>
			/// </summary>
			/// <param name="right">Register</param>
			/// <returns></returns>
			constexpr bool operator ==(const Register& right) const;
	};
}
#endif
