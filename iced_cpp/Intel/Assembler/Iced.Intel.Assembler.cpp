// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#include "Iced.Intel.Assembler.h"
#include "../Register.g.h"
#include "../ThrowHelper.h"
#include "../Code.g.h"
#include "../MemoryOperand.h"
#include "../../Array2.h"
#include "MemoryOperandSize.g.h"
#include "../RegisterExtensions.h"

#include "Iced.Intel.AssemblerRegisters.h"

namespace Iced::Intel
{

	Assembler::Assembler(std::int32_t bitness)
	{
		switch (bitness)
		{
		case 16:
		case 32:
		case 64:
			break;
		default:
			throw ArgumentOutOfRangeException("bitness");
		}
		Bitness = bitness;
		instructions = new InstructionList();
		currentLabelId = (std::uint8_t)0;
		currentLabel = Iced::Intel::Label();
		currentAnonLabel = Iced::Intel::Label();
		nextAnonLabel = Iced::Intel::Label();
		definedAnonLabel = false;
		prefixFlags = PrefixFlags::None;
		SetPreferVex(true);
		SetPreferShortBranch(true);
	}

	std::int32_t Assembler::GetBitness() const
	{
		return Bitness;
	}

	bool Assembler::GetPreferVex() const
	{
		return PreferVex;
	}

	void Assembler::SetPreferVex(bool value)
	{
		PreferVex = value;
	}

	bool Assembler::GetPreferShortBranch() const
	{
		return PreferShortBranch;
	}

	void Assembler::SetPreferShortBranch(bool value)
	{
		PreferShortBranch = value;
	}

	bool Assembler::GetInstructionPreferVex() const
	{
		if ((prefixFlags & (PrefixFlags::PreferVex | PrefixFlags::PreferEvex)) != (std::uint8_t)0)
		{
			return (prefixFlags & PrefixFlags::PreferVex) != (std::uint8_t)0;
		}
		return GetPreferVex();
	}

	IReadOnlyList<Instruction>* Assembler::GetInstructions() const
	{
		return instructions;
	}

	void Assembler::Reset()
	{
		instructions->Clear();
		currentLabelId = (std::uint8_t)0;
		currentLabel = Iced::Intel::Label();
		currentAnonLabel = Iced::Intel::Label();
		nextAnonLabel = Iced::Intel::Label();
		definedAnonLabel = false;
		prefixFlags = PrefixFlags::None;
	}

	//C# TO C++ CONVERTER WARNING: Nullable reference types have no equivalent in C++:
	//ORIGINAL LINE: public Label CreateLabel(string? name = null)
	Iced::Intel::Label Assembler::CreateLabel(const std::string& name)
	{
		currentLabelId++;
		auto label = Iced::Intel::Label(name, currentLabelId);
		return label;
	}

	Iced::Intel::Label Assembler::GetCurrentLabel() const
	{
		return currentLabel;
	}

	void Assembler::Label(Iced::Intel::Label& label)
	{
		if (label.IsEmpty())
		{
			//C# TO C++ CONVERTER TODO TASK: This exception's constructor requires only one argument:
			//ORIGINAL LINE: throw new ArgumentException(string.Format("Invalid label. Must be created via {(std::uint8_t)0}", nameof(CreateLabel)), nameof(label));
			throw std::invalid_argument(std::format("Invalid label. Must be created via {0:s}", "CreateLabel"));
		}
		if (label.GetInstructionIndex() >= (std::uint8_t)0)
		{
			//C# TO C++ CONVERTER TODO TASK: This exception's constructor requires only one argument:
			//ORIGINAL LINE: throw new ArgumentException(string.Format("Cannot reuse label. The specified label is already associated with an instruction at index {(std::uint8_t)0}.", label.InstructionIndex), nameof(label));
			throw std::invalid_argument(std::format("Cannot reuse label. The specified label is already associated with an instruction at index {0:s}.", to_string(label.GetInstructionIndex())));
		}
		if (!currentLabel.IsEmpty())
		{
			throw std::invalid_argument("At most one label per instruction is allowed");
		}
		label.SetInstructionIndex(instructions->GetCount());
		currentLabel = label;
	}

	void Assembler::AnonymousLabel()
	{
		if (definedAnonLabel)
		{
			throw InvalidOperationException("At most one anonymous label per instruction is allowed");
		}
		if (nextAnonLabel.IsEmpty())
		{
			currentAnonLabel = CreateLabel();
		}
		else
		{
			currentAnonLabel = nextAnonLabel;
		}
		nextAnonLabel = Iced::Intel::Label();
		definedAnonLabel = true;
	}

	Iced::Intel::Label Assembler::B() const
	{
		if (currentAnonLabel.IsEmpty())
		{
			throw InvalidOperationException("No anonymous label has been created yet");
		}
		return currentAnonLabel;
	}

	Iced::Intel::Label Assembler::F()
	{
		if (nextAnonLabel.IsEmpty())
		{
			nextAnonLabel = CreateLabel();
		}
		return nextAnonLabel;
	}

	void Assembler::AddInstruction(Instruction instruction)
	{
		if (!currentLabel.IsEmpty() && definedAnonLabel)
		{
			throw InvalidOperationException("You can't create both an anonymous label and a normal label");
		}
		if (!currentLabel.IsEmpty())
		{
			instruction.SetIP(currentLabel.Id);
		}
		else if (definedAnonLabel)
		{
			instruction.SetIP(currentAnonLabel.Id);
		}
		// Setup prefixes
		if (prefixFlags != PrefixFlags::None)
		{
			if ((prefixFlags & PrefixFlags::Lock) != (std::uint8_t)0)
			{
				instruction.SetHasLockPrefix(true);
			}
			if ((prefixFlags & PrefixFlags::Repe) != (std::uint8_t)0)
			{
				instruction.SetHasRepePrefix(true);
			}
			else if ((prefixFlags & PrefixFlags::Repne) != (std::uint8_t)0)
			{
				instruction.SetHasRepnePrefix(true);
			}
			if ((prefixFlags & PrefixFlags::Notrack) != (std::uint8_t)0)
			{
				instruction.SetSegmentPrefix(Register::DS);
			}
		}
		instructions->Add(instruction);
		currentLabel = Iced::Intel::Label();
		definedAnonLabel = false;
		prefixFlags = PrefixFlags::None;
	}

	void Assembler::AddInstruction(Instruction instruction, AssemblerOperandFlags flags)
	{
		if (flags != AssemblerOperandFlags::None)
		{
			if ((flags & AssemblerOperandFlags::Broadcast) != (std::uint8_t)0)
			{
				instruction.SetBroadcast(true);
			}
			if ((flags & AssemblerOperandFlags::Zeroing) != (std::uint8_t)0)
			{
				instruction.SetZeroingMasking(true);
			}
			if ((flags & AssemblerOperandFlags::RegisterMask) != (std::uint8_t)0)
			{
				// register mask is shift by (std::uint8_t)2 (starts at index (std::uint8_t)1 for K1)
				instruction.SetOpMask(static_cast<Register>(static_cast<std::int32_t>(Register::K0) + ((static_cast<std::int32_t>(flags & AssemblerOperandFlags::RegisterMask)) >> (std::uint8_t)6)));
			}
			if ((flags & AssemblerOperandFlags::SuppressAllExceptions) != (std::uint8_t)0)
			{
				instruction.SetSuppressAllExceptions(true);
			}
			if ((flags & AssemblerOperandFlags::RoundControlMask) != (std::uint8_t)0)
			{
				instruction.SetRoundingControl(static_cast<RoundingControl>(((static_cast<std::int32_t>(flags & AssemblerOperandFlags::RoundControlMask)) >> (std::uint8_t)3)));
			}
		}
		AddInstruction(instruction);
	}

	Assembler& Assembler::lock()
	{
		prefixFlags |= PrefixFlags::Lock;
		return *this;
	}

	Assembler& Assembler::xacquire()
	{
		prefixFlags |= PrefixFlags::Repne;
		return *this;
	}

	Assembler& Assembler::xrelease()
	{
		prefixFlags |= PrefixFlags::Repe;
		return *this;
	}

	Assembler& Assembler::rep()
	{
		prefixFlags |= PrefixFlags::Repe;
		return *this;
	}

	Assembler& Assembler::repe()
	{
		prefixFlags |= PrefixFlags::Repe;
		return *this;
	}

	Assembler& Assembler::repz()
	{
		return repe();
	}

	Assembler& Assembler::repne()
	{
		prefixFlags |= PrefixFlags::Repne;
		return *this;
	}

	Assembler& Assembler::repnz()
	{
		return repne();
	}

	Assembler& Assembler::bnd()
	{
		prefixFlags |= PrefixFlags::Repne;
		return *this;
	}

	Assembler& Assembler::notrack()
	{
		prefixFlags |= PrefixFlags::Notrack;
		return *this;
	}

	Assembler& Assembler::vex()
	{
		prefixFlags |= PrefixFlags::PreferVex;
		return *this;
	}

	Assembler& Assembler::evex()
	{
		prefixFlags |= PrefixFlags::PreferEvex;
		return *this;
	}

	void Assembler::db(std::vector<std::uint8_t>& array)
	{
		if (array.empty())
		{
			ThrowHelper::ThrowArgumentNullException_array();
		}
		db(array, (std::uint8_t)0, (std::int32_t)array.size());
	}

	void Assembler::db(std::vector<std::uint8_t>& array, std::int32_t index, std::int32_t length)
	{
		if (array.empty())
		{
			ThrowHelper::ThrowArgumentNullException_array();
		}
		if (index < (std::uint8_t)0)
		{
			ThrowHelper::ThrowArgumentOutOfRangeException_index();
		}
		if (length < (std::uint8_t)0 || static_cast<std::uint32_t>(index + length) > static_cast<std::uint32_t>(array.size()))
		{
			ThrowHelper::ThrowArgumentOutOfRangeException_length();
		}
		constexpr std::int32_t maxLength = (std::uint8_t)16;
		std::int32_t rest;
		std::int32_t cycles = Math::DivRem(length, maxLength, rest);
		std::int32_t currentPosition = index;
		for (std::int32_t i = (std::uint8_t)0; i < cycles; i++)
		{
			AddInstruction(Instruction::CreateDeclareByte(array, currentPosition, maxLength));
			currentPosition += maxLength;
		}
		if (rest > (std::uint8_t)0)
		{
			AddInstruction(Instruction::CreateDeclareByte(array, currentPosition, rest));
		}
	}

	void Assembler::call(std::uint16_t selector, std::uint32_t offset)
	{
		AddInstruction(Instruction::CreateBranch(GetBitness() >= 32 ? Code::Call_ptr1632 : Code::Call_ptr1616, selector, offset));
	}

	void Assembler::jmp(std::uint16_t selector, std::uint32_t offset)
	{
		AddInstruction(Instruction::CreateBranch(GetBitness() >= 32 ? Code::Jmp_ptr1632 : Code::Jmp_ptr1616, selector, offset));
	}

	void Assembler::xlatb()
	{
		auto switchTempVar_0 = GetBitness();


		auto baseReg = (switchTempVar_0 == 64) ? Register::RBX : (switchTempVar_0 == 32) ? Register::EBX : Register::BX;
		AddInstruction(Instruction::Create(Code::Xlat_m8, MemoryOperand(baseReg, Register::AL)));
	}

	void Assembler::nop(std::int32_t sizeInBytes)
	{
		const auto AppendNop = [&](int amount)
		{
			switch (amount)
			{
			case 1:
				db((byte)0x90); // NOP
				break;
			case 2:
				db((byte)0x66, (byte)0x90); // 66 NOP
				break;
			case 3:
				db((byte)0x0F, (byte)0x1F, (byte)0x00); // NOP dword ptr [eax] or NOP word ptr [bx+si]
				break;
			case 4:
				db((byte)0x0F, (byte)0x1F, (byte)0x40, (byte)0x00); // NOP dword ptr [eax + 00] or NOP word ptr [bx+si]
				break;
			case 5:
				if (Bitness != 16)
					db((byte)0x0F, (byte)0x1F, (byte)0x44, (byte)0x00, (byte)0x00); // NOP dword ptr [eax + eax*(std::uint8_t)1 + 00]
				else
					db((byte)0x0F, (byte)0x1F, (byte)0x80, (byte)0x00, (byte)0x00); // NOP word ptr[bx + si]
				break;
			case 6:
				if (Bitness != 16)
					db((byte)0x66, (byte)0x0F, (byte)0x1F, (byte)0x44, (byte)0x00, (byte)0x00); // 66 NOP dword ptr [eax + eax*(std::uint8_t)1 + 00]
				else
					db((byte)0x66, (byte)0x0F, (byte)0x1F, (byte)0x80, (byte)0x00, (byte)0x00); // NOP dword ptr [bx+si]
				break;
			case 7:
				if (Bitness != 16)
					db((byte)0x0F, (byte)0x1F, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00); // NOP dword ptr [eax + 00000000]
				else
					db((byte)0x67, (byte)0x66, (byte)0x0F, (byte)0x1F, (byte)0x44, (byte)0x00, (byte)0x00); // NOP dword ptr [eax+eax]
				break;
			case 8:
				if (Bitness != 16)
					db((byte)0x0F, (byte)0x1F, (byte)0x84, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00); // NOP dword ptr [eax + eax*(std::uint8_t)1 + 00000000]
				else
					db((byte)0x67, (byte)0x0F, (byte)0x1F, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00); // NOP word ptr [eax]
				break;
			case 9:
				if (Bitness != 16)
					db((byte)0x66, (byte)0x0F, (byte)0x1F, (byte)0x84, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00); // 66 NOP dword ptr [eax + eax*(std::uint8_t)1 + 00000000]
				else
					db((byte)0x67, (byte)0x0F, (byte)0x1F, (byte)0x84, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00); // NOP word ptr [eax+eax]
				break;
			}
		};

		if (sizeInBytes < (std::uint8_t)0)
		{
			throw ArgumentOutOfRangeException("sizeInBytes");
		}
		if (this->prefixFlags != PrefixFlags::None)
		{
			throw InvalidOperationException("No prefixes are allowed");
		}
		if (sizeInBytes == (std::uint8_t)0)
		{
			return;
		}
		constexpr std::int32_t maxMultibyteNopInstructionLength = (std::uint8_t)9;
		std::int32_t rest;
		std::int32_t cycles = Math::DivRem(sizeInBytes, maxMultibyteNopInstructionLength, rest);
		for (std::int32_t i = (std::uint8_t)0; i < cycles; i++)
		{
			AppendNop(maxMultibyteNopInstructionLength);
		}
		if (rest > (std::uint8_t)0)
		{
			AppendNop(rest);
		}
		//C# TO C++ CONVERTER TODO TASK: Local functions are not converted by C# to C++ Converter:
	}

	AssemblerResult Assembler::Assemble(CodeWriter* writer, std::uint64_t rip, BlockEncoderOptions options)
	{
		std::string errorMessage;
		Iced::Intel::AssemblerResult assemblerResult;
		if (!TryAssemble(writer, rip, errorMessage, assemblerResult, options))
		{
			throw InvalidOperationException(errorMessage);
		}
		return assemblerResult;
	}

	//C# TO C++ CONVERTER WARNING: Nullable reference types have no equivalent in C++:
	//ORIGINAL LINE: public bool TryAssemble(CodeWriter writer, ulong rip, [NotNullWhen(false)] out string? errorMessage, out AssemblerResult assemblerResult, BlockEncoderOptions options = BlockEncoderOptions.None)
	//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
	bool Assembler::TryAssemble(CodeWriter* writer, std::uint64_t rip, std::string& errorMessage, AssemblerResult& assemblerResult, BlockEncoderOptions options)
	{
		if (writer == nullptr)
		{
			ThrowHelper::ThrowArgumentNullException_writer();
		}
		assemblerResult = Iced::Intel::AssemblerResult();
		// Protect against using a prefix without actually using it
		if (prefixFlags != PrefixFlags::None)
		{
			errorMessage = std::format("Unused prefixes {0:s}. You must emit an instruction after using an instruction prefix.", to_string(prefixFlags));
			return false;
		}
		// Protect against a label emitted without being attached to an instruction
		if (!currentLabel.IsEmpty())
		{
			errorMessage = std::format("Unused label {0:s}. You must emit an instruction after emitting a label.", to_string(currentLabel));
			return false;
		}
		if (definedAnonLabel)
		{
			errorMessage = "Unused anonymous label. You must emit an instruction after emitting a label.";
			return false;
		}
		if (!nextAnonLabel.IsEmpty())
		{
			errorMessage = "Found an @F anonymous label reference but there was no call to " "AnonymousLabel";
			return false;
		}
		auto blocks = std::vector<InstructionBlock>{ InstructionBlock(writer, instructions->ToArray(), rip)};
		std::vector<BlockEncoderResult> blockResults;
		if (BlockEncoder::TryEncode(GetBitness(), blocks, errorMessage, blockResults, options))
		{
			assemblerResult = AssemblerResult(blockResults);
			return true;
		}
		else
		{
			assemblerResult = AssemblerResult(System::Array2::Empty<BlockEncoderResult>());
			return false;
		}
	}

	void Assembler::aaa()
	{
		AddInstruction(Instruction::Create(Code::Aaa));
	}

	void Assembler::aad(std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aad_imm8, imm));
	}

	void Assembler::aad(std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aad_imm8, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::aam(std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aam_imm8, imm));
	}

	void Assembler::aam(std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aam_imm8, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::aas()
	{
		AddInstruction(Instruction::Create(Code::Aas));
	}

	void Assembler::adc(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm8_r8, dst, src));
	}

	void Assembler::adc(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::adc(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm16_r16, dst, src));
	}

	void Assembler::adc(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::adc(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm32_r32, dst, src));
	}

	void Assembler::adc(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::adc(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm64_r64, dst, src));
	}

	void Assembler::adc(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Adc_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::adc(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adc_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adc(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adc_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adc(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adc_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adc(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adc_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adc(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Adc_AL_imm8 : Code::Adc_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::adc(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Adc_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Adc_rm16_imm8 : Code::Adc_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::adc(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Adc_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Adc_rm32_imm8 : Code::Adc_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::adc(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Adc_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Adc_rm64_imm8 : Code::Adc_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::adc(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Adc_rm64_imm8 : Code::Adc_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Adc_rm32_imm8 : Code::Adc_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Adc_rm16_imm8 : Code::Adc_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Adc_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Adc, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::adc(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Adc_AL_imm8 : Code::Adc_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::adc(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Adc_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Adc_rm16_imm8 : Code::Adc_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::adc(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Adc_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Adc_rm32_imm8 : Code::Adc_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::adc(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Adc_rm32_imm8 : Code::Adc_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Adc_rm16_imm8 : Code::Adc_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Adc_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Adc, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::adcx(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Adcx_r32_rm32, dst, src));
	}

	void Assembler::adcx(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Adcx_r64_rm64, dst, src));
	}

	void Assembler::adcx(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adcx_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adcx(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adcx_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::add(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm8_r8, dst, src));
	}

	void Assembler::add(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::add(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm16_r16, dst, src));
	}

	void Assembler::add(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::add(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm32_r32, dst, src));
	}

	void Assembler::add(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::add(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm64_r64, dst, src));
	}

	void Assembler::add(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Add_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::add(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Add_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::add(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Add_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::add(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Add_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::add(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Add_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::add(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Add_AL_imm8 : Code::Add_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::add(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Add_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Add_rm16_imm8 : Code::Add_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::add(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Add_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Add_rm32_imm8 : Code::Add_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::add(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Add_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Add_rm64_imm8 : Code::Add_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::add(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Add_rm64_imm8 : Code::Add_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Add_rm32_imm8 : Code::Add_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Add_rm16_imm8 : Code::Add_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Add_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Add, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::add(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Add_AL_imm8 : Code::Add_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::add(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Add_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Add_rm16_imm8 : Code::Add_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::add(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Add_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Add_rm32_imm8 : Code::Add_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::add(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Add_rm32_imm8 : Code::Add_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Add_rm16_imm8 : Code::Add_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Add_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Add, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::addpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Addpd_xmm_xmmm128, dst, src));
	}

	void Assembler::addpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Addpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::addps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Addps_xmm_xmmm128, dst, src));
	}

	void Assembler::addps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Addps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::addsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Addsd_xmm_xmmm64, dst, src));
	}

	void Assembler::addsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Addsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::addss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Addss_xmm_xmmm32, dst, src));
	}

	void Assembler::addss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Addss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::addsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Addsubpd_xmm_xmmm128, dst, src));
	}

	void Assembler::addsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Addsubpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::addsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Addsubps_xmm_xmmm128, dst, src));
	}

	void Assembler::addsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Addsubps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adox(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Adox_r32_rm32, dst, src));
	}

	void Assembler::adox(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Adox_r64_rm64, dst, src));
	}

	void Assembler::adox(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adox_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::adox(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Adox_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Aesdec_xmm_xmmm128, dst, src));
	}

	void Assembler::aesdec(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesdec_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesdec128kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesdec128kl_xmm_m384, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesdec256kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesdec256kl_xmm_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Aesdeclast_xmm_xmmm128, dst, src));
	}

	void Assembler::aesdeclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesdeclast_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesdecwide128kl(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Aesdecwide128kl_m384, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesdecwide256kl(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Aesdecwide256kl_m512, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Aesenc_xmm_xmmm128, dst, src));
	}

	void Assembler::aesenc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesenc_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesenc128kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesenc128kl_xmm_m384, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesenc256kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesenc256kl_xmm_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Aesenclast_xmm_xmmm128, dst, src));
	}

	void Assembler::aesenclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesenclast_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesencwide128kl(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Aesencwide128kl_m384, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesencwide256kl(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Aesencwide256kl_m512, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Aesimc_xmm_xmmm128, dst, src));
	}

	void Assembler::aesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Aesimc_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aeskeygenassist_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aeskeygenassist_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aeskeygenassist_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Aeskeygenassist_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::altinst()
	{
		AddInstruction(Instruction::Create(Code::Altinst));
	}

	void Assembler::and_(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm8_r8, dst, src));
	}

	void Assembler::and_(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::and_(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm16_r16, dst, src));
	}

	void Assembler::and_(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::and_(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm32_r32, dst, src));
	}

	void Assembler::and_(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::and_(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm64_r64, dst, src));
	}

	void Assembler::and_(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::And_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::and_(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::And_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::and_(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::And_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::and_(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::And_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::and_(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::And_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::and_(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::And_AL_imm8 : Code::And_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::and_(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::And_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::And_rm16_imm8 : Code::And_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::and_(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::And_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::And_rm32_imm8 : Code::And_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::and_(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::And_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::And_rm64_imm8 : Code::And_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::and_(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::And_rm64_imm8 : Code::And_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::And_rm32_imm8 : Code::And_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::And_rm16_imm8 : Code::And_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::And_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::And, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::and_(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::And_AL_imm8 : Code::And_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::and_(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::And_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::And_rm16_imm8 : Code::And_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::and_(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::And_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::And_rm32_imm8 : Code::And_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::and_(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::And_rm32_imm8 : Code::And_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::And_rm16_imm8 : Code::And_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::And_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::And, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Andn_r32_r32_rm32, dst, src1, src2));
	}

	void Assembler::andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Andn_r64_r64_rm64, dst, src1, src2));
	}

	void Assembler::andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Andn_r32_r32_rm32, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Andn_r64_r64_rm64, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::andnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Andnpd_xmm_xmmm128, dst, src));
	}

	void Assembler::andnpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Andnpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::andnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Andnps_xmm_xmmm128, dst, src));
	}

	void Assembler::andnps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Andnps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::andpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Andpd_xmm_xmmm128, dst, src));
	}

	void Assembler::andpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Andpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::andps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Andps_xmm_xmmm128, dst, src));
	}

	void Assembler::andps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Andps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::arpl(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Arpl_rm16_r16, dst, src));
	}

	void Assembler::arpl(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Arpl_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::arpl(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Arpl_r32m16_r32, dst, src));
	}

	void Assembler::arpl(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Arpl_r32m16_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bb0_reset()
	{
		AddInstruction(Instruction::Create(Code::Bb0_reset));
	}

	void Assembler::bb1_reset()
	{
		AddInstruction(Instruction::Create(Code::Bb1_reset));
	}

	void Assembler::bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bextr_r32_rm32_r32, dst, src1, src2));
	}

	void Assembler::bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bextr_r32_rm32_r32, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bextr_r64_rm64_r64, dst, src1, src2));
	}

	void Assembler::bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bextr_r64_rm64_r64, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r32_rm32_imm32, dst, src1, imm));
	}

	void Assembler::bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r64_rm64_imm32, dst, src1, imm));
	}

	void Assembler::bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r32_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r64_rm64_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r32_rm32_imm32, dst, src1, imm));
	}

	void Assembler::bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r64_rm64_imm32, dst, src1, imm));
	}

	void Assembler::bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r32_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Bextr_r64_rm64_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::blcfill(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcfill_r32_rm32, dst, src));
	}

	void Assembler::blcfill(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcfill_r64_rm64, dst, src));
	}

	void Assembler::blcfill(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcfill_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcfill(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcfill_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blci(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blci_r32_rm32, dst, src));
	}

	void Assembler::blci(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blci_r64_rm64, dst, src));
	}

	void Assembler::blci(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blci_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blci(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blci_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcic(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcic_r32_rm32, dst, src));
	}

	void Assembler::blcic(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcic_r64_rm64, dst, src));
	}

	void Assembler::blcic(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcic_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcic(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcic_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcmsk(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcmsk_r32_rm32, dst, src));
	}

	void Assembler::blcmsk(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcmsk_r64_rm64, dst, src));
	}

	void Assembler::blcmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcmsk_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcmsk_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcs(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcs_r32_rm32, dst, src));
	}

	void Assembler::blcs(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcs_r64_rm64, dst, src));
	}

	void Assembler::blcs(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcs_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blcs(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blcs_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendpd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendpd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendps_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendps_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Blendps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::blendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Blendvpd_xmm_xmmm128, dst, src));
	}

	void Assembler::blendvpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Blendvpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Blendvps_xmm_xmmm128, dst, src));
	}

	void Assembler::blendvps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Blendvps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsfill(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsfill_r32_rm32, dst, src));
	}

	void Assembler::blsfill(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsfill_r64_rm64, dst, src));
	}

	void Assembler::blsfill(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsfill_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsfill(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsfill_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsi(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsi_r32_rm32, dst, src));
	}

	void Assembler::blsi(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsi_r64_rm64, dst, src));
	}

	void Assembler::blsi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsi_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsi_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsic(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsic_r32_rm32, dst, src));
	}

	void Assembler::blsic(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsic_r64_rm64, dst, src));
	}

	void Assembler::blsic(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsic_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsic(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Blsic_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsmsk(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsmsk_r32_rm32, dst, src));
	}

	void Assembler::blsmsk(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsmsk_r64_rm64, dst, src));
	}

	void Assembler::blsmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsmsk_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsmsk_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsr(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsr_r32_rm32, dst, src));
	}

	void Assembler::blsr(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsr_r64_rm64, dst, src));
	}

	void Assembler::blsr(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsr_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::blsr(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Blsr_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndcl(AssemblerRegisterBND dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bndcl_bnd_rm32, dst, src));
	}

	void Assembler::bndcl(AssemblerRegisterBND dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bndcl_bnd_rm64, dst, src));
	}

	void Assembler::bndcl(AssemblerRegisterBND dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bndcl_bnd_rm64;
		}
		else if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bndcl_bnd_rm32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bndcl, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndcn(AssemblerRegisterBND dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bndcn_bnd_rm32, dst, src));
	}

	void Assembler::bndcn(AssemblerRegisterBND dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bndcn_bnd_rm64, dst, src));
	}

	void Assembler::bndcn(AssemblerRegisterBND dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bndcn_bnd_rm64;
		}
		else if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bndcn_bnd_rm32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bndcn, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndcu(AssemblerRegisterBND dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bndcu_bnd_rm32, dst, src));
	}

	void Assembler::bndcu(AssemblerRegisterBND dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bndcu_bnd_rm64, dst, src));
	}

	void Assembler::bndcu(AssemblerRegisterBND dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bndcu_bnd_rm64;
		}
		else if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bndcu_bnd_rm32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bndcu, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndldx(AssemblerRegisterBND dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bndldx_bnd_mib, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndmk(AssemblerRegisterBND dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bndmk_bnd_m64;
		}
		else if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bndmk_bnd_m32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bndmk, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndmov(AssemblerRegisterBND dst, AssemblerRegisterBND src)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Bndmov_bnd_bndm128 : Code::Bndmov_bnd_bndm64;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::bndmov(AssemblerMemoryOperand dst, AssemblerRegisterBND src)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Bndmov_bndm128_bnd : Code::Bndmov_bndm64_bnd;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bndmov(AssemblerRegisterBND dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Bndmov_bnd_bndm128 : Code::Bndmov_bnd_bndm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bndstx(AssemblerMemoryOperand dst, AssemblerRegisterBND src)
	{
		AddInstruction(Instruction::Create(Code::Bndstx_mib_bnd, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bound(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bound_r16_m1616, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bound(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bound_r32_m3232, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bsf(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Bsf_r16_rm16, dst, src));
	}

	void Assembler::bsf(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bsf_r32_rm32, dst, src));
	}

	void Assembler::bsf(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bsf_r64_rm64, dst, src));
	}

	void Assembler::bsf(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bsf_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bsf(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bsf_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bsf(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bsf_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bsr(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Bsr_r16_rm16, dst, src));
	}

	void Assembler::bsr(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bsr_r32_rm32, dst, src));
	}

	void Assembler::bsr(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bsr_r64_rm64, dst, src));
	}

	void Assembler::bsr(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bsr_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bsr(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bsr_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bsr(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Bsr_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::bswap(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Bswap_r16, dst));
	}

	void Assembler::bswap(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Bswap_r32, dst));
	}

	void Assembler::bswap(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Bswap_r64, dst));
	}

	void Assembler::bt(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm16_r16, dst, src));
	}

	void Assembler::bt(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bt(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm32_r32, dst, src));
	}

	void Assembler::bt(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bt(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm64_r64, dst, src));
	}

	void Assembler::bt(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bt(AssemblerRegister16 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm16_imm8, dst, imm));
	}

	void Assembler::bt(AssemblerRegister32 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm32_imm8, dst, imm));
	}

	void Assembler::bt(AssemblerRegister64 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm64_imm8, dst, imm));
	}

	void Assembler::bt(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bt_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bt_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Bt_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bt, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::bt(AssemblerRegister16 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm16_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bt(AssemblerRegister32 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm32_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bt(AssemblerRegister64 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bt_rm64_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bt(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bt_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bt_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Bt_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bt, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btc(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm16_r16, dst, src));
	}

	void Assembler::btc(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::btc(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm32_r32, dst, src));
	}

	void Assembler::btc(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::btc(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm64_r64, dst, src));
	}

	void Assembler::btc(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::btc(AssemblerRegister16 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm16_imm8, dst, imm));
	}

	void Assembler::btc(AssemblerRegister32 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm32_imm8, dst, imm));
	}

	void Assembler::btc(AssemblerRegister64 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm64_imm8, dst, imm));
	}

	void Assembler::btc(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Btc_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Btc_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Btc_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Btc, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::btc(AssemblerRegister16 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm16_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btc(AssemblerRegister32 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm32_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btc(AssemblerRegister64 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btc_rm64_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btc(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Btc_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Btc_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Btc_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Btc, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btr(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm16_r16, dst, src));
	}

	void Assembler::btr(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::btr(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm32_r32, dst, src));
	}

	void Assembler::btr(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::btr(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm64_r64, dst, src));
	}

	void Assembler::btr(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::btr(AssemblerRegister16 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm16_imm8, dst, imm));
	}

	void Assembler::btr(AssemblerRegister32 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm32_imm8, dst, imm));
	}

	void Assembler::btr(AssemblerRegister64 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm64_imm8, dst, imm));
	}

	void Assembler::btr(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Btr_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Btr_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Btr_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Btr, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::btr(AssemblerRegister16 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm16_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btr(AssemblerRegister32 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm32_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btr(AssemblerRegister64 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Btr_rm64_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::btr(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Btr_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Btr_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Btr_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Btr, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bts(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm16_r16, dst, src));
	}

	void Assembler::bts(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bts(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm32_r32, dst, src));
	}

	void Assembler::bts(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bts(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm64_r64, dst, src));
	}

	void Assembler::bts(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::bts(AssemblerRegister16 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm16_imm8, dst, imm));
	}

	void Assembler::bts(AssemblerRegister32 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm32_imm8, dst, imm));
	}

	void Assembler::bts(AssemblerRegister64 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm64_imm8, dst, imm));
	}

	void Assembler::bts(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bts_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bts_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Bts_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bts, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::bts(AssemblerRegister16 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm16_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bts(AssemblerRegister32 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm32_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bts(AssemblerRegister64 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Bts_rm64_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bts(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Bts_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Bts_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Bts_rm16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Bts, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::bzhi(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bzhi_r32_rm32_r32, dst, src1, src2));
	}

	void Assembler::bzhi(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bzhi_r32_rm32_r32, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::bzhi(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bzhi_r64_rm64_r64, dst, src1, src2));
	}

	void Assembler::bzhi(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Bzhi_r64_rm64_r64, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::call(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Call_rm16, dst));
	}

	void Assembler::call(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Call_rm32, dst));
	}

	void Assembler::call(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Call_rm64, dst));
	}

	void Assembler::call(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Tbyte)
		{
			code = Code::Call_m1664;
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Call_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Fword)
		{
			code = Code::Call_m1632;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = GetBitness() >= 32 ? Code::Call_rm32 : Code::Call_m1616;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Call_rm16;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Call, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::call(Iced::Intel::Label dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Call_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Call_rel32_32 : Code::Call_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::call(std::uint64_t dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Call_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Call_rel32_32 : Code::Call_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::cbw()
	{
		AddInstruction(Instruction::Create(Code::Cbw));
	}

	void Assembler::ccs_encrypt()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Ccs_encrypt_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Ccs_encrypt_32 : Code::Ccs_encrypt_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::ccs_hash()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Ccs_hash_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Ccs_hash_32 : Code::Ccs_hash_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::cdq()
	{
		AddInstruction(Instruction::Create(Code::Cdq));
	}

	void Assembler::cdqe()
	{
		AddInstruction(Instruction::Create(Code::Cdqe));
	}

	void Assembler::cl1invmb()
	{
		AddInstruction(Instruction::Create(Code::Cl1invmb));
	}

	void Assembler::clac()
	{
		AddInstruction(Instruction::Create(Code::Clac));
	}

	void Assembler::clc()
	{
		AddInstruction(Instruction::Create(Code::Clc));
	}

	void Assembler::cld()
	{
		AddInstruction(Instruction::Create(Code::Cld));
	}

	void Assembler::cldemote(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Cldemote_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::clflush(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Clflush_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::clflushopt(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Clflushopt_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::clgi()
	{
		AddInstruction(Instruction::Create(Code::Clgi));
	}

	void Assembler::cli()
	{
		AddInstruction(Instruction::Create(Code::Cli));
	}

	void Assembler::clrssbsy(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Clrssbsy_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::clts()
	{
		AddInstruction(Instruction::Create(Code::Clts));
	}

	void Assembler::clui()
	{
		AddInstruction(Instruction::Create(Code::Clui));
	}

	void Assembler::clwb(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Clwb_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::clzero()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Clzeroq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Clzerod : Code::Clzerow;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::cmc()
	{
		AddInstruction(Instruction::Create(Code::Cmc));
	}

	void Assembler::cmova(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r16_rm16, dst, src));
	}

	void Assembler::cmova(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r32_rm32, dst, src));
	}

	void Assembler::cmova(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r64_rm64, dst, src));
	}

	void Assembler::cmova(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmova(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmova(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovae(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r16_rm16, dst, src));
	}

	void Assembler::cmovae(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r32_rm32, dst, src));
	}

	void Assembler::cmovae(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r64_rm64, dst, src));
	}

	void Assembler::cmovae(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovae(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovae(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovb(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r16_rm16, dst, src));
	}

	void Assembler::cmovb(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r32_rm32, dst, src));
	}

	void Assembler::cmovb(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r64_rm64, dst, src));
	}

	void Assembler::cmovb(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovb(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovb(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovbe(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r16_rm16, dst, src));
	}

	void Assembler::cmovbe(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r32_rm32, dst, src));
	}

	void Assembler::cmovbe(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r64_rm64, dst, src));
	}

	void Assembler::cmovbe(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovbe(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovbe(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovc(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r16_rm16, dst, src));
	}

	void Assembler::cmovc(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r32_rm32, dst, src));
	}

	void Assembler::cmovc(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r64_rm64, dst, src));
	}

	void Assembler::cmovc(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovc(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovc(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmove(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r16_rm16, dst, src));
	}

	void Assembler::cmove(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r32_rm32, dst, src));
	}

	void Assembler::cmove(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r64_rm64, dst, src));
	}

	void Assembler::cmove(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmove(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmove(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovg(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r16_rm16, dst, src));
	}

	void Assembler::cmovg(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r32_rm32, dst, src));
	}

	void Assembler::cmovg(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r64_rm64, dst, src));
	}

	void Assembler::cmovg(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovg(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovg(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovge(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r16_rm16, dst, src));
	}

	void Assembler::cmovge(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r32_rm32, dst, src));
	}

	void Assembler::cmovge(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r64_rm64, dst, src));
	}

	void Assembler::cmovge(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovge(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovge(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovl(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r16_rm16, dst, src));
	}

	void Assembler::cmovl(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r32_rm32, dst, src));
	}

	void Assembler::cmovl(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r64_rm64, dst, src));
	}

	void Assembler::cmovl(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovl(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovl(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovle(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r16_rm16, dst, src));
	}

	void Assembler::cmovle(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r32_rm32, dst, src));
	}

	void Assembler::cmovle(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r64_rm64, dst, src));
	}

	void Assembler::cmovle(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovle(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovle(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovna(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r16_rm16, dst, src));
	}

	void Assembler::cmovna(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r32_rm32, dst, src));
	}

	void Assembler::cmovna(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r64_rm64, dst, src));
	}

	void Assembler::cmovna(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovna(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovna(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovbe_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnae(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r16_rm16, dst, src));
	}

	void Assembler::cmovnae(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r32_rm32, dst, src));
	}

	void Assembler::cmovnae(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r64_rm64, dst, src));
	}

	void Assembler::cmovnae(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnae(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnae(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovb_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnb(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r16_rm16, dst, src));
	}

	void Assembler::cmovnb(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r32_rm32, dst, src));
	}

	void Assembler::cmovnb(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r64_rm64, dst, src));
	}

	void Assembler::cmovnb(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnb(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnb(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnbe(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r16_rm16, dst, src));
	}

	void Assembler::cmovnbe(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r32_rm32, dst, src));
	}

	void Assembler::cmovnbe(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r64_rm64, dst, src));
	}

	void Assembler::cmovnbe(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnbe(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnbe(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmova_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnc(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r16_rm16, dst, src));
	}

	void Assembler::cmovnc(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r32_rm32, dst, src));
	}

	void Assembler::cmovnc(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r64_rm64, dst, src));
	}

	void Assembler::cmovnc(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnc(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnc(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovae_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovne(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r16_rm16, dst, src));
	}

	void Assembler::cmovne(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r32_rm32, dst, src));
	}

	void Assembler::cmovne(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r64_rm64, dst, src));
	}

	void Assembler::cmovne(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovne(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovne(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovng(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r16_rm16, dst, src));
	}

	void Assembler::cmovng(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r32_rm32, dst, src));
	}

	void Assembler::cmovng(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r64_rm64, dst, src));
	}

	void Assembler::cmovng(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovng(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovng(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovle_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnge(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r16_rm16, dst, src));
	}

	void Assembler::cmovnge(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r32_rm32, dst, src));
	}

	void Assembler::cmovnge(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r64_rm64, dst, src));
	}

	void Assembler::cmovnge(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnge(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnge(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovl_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnl(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r16_rm16, dst, src));
	}

	void Assembler::cmovnl(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r32_rm32, dst, src));
	}

	void Assembler::cmovnl(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r64_rm64, dst, src));
	}

	void Assembler::cmovnl(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnl(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnl(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovge_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnle(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r16_rm16, dst, src));
	}

	void Assembler::cmovnle(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r32_rm32, dst, src));
	}

	void Assembler::cmovnle(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r64_rm64, dst, src));
	}

	void Assembler::cmovnle(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnle(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnle(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovg_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovno(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovno_r16_rm16, dst, src));
	}

	void Assembler::cmovno(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovno_r32_rm32, dst, src));
	}

	void Assembler::cmovno(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovno_r64_rm64, dst, src));
	}

	void Assembler::cmovno(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovno_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovno(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovno_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovno(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovno_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnp(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r16_rm16, dst, src));
	}

	void Assembler::cmovnp(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r32_rm32, dst, src));
	}

	void Assembler::cmovnp(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r64_rm64, dst, src));
	}

	void Assembler::cmovnp(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnp(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnp(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovns(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovns_r16_rm16, dst, src));
	}

	void Assembler::cmovns(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovns_r32_rm32, dst, src));
	}

	void Assembler::cmovns(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovns_r64_rm64, dst, src));
	}

	void Assembler::cmovns(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovns_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovns(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovns_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovns(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovns_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnz(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r16_rm16, dst, src));
	}

	void Assembler::cmovnz(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r32_rm32, dst, src));
	}

	void Assembler::cmovnz(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r64_rm64, dst, src));
	}

	void Assembler::cmovnz(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnz(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovnz(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovne_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovo(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovo_r16_rm16, dst, src));
	}

	void Assembler::cmovo(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovo_r32_rm32, dst, src));
	}

	void Assembler::cmovo(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovo_r64_rm64, dst, src));
	}

	void Assembler::cmovo(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovo_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovo(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovo_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovo(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovo_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovp(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r16_rm16, dst, src));
	}

	void Assembler::cmovp(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r32_rm32, dst, src));
	}

	void Assembler::cmovp(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r64_rm64, dst, src));
	}

	void Assembler::cmovp(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovp(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovp(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovpe(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r16_rm16, dst, src));
	}

	void Assembler::cmovpe(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r32_rm32, dst, src));
	}

	void Assembler::cmovpe(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r64_rm64, dst, src));
	}

	void Assembler::cmovpe(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovpe(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovpe(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovp_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovpo(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r16_rm16, dst, src));
	}

	void Assembler::cmovpo(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r32_rm32, dst, src));
	}

	void Assembler::cmovpo(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r64_rm64, dst, src));
	}

	void Assembler::cmovpo(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovpo(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovpo(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovnp_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovs(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovs_r16_rm16, dst, src));
	}

	void Assembler::cmovs(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovs_r32_rm32, dst, src));
	}

	void Assembler::cmovs(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmovs_r64_rm64, dst, src));
	}

	void Assembler::cmovs(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovs_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovs(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovs_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovs(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmovs_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovz(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r16_rm16, dst, src));
	}

	void Assembler::cmovz(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r32_rm32, dst, src));
	}

	void Assembler::cmovz(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r64_rm64, dst, src));
	}

	void Assembler::cmovz(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovz(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmovz(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmove_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmp(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm8_r8, dst, src));
	}

	void Assembler::cmp(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmp(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm16_r16, dst, src));
	}

	void Assembler::cmp(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmp(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm32_r32, dst, src));
	}

	void Assembler::cmp(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmp(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm64_r64, dst, src));
	}

	void Assembler::cmp(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmp(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmp(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmp(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmp(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cmp_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmp(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Cmp_AL_imm8 : Code::Cmp_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::cmp(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Cmp_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Cmp_rm16_imm8 : Code::Cmp_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::cmp(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Cmp_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Cmp_rm32_imm8 : Code::Cmp_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::cmp(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Cmp_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Cmp_rm64_imm8 : Code::Cmp_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::cmp(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Cmp_rm64_imm8 : Code::Cmp_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Cmp_rm32_imm8 : Code::Cmp_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Cmp_rm16_imm8 : Code::Cmp_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Cmp_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Cmp, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::cmp(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Cmp_AL_imm8 : Code::Cmp_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmp(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Cmp_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Cmp_rm16_imm8 : Code::Cmp_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmp(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Cmp_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Cmp_rm32_imm8 : Code::Cmp_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::cmp(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Cmp_rm32_imm8 : Code::Cmp_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Cmp_rm16_imm8 : Code::Cmp_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Cmp_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Cmp, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::cmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmpeqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)0);
	}

	void Assembler::cmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmplepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmpleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmplesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmpless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)2);
	}

	void Assembler::cmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)1);
	}

	void Assembler::cmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpneqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)4);
	}

	void Assembler::cmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnlepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnlesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)6);
	}

	void Assembler::cmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpnltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)5);
	}

	void Assembler::cmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmpordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)7);
	}

	void Assembler::cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmppd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmppd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmppd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmppd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpps_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpps_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpsb()
	{
		AddInstruction(Instruction::CreateCmpsb(GetBitness()));
	}

	void Assembler::cmpsd()
	{
		AddInstruction(Instruction::CreateCmpsd(GetBitness()));
	}

	void Assembler::cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpsd_xmm_xmmm64_imm8, dst, src1, imm));
	}

	void Assembler::cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpsd_xmm_xmmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpsd_xmm_xmmm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpsd_xmm_xmmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpsq()
	{
		AddInstruction(Instruction::CreateCmpsq(GetBitness()));
	}

	void Assembler::cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpss_xmm_xmmm32_imm8, dst, src1, imm));
	}

	void Assembler::cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpss_xmm_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpss_xmm_xmmm32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Cmpss_xmm_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::cmpsw()
	{
		AddInstruction(Instruction::CreateCmpsw(GetBitness()));
	}

	void Assembler::cmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmppd(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmppd(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpps(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpps(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpsd(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpsd(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		cmpss(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpunordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		cmpss(dst, src, (std::uint8_t)3);
	}

	void Assembler::cmpxchg(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm8_r8, dst, src));
	}

	void Assembler::cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmpxchg(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm16_r16, dst, src));
	}

	void Assembler::cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmpxchg(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm32_r32, dst, src));
	}

	void Assembler::cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmpxchg(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm64_r64, dst, src));
	}

	void Assembler::cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::cmpxchg16b(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg16b_m128, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cmpxchg8b(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Cmpxchg8b_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::comisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Comisd_xmm_xmmm64, dst, src));
	}

	void Assembler::comisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Comisd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::comiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Comiss_xmm_xmmm32, dst, src));
	}

	void Assembler::comiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Comiss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cpu_read()
	{
		AddInstruction(Instruction::Create(Code::Cpu_read));
	}

	void Assembler::cpu_write()
	{
		AddInstruction(Instruction::Create(Code::Cpu_write));
	}

	void Assembler::cpuid()
	{
		AddInstruction(Instruction::Create(Code::Cpuid));
	}

	void Assembler::cqo()
	{
		AddInstruction(Instruction::Create(Code::Cqo));
	}

	void Assembler::crc32(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Crc32_r32_rm8, dst, src));
	}

	void Assembler::crc32(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Crc32_r64_rm8, dst, src));
	}

	void Assembler::crc32(AssemblerRegister32 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Crc32_r32_rm16, dst, src));
	}

	void Assembler::crc32(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Crc32_r32_rm32, dst, src));
	}

	void Assembler::crc32(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Crc32_r64_rm64, dst, src));
	}

	void Assembler::crc32(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Crc32_r32_rm32;
		}
		else if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Crc32_r32_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Crc32_r32_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Crc32, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::crc32(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Crc32_r64_rm64;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Crc32_r64_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Crc32, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtdq2pd_xmm_xmmm64, dst, src));
	}

	void Assembler::cvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtdq2pd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtdq2ps_xmm_xmmm128, dst, src));
	}

	void Assembler::cvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtdq2ps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpd2dq_xmm_xmmm128, dst, src));
	}

	void Assembler::cvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpd2dq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpd2pi_mm_xmmm128, dst, src));
	}

	void Assembler::cvtpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpd2pi_mm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpd2ps_xmm_xmmm128, dst, src));
	}

	void Assembler::cvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpd2ps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtpi2pd(AssemblerRegisterXMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpi2pd_xmm_mmm64, dst, src));
	}

	void Assembler::cvtpi2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpi2pd_xmm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtpi2ps(AssemblerRegisterXMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpi2ps_xmm_mmm64, dst, src));
	}

	void Assembler::cvtpi2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtpi2ps_xmm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtps2dq_xmm_xmmm128, dst, src));
	}

	void Assembler::cvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtps2dq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtps2pd_xmm_xmmm64, dst, src));
	}

	void Assembler::cvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtps2pd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtps2pi_mm_xmmm64, dst, src));
	}

	void Assembler::cvtps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtps2pi_mm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsd2si_r32_xmmm64, dst, src));
	}

	void Assembler::cvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsd2si_r64_xmmm64, dst, src));
	}

	void Assembler::cvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsd2si_r32_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsd2si_r64_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsd2ss_xmm_xmmm64, dst, src));
	}

	void Assembler::cvtsd2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsd2ss_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsi2sd_xmm_rm32, dst, src));
	}

	void Assembler::cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsi2sd_xmm_rm64, dst, src));
	}

	void Assembler::cvtsi2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Cvtsi2sd_xmm_rm64;
		}
		else if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Cvtsi2sd_xmm_rm32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Cvtsi2sd, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsi2ss_xmm_rm32, dst, src));
	}

	void Assembler::cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Cvtsi2ss_xmm_rm64, dst, src));
	}

	void Assembler::cvtsi2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Qword)
		{
			code = Code::Cvtsi2ss_xmm_rm64;
		}
		else if (src.Size == MemoryOperandSize::Dword)
		{
			code = Code::Cvtsi2ss_xmm_rm32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Cvtsi2ss, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtss2sd_xmm_xmmm32, dst, src));
	}

	void Assembler::cvtss2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtss2sd_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtss2si_r32_xmmm32, dst, src));
	}

	void Assembler::cvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvtss2si_r64_xmmm32, dst, src));
	}

	void Assembler::cvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtss2si_r32_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvtss2si_r64_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttpd2dq_xmm_xmmm128, dst, src));
	}

	void Assembler::cvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttpd2dq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttpd2pi_mm_xmmm128, dst, src));
	}

	void Assembler::cvttpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttpd2pi_mm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttps2dq_xmm_xmmm128, dst, src));
	}

	void Assembler::cvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttps2dq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttps2pi_mm_xmmm64, dst, src));
	}

	void Assembler::cvttps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttps2pi_mm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttsd2si_r32_xmmm64, dst, src));
	}

	void Assembler::cvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttsd2si_r64_xmmm64, dst, src));
	}

	void Assembler::cvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttsd2si_r32_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttsd2si_r64_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttss2si_r32_xmmm32, dst, src));
	}

	void Assembler::cvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Cvttss2si_r64_xmmm32, dst, src));
	}

	void Assembler::cvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttss2si_r32_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Cvttss2si_r64_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::cwd()
	{
		AddInstruction(Instruction::Create(Code::Cwd));
	}

	void Assembler::cwde()
	{
		AddInstruction(Instruction::Create(Code::Cwde));
	}

	void Assembler::daa()
	{
		AddInstruction(Instruction::Create(Code::Daa));
	}

	void Assembler::das()
	{
		AddInstruction(Instruction::Create(Code::Das));
	}

	void Assembler::dec(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Dec_rm8, dst));
	}

	void Assembler::dec(AssemblerRegister16 dst)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Dec_rm16 : Code::Dec_r16;
		AddInstruction(Instruction::Create(code, dst));
	}

	void Assembler::dec(AssemblerRegister32 dst)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Dec_rm32 : Code::Dec_r32;
		AddInstruction(Instruction::Create(code, dst));
	}

	void Assembler::dec(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Dec_rm64, dst));
	}

	void Assembler::dec(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Dec_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Dec_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Dec_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Dec_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Dec, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::div(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Div_rm8, dst));
	}

	void Assembler::div(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Div_rm16, dst));
	}

	void Assembler::div(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Div_rm32, dst));
	}

	void Assembler::div(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Div_rm64, dst));
	}

	void Assembler::div(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Div_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Div_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Div_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Div_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Div, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::divpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Divpd_xmm_xmmm128, dst, src));
	}

	void Assembler::divpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Divpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::divps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Divps_xmm_xmmm128, dst, src));
	}

	void Assembler::divps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Divps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::divsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Divsd_xmm_xmmm64, dst, src));
	}

	void Assembler::divsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Divsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::divss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Divss_xmm_xmmm32, dst, src));
	}

	void Assembler::divss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Divss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::dmint()
	{
		AddInstruction(Instruction::Create(Code::Dmint));
	}

	void Assembler::dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dppd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dppd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dppd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dppd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dpps_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dpps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dpps_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Dpps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::emms()
	{
		AddInstruction(Instruction::Create(Code::Emms));
	}

	void Assembler::encls()
	{
		AddInstruction(Instruction::Create(Code::Encls));
	}

	void Assembler::enclu()
	{
		AddInstruction(Instruction::Create(Code::Enclu));
	}

	void Assembler::enclv()
	{
		AddInstruction(Instruction::Create(Code::Enclv));
	}

	void Assembler::encodekey128(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Encodekey128_r32_r32, dst, src));
	}

	void Assembler::encodekey256(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Encodekey256_r32_r32, dst, src));
	}

	void Assembler::endbr32()
	{
		AddInstruction(Instruction::Create(Code::Endbr32));
	}

	void Assembler::endbr64()
	{
		AddInstruction(Instruction::Create(Code::Endbr64));
	}

	void Assembler::enqcmd(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Enqcmd_r16_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::enqcmd(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Enqcmd_r32_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::enqcmd(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Enqcmd_r64_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::enqcmds(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Enqcmds_r16_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::enqcmds(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Enqcmds_r32_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::enqcmds(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Enqcmds_r64_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::enter(std::int16_t imm, std::int8_t imm1)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Enterq_imm16_imm8;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Enterd_imm16_imm8 : Code::Enterw_imm16_imm8;
		}
		AddInstruction(Instruction::Create(code, imm, imm1));
	}

	void Assembler::enter(std::uint16_t imm, std::uint8_t imm1)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Enterq_imm16_imm8;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Enterd_imm16_imm8 : Code::Enterw_imm16_imm8;
		}
		AddInstruction(Instruction::Create(code, static_cast<std::uint32_t>(imm), static_cast<std::uint32_t>(imm1)));
	}

	void Assembler::erets()
	{
		AddInstruction(Instruction::Create(Code::Erets));
	}

	void Assembler::eretu()
	{
		AddInstruction(Instruction::Create(Code::Eretu));
	}

	void Assembler::extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Extractps_rm32_xmm_imm8, dst, src1, imm));
	}

	void Assembler::extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Extractps_r64m32_xmm_imm8, dst, src1, imm));
	}

	void Assembler::extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Extractps_rm32_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Extractps_rm32_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Extractps_r64m32_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Extractps_rm32_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::extrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Extrq_xmm_xmm, dst, src));
	}

	void Assembler::extrq(AssemblerRegisterXMM dst, std::int8_t imm, std::int8_t imm1)
	{
		AddInstruction(Instruction::Create(Code::Extrq_xmm_imm8_imm8, dst, imm, imm1));
	}

	void Assembler::extrq(AssemblerRegisterXMM dst, std::uint8_t imm, std::uint8_t imm1)
	{
		AddInstruction(Instruction::Create(Code::Extrq_xmm_imm8_imm8, dst, static_cast<std::uint32_t>(imm), static_cast<std::uint32_t>(imm1)));
	}

	void Assembler::f2xm1()
	{
		AddInstruction(Instruction::Create(Code::F2xm1));
	}

	void Assembler::fabs()
	{
		AddInstruction(Instruction::Create(Code::Fabs));
	}

	void Assembler::fadd(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fadd_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fadd_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fadd, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fadd(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		Code code;
		code = dst == Register::ST0 ? Code::Fadd_st0_sti : Code::Fadd_sti_st0;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::faddp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Faddp_sti_st0, dst, src));
	}

	void Assembler::fbld(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fbld_m80bcd, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fbstp(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fbstp_m80bcd, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fchs()
	{
		AddInstruction(Instruction::Create(Code::Fchs));
	}

	void Assembler::fclex()
	{
		AddInstruction(Instruction::Create(Code::Fclex));
	}

	void Assembler::fcmovb(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovb_st0_sti, dst, src));
	}

	void Assembler::fcmovbe(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovbe_st0_sti, dst, src));
	}

	void Assembler::fcmove(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmove_st0_sti, dst, src));
	}

	void Assembler::fcmovnb(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovnb_st0_sti, dst, src));
	}

	void Assembler::fcmovnbe(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovnbe_st0_sti, dst, src));
	}

	void Assembler::fcmovne(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovne_st0_sti, dst, src));
	}

	void Assembler::fcmovnu(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovnu_st0_sti, dst, src));
	}

	void Assembler::fcmovu(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcmovu_st0_sti, dst, src));
	}

	void Assembler::fcom(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fcom_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fcom_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fcom, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fcom(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcom_st0_sti, dst, src));
	}

	void Assembler::fcomi(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcomi_st0_sti, dst, src));
	}

	void Assembler::fcomip(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcomip_st0_sti, dst, src));
	}

	void Assembler::fcomp(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fcomp_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fcomp_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fcomp, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fcomp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fcomp_st0_sti, dst, src));
	}

	void Assembler::fcompp()
	{
		AddInstruction(Instruction::Create(Code::Fcompp));
	}

	void Assembler::fcos()
	{
		AddInstruction(Instruction::Create(Code::Fcos));
	}

	void Assembler::fdecstp()
	{
		AddInstruction(Instruction::Create(Code::Fdecstp));
	}

	void Assembler::fdisi()
	{
		AddInstruction(Instruction::Create(Code::Fdisi));
	}

	void Assembler::fdiv(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fdiv_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fdiv_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fdiv, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fdiv(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		Code code;
		code = dst == Register::ST0 ? Code::Fdiv_st0_sti : Code::Fdiv_sti_st0;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::fdivp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fdivp_sti_st0, dst, src));
	}

	void Assembler::fdivr(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fdivr_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fdivr_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fdivr, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fdivr(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		Code code;
		code = dst == Register::ST0 ? Code::Fdivr_st0_sti : Code::Fdivr_sti_st0;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::fdivrp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fdivrp_sti_st0, dst, src));
	}

	void Assembler::femms()
	{
		AddInstruction(Instruction::Create(Code::Femms));
	}

	void Assembler::feni()
	{
		AddInstruction(Instruction::Create(Code::Feni));
	}

	void Assembler::ffree(AssemblerRegisterST dst)
	{
		AddInstruction(Instruction::Create(Code::Ffree_sti, dst));
	}

	void Assembler::ffreep(AssemblerRegisterST dst)
	{
		AddInstruction(Instruction::Create(Code::Ffreep_sti, dst));
	}

	void Assembler::fiadd(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fiadd_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fiadd_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fiadd, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ficom(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Ficom_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Ficom_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Ficom, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ficomp(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Ficomp_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Ficomp_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Ficomp, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fidiv(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fidiv_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fidiv_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fidiv, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fidivr(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fidivr_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fidivr_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fidivr, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fild(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fild_m64int;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fild_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fild_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fild, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fimul(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fimul_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fimul_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fimul, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fincstp()
	{
		AddInstruction(Instruction::Create(Code::Fincstp));
	}

	void Assembler::finit()
	{
		AddInstruction(Instruction::Create(Code::Finit));
	}

	void Assembler::fist(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fist_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fist_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fist, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fistp(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fistp_m64int;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fistp_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fistp_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fistp, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fisttp(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fisttp_m64int;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fisttp_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fisttp_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fisttp, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fisub(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fisub_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fisub_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fisub, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fisubr(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fisubr_m32int;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Fisubr_m16int;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fisubr, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fld(AssemblerRegisterST dst)
	{
		AddInstruction(Instruction::Create(Code::Fld_sti, dst));
	}

	void Assembler::fld(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Tbyte)
		{
			code = Code::Fld_m80fp;
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fld_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fld_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fld, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fld1()
	{
		AddInstruction(Instruction::Create(Code::Fld1));
	}

	void Assembler::fldcw(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fldcw_m2byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fldenv(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Fldenv_m28byte : Code::Fldenv_m14byte;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fldl2e()
	{
		AddInstruction(Instruction::Create(Code::Fldl2e));
	}

	void Assembler::fldl2t()
	{
		AddInstruction(Instruction::Create(Code::Fldl2t));
	}

	void Assembler::fldlg2()
	{
		AddInstruction(Instruction::Create(Code::Fldlg2));
	}

	void Assembler::fldln2()
	{
		AddInstruction(Instruction::Create(Code::Fldln2));
	}

	void Assembler::fldpi()
	{
		AddInstruction(Instruction::Create(Code::Fldpi));
	}

	void Assembler::fldz()
	{
		AddInstruction(Instruction::Create(Code::Fldz));
	}

	void Assembler::fmul(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fmul_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fmul_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fmul, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fmul(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		Code code;
		code = dst == Register::ST0 ? Code::Fmul_st0_sti : Code::Fmul_sti_st0;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::fmulp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fmulp_sti_st0, dst, src));
	}

	void Assembler::fnclex()
	{
		AddInstruction(Instruction::Create(Code::Fnclex));
	}

	void Assembler::fndisi()
	{
		AddInstruction(Instruction::Create(Code::Fndisi));
	}

	void Assembler::fneni()
	{
		AddInstruction(Instruction::Create(Code::Fneni));
	}

	void Assembler::fninit()
	{
		AddInstruction(Instruction::Create(Code::Fninit));
	}

	void Assembler::fnop()
	{
		AddInstruction(Instruction::Create(Code::Fnop));
	}

	void Assembler::fnsave(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Fnsave_m108byte : Code::Fnsave_m94byte;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fnsetpm()
	{
		AddInstruction(Instruction::Create(Code::Fnsetpm));
	}

	void Assembler::fnstcw(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fnstcw_m2byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fnstdw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Fnstdw_AX, dst));
	}

	void Assembler::fnstenv(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Fnstenv_m28byte : Code::Fnstenv_m14byte;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fnstsg(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Fnstsg_AX, dst));
	}

	void Assembler::fnstsw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Fnstsw_AX, dst));
	}

	void Assembler::fnstsw(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fnstsw_m2byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fpatan()
	{
		AddInstruction(Instruction::Create(Code::Fpatan));
	}

	void Assembler::fprem()
	{
		AddInstruction(Instruction::Create(Code::Fprem));
	}

	void Assembler::fprem1()
	{
		AddInstruction(Instruction::Create(Code::Fprem1));
	}

	void Assembler::fptan()
	{
		AddInstruction(Instruction::Create(Code::Fptan));
	}

	void Assembler::frndint()
	{
		AddInstruction(Instruction::Create(Code::Frndint));
	}

	void Assembler::frstor(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Frstor_m108byte : Code::Frstor_m94byte;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::frstpm()
	{
		AddInstruction(Instruction::Create(Code::Frstpm));
	}

	void Assembler::fsave(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Fsave_m108byte : Code::Fsave_m94byte;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fscale()
	{
		AddInstruction(Instruction::Create(Code::Fscale));
	}

	void Assembler::fsetpm()
	{
		AddInstruction(Instruction::Create(Code::Fsetpm));
	}

	void Assembler::fsin()
	{
		AddInstruction(Instruction::Create(Code::Fsin));
	}

	void Assembler::fsincos()
	{
		AddInstruction(Instruction::Create(Code::Fsincos));
	}

	void Assembler::fsqrt()
	{
		AddInstruction(Instruction::Create(Code::Fsqrt));
	}

	void Assembler::fst(AssemblerRegisterST dst)
	{
		AddInstruction(Instruction::Create(Code::Fst_sti, dst));
	}

	void Assembler::fst(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fst_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fst_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fst, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fstcw(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fstcw_m2byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fstdw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Fstdw_AX, dst));
	}

	void Assembler::fstenv(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Fstenv_m28byte : Code::Fstenv_m14byte;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fstp(AssemblerRegisterST dst)
	{
		AddInstruction(Instruction::Create(Code::Fstp_sti, dst));
	}

	void Assembler::fstp(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Tbyte)
		{
			code = Code::Fstp_m80fp;
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fstp_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fstp_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fstp, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fstpnce(AssemblerRegisterST dst)
	{
		AddInstruction(Instruction::Create(Code::Fstpnce_sti, dst));
	}

	void Assembler::fstsg(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Fstsg_AX, dst));
	}

	void Assembler::fstsw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Fstsw_AX, dst));
	}

	void Assembler::fstsw(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fstsw_m2byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fsub(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fsub_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fsub_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fsub, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fsub(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		Code code;
		code = dst == Register::ST0 ? Code::Fsub_st0_sti : Code::Fsub_sti_st0;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::fsubp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fsubp_sti_st0, dst, src));
	}

	void Assembler::fsubr(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Fsubr_m64fp;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Fsubr_m32fp;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Fsubr, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fsubr(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		Code code;
		code = dst == Register::ST0 ? Code::Fsubr_st0_sti : Code::Fsubr_sti_st0;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::fsubrp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fsubrp_sti_st0, dst, src));
	}

	void Assembler::ftst()
	{
		AddInstruction(Instruction::Create(Code::Ftst));
	}

	void Assembler::fucom(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fucom_st0_sti, dst, src));
	}

	void Assembler::fucomi(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fucomi_st0_sti, dst, src));
	}

	void Assembler::fucomip(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fucomip_st0_sti, dst, src));
	}

	void Assembler::fucomp(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fucomp_st0_sti, dst, src));
	}

	void Assembler::fucompp()
	{
		AddInstruction(Instruction::Create(Code::Fucompp));
	}

	void Assembler::fxam()
	{
		AddInstruction(Instruction::Create(Code::Fxam));
	}

	void Assembler::fxch(AssemblerRegisterST dst, AssemblerRegisterST src)
	{
		AddInstruction(Instruction::Create(Code::Fxch_st0_sti, dst, src));
	}

	void Assembler::fxrstor(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fxrstor_m512byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fxrstor64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fxrstor64_m512byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fxsave(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fxsave_m512byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fxsave64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Fxsave64_m512byte, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::fxtract()
	{
		AddInstruction(Instruction::Create(Code::Fxtract));
	}

	void Assembler::fyl2x()
	{
		AddInstruction(Instruction::Create(Code::Fyl2x));
	}

	void Assembler::fyl2xp1()
	{
		AddInstruction(Instruction::Create(Code::Fyl2xp1));
	}

	void Assembler::getsec()
	{
		AddInstruction(Instruction::Create(Code::Getsecd));
	}

	void Assembler::getsecq()
	{
		AddInstruction(Instruction::Create(Code::Getsecq));
	}

	void Assembler::gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineinvqb_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineqb_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineqb_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineqb_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8affineqb_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::gf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8mulb_xmm_xmmm128, dst, src));
	}

	void Assembler::gf2p8mulb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Gf2p8mulb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::haddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Haddpd_xmm_xmmm128, dst, src));
	}

	void Assembler::haddpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Haddpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::haddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Haddps_xmm_xmmm128, dst, src));
	}

	void Assembler::haddps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Haddps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::hlt()
	{
		AddInstruction(Instruction::Create(Code::Hlt));
	}

	void Assembler::hreset(std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Hreset_imm8, imm));
	}

	void Assembler::hreset(std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Hreset_imm8, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::hsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Hsubpd_xmm_xmmm128, dst, src));
	}

	void Assembler::hsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Hsubpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::hsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Hsubps_xmm_xmmm128, dst, src));
	}

	void Assembler::hsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Hsubps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ibts(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Ibts_rm16_r16, dst, src));
	}

	void Assembler::ibts(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Ibts_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::ibts(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Ibts_rm32_r32, dst, src));
	}

	void Assembler::ibts(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Ibts_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::idiv(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Idiv_rm8, dst));
	}

	void Assembler::idiv(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Idiv_rm16, dst));
	}

	void Assembler::idiv(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Idiv_rm32, dst));
	}

	void Assembler::idiv(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Idiv_rm64, dst));
	}

	void Assembler::idiv(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Idiv_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Idiv_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Idiv_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Idiv_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Idiv, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::imul(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Imul_rm8, dst));
	}

	void Assembler::imul(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Imul_rm16, dst));
	}

	void Assembler::imul(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Imul_rm32, dst));
	}

	void Assembler::imul(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Imul_rm64, dst));
	}

	void Assembler::imul(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Imul_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Imul_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Imul_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Imul_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Imul, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::imul(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Imul_r16_rm16, dst, src));
	}

	void Assembler::imul(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Imul_r32_rm32, dst, src));
	}

	void Assembler::imul(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Imul_r64_rm64, dst, src));
	}

	void Assembler::imul(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Imul_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::imul(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Imul_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::imul(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Imul_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::imul(AssemblerRegister16 dst, AssemblerRegister16 src1, std::int16_t imm)
	{
		Code code;
		code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Imul_r16_rm16_imm8 : Code::Imul_r16_rm16_imm16;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::imul(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm)
	{
		Code code;
		code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Imul_r32_rm32_imm8 : Code::Imul_r32_rm32_imm32;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::imul(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int32_t imm)
	{
		Code code;
		code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Imul_r64_rm64_imm8 : Code::Imul_r64_rm64_imm32;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, std::int16_t imm)
	{
		Code code;
		code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Imul_r16_rm16_imm8 : Code::Imul_r16_rm16_imm16;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		Code code;
		code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Imul_r32_rm32_imm8 : Code::Imul_r32_rm32_imm32;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::imul(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		Code code;
		code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Imul_r64_rm64_imm8 : Code::Imul_r64_rm64_imm32;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::imul(AssemblerRegister16 dst, AssemblerRegister16 src1, std::uint16_t imm)
	{
		Code code;
		code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Imul_r16_rm16_imm8 : Code::Imul_r16_rm16_imm16;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::imul(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm)
	{
		Code code;
		code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Imul_r32_rm32_imm8 : Code::Imul_r32_rm32_imm32;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, std::uint16_t imm)
	{
		Code code;
		code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Imul_r16_rm16_imm8 : Code::Imul_r16_rm16_imm16;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		Code code;
		code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Imul_r32_rm32_imm8 : Code::Imul_r32_rm32_imm32;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::in(AssemblerRegister8 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::In_AL_DX, dst, src));
	}

	void Assembler::in(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::In_AX_DX, dst, src));
	}

	void Assembler::in(AssemblerRegister32 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::In_EAX_DX, dst, src));
	}

	void Assembler::in(AssemblerRegister8 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::In_AL_imm8, dst, imm));
	}

	void Assembler::in(AssemblerRegister16 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::In_AX_imm8, dst, imm));
	}

	void Assembler::in(AssemblerRegister32 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::In_EAX_imm8, dst, imm));
	}

	void Assembler::in(AssemblerRegister8 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::In_AL_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::in(AssemblerRegister16 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::In_AX_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::in(AssemblerRegister32 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::In_EAX_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::inc(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Inc_rm8, dst));
	}

	void Assembler::inc(AssemblerRegister16 dst)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Inc_rm16 : Code::Inc_r16;
		AddInstruction(Instruction::Create(code, dst));
	}

	void Assembler::inc(AssemblerRegister32 dst)
	{
		Code code;
		code = GetBitness() == 64 ? Code::Inc_rm32 : Code::Inc_r32;
		AddInstruction(Instruction::Create(code, dst));
	}

	void Assembler::inc(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Inc_rm64, dst));
	}

	void Assembler::inc(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Inc_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Inc_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Inc_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Inc_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Inc, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::incsspd(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Incsspd_r32, dst));
	}

	void Assembler::incsspq(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Incsspq_r64, dst));
	}

	void Assembler::insb()
	{
		AddInstruction(Instruction::CreateInsb(GetBitness()));
	}

	void Assembler::insd()
	{
		AddInstruction(Instruction::CreateInsd(GetBitness()));
	}

	void Assembler::insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Insertps_xmm_xmmm32_imm8, dst, src1, imm));
	}

	void Assembler::insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Insertps_xmm_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Insertps_xmm_xmmm32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Insertps_xmm_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Insertq_xmm_xmm, dst, src));
	}

	void Assembler::insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm, std::int8_t imm1)
	{
		AddInstruction(Instruction::Create(Code::Insertq_xmm_xmm_imm8_imm8, dst, src1, imm, imm1));
	}

	void Assembler::insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm, std::uint8_t imm1)
	{
		AddInstruction(Instruction::Create(Code::Insertq_xmm_xmm_imm8_imm8, dst, src1, static_cast<std::uint32_t>(imm), static_cast<std::uint32_t>(imm1)));
	}

	void Assembler::insw()
	{
		AddInstruction(Instruction::CreateInsw(GetBitness()));
	}

	void Assembler::int_(std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Int_imm8, imm));
	}

	void Assembler::int_(std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Int_imm8, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::int1()
	{
		AddInstruction(Instruction::Create(Code::Int1));
	}

	void Assembler::int3()
	{
		AddInstruction(Instruction::Create(Code::Int3));
	}

	void Assembler::into()
	{
		AddInstruction(Instruction::Create(Code::Into));
	}

	void Assembler::invd()
	{
		AddInstruction(Instruction::Create(Code::Invd));
	}

	void Assembler::invept(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Invept_r32_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::invept(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Invept_r64_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::invlpg(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Invlpg_m, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::invlpga()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Invlpgaq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Invlpgad : Code::Invlpgaw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::invlpgb()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Invlpgbq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Invlpgbd : Code::Invlpgbw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::invpcid(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Invpcid_r32_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::invpcid(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Invpcid_r64_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::invvpid(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Invvpid_r32_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::invvpid(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Invvpid_r64_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::iret()
	{
		AddInstruction(Instruction::Create(Code::Iretw));
	}

	void Assembler::iretd()
	{
		AddInstruction(Instruction::Create(Code::Iretd));
	}

	void Assembler::iretq()
	{
		AddInstruction(Instruction::Create(Code::Iretq));
	}

	void Assembler::ja(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Ja_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Ja_rel8_32 : Code::Ja_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Ja_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Ja_rel32_32 : Code::Ja_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::ja(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Ja_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Ja_rel8_32 : Code::Ja_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Ja_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Ja_rel32_32 : Code::Ja_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jae(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jae_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jae_rel8_32 : Code::Jae_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jae_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jae_rel32_32 : Code::Jae_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jae(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jae_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jae_rel8_32 : Code::Jae_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jae_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jae_rel32_32 : Code::Jae_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jb(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jb_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jb_rel8_32 : Code::Jb_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jb_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jb_rel32_32 : Code::Jb_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jb(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jb_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jb_rel8_32 : Code::Jb_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jb_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jb_rel32_32 : Code::Jb_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jbe(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jbe_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jbe_rel8_32 : Code::Jbe_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jbe_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jbe_rel32_32 : Code::Jbe_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jbe(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jbe_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jbe_rel8_32 : Code::Jbe_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jbe_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jbe_rel32_32 : Code::Jbe_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jc(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jb_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jb_rel8_32 : Code::Jb_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jb_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jb_rel32_32 : Code::Jb_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jc(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jb_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jb_rel8_32 : Code::Jb_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jb_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jb_rel32_32 : Code::Jb_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jcxz(Iced::Intel::Label dst)
	{
		AddInstruction(Instruction::CreateBranch(Code::Jcxz_rel8_16, dst.Id));
	}

	void Assembler::jcxz(std::uint64_t dst)
	{
		AddInstruction(Instruction::CreateBranch(Code::Jcxz_rel8_16, dst));
	}

	void Assembler::je(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Je_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Je_rel8_32 : Code::Je_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Je_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Je_rel32_32 : Code::Je_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::je(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Je_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Je_rel8_32 : Code::Je_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Je_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Je_rel32_32 : Code::Je_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jecxz(Iced::Intel::Label dst)
	{
		AddInstruction(Instruction::CreateBranch(Code::Jecxz_rel8_32, dst.Id));
	}

	void Assembler::jecxz(std::uint64_t dst)
	{
		AddInstruction(Instruction::CreateBranch(Code::Jecxz_rel8_32, dst));
	}

	void Assembler::jg(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jg_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jg_rel8_32 : Code::Jg_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jg_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jg_rel32_32 : Code::Jg_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jg(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jg_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jg_rel8_32 : Code::Jg_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jg_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jg_rel32_32 : Code::Jg_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jge(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jge_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jge_rel8_32 : Code::Jge_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jge_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jge_rel32_32 : Code::Jge_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jge(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jge_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jge_rel8_32 : Code::Jge_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jge_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jge_rel32_32 : Code::Jge_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jl(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jl_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jl_rel8_32 : Code::Jl_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jl_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jl_rel32_32 : Code::Jl_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jl(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jl_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jl_rel8_32 : Code::Jl_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jl_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jl_rel32_32 : Code::Jl_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jle(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jle_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jle_rel8_32 : Code::Jle_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jle_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jle_rel32_32 : Code::Jle_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jle(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jle_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jle_rel8_32 : Code::Jle_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jle_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jle_rel32_32 : Code::Jle_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jmp(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Jmp_rm16, dst));
	}

	void Assembler::jmp(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Jmp_rm32, dst));
	}

	void Assembler::jmp(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Jmp_rm64, dst));
	}

	void Assembler::jmp(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Tbyte)
		{
			code = Code::Jmp_m1664;
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Jmp_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Fword)
		{
			code = Code::Jmp_m1632;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = GetBitness() >= 32 ? Code::Jmp_rm32 : Code::Jmp_m1616;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Jmp_rm16;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Jmp, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::jmp(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jmp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jmp_rel8_32 : Code::Jmp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jmp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jmp_rel32_32 : Code::Jmp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jmp(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jmp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jmp_rel8_32 : Code::Jmp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jmp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jmp_rel32_32 : Code::Jmp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jmpe(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Jmpe_rm16, dst));
	}

	void Assembler::jmpe(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Jmpe_rm32, dst));
	}

	void Assembler::jmpe(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Jmpe_rm32 : Code::Jmpe_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::jmpe(Iced::Intel::Label dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Jmpe_disp32 : Code::Jmpe_disp16;
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jmpe(std::uint64_t dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Jmpe_disp32 : Code::Jmpe_disp16;
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jna(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jbe_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jbe_rel8_32 : Code::Jbe_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jbe_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jbe_rel32_32 : Code::Jbe_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jna(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jbe_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jbe_rel8_32 : Code::Jbe_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jbe_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jbe_rel32_32 : Code::Jbe_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnae(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jb_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jb_rel8_32 : Code::Jb_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jb_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jb_rel32_32 : Code::Jb_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnae(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jb_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jb_rel8_32 : Code::Jb_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jb_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jb_rel32_32 : Code::Jb_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnb(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jae_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jae_rel8_32 : Code::Jae_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jae_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jae_rel32_32 : Code::Jae_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnb(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jae_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jae_rel8_32 : Code::Jae_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jae_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jae_rel32_32 : Code::Jae_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnbe(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Ja_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Ja_rel8_32 : Code::Ja_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Ja_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Ja_rel32_32 : Code::Ja_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnbe(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Ja_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Ja_rel8_32 : Code::Ja_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Ja_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Ja_rel32_32 : Code::Ja_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnc(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jae_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jae_rel8_32 : Code::Jae_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jae_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jae_rel32_32 : Code::Jae_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnc(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jae_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jae_rel8_32 : Code::Jae_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jae_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jae_rel32_32 : Code::Jae_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jne(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jne_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jne_rel8_32 : Code::Jne_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jne_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jne_rel32_32 : Code::Jne_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jne(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jne_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jne_rel8_32 : Code::Jne_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jne_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jne_rel32_32 : Code::Jne_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jng(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jle_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jle_rel8_32 : Code::Jle_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jle_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jle_rel32_32 : Code::Jle_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jng(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jle_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jle_rel8_32 : Code::Jle_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jle_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jle_rel32_32 : Code::Jle_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnge(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jl_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jl_rel8_32 : Code::Jl_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jl_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jl_rel32_32 : Code::Jl_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnge(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jl_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jl_rel8_32 : Code::Jl_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jl_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jl_rel32_32 : Code::Jl_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnl(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jge_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jge_rel8_32 : Code::Jge_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jge_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jge_rel32_32 : Code::Jge_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnl(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jge_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jge_rel8_32 : Code::Jge_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jge_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jge_rel32_32 : Code::Jge_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnle(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jg_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jg_rel8_32 : Code::Jg_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jg_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jg_rel32_32 : Code::Jg_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnle(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jg_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jg_rel8_32 : Code::Jg_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jg_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jg_rel32_32 : Code::Jg_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jno(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jno_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jno_rel8_32 : Code::Jno_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jno_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jno_rel32_32 : Code::Jno_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jno(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jno_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jno_rel8_32 : Code::Jno_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jno_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jno_rel32_32 : Code::Jno_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnp(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jnp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jnp_rel8_32 : Code::Jnp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jnp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jnp_rel32_32 : Code::Jnp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnp(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jnp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jnp_rel8_32 : Code::Jnp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jnp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jnp_rel32_32 : Code::Jnp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jns(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jns_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jns_rel8_32 : Code::Jns_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jns_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jns_rel32_32 : Code::Jns_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jns(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jns_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jns_rel8_32 : Code::Jns_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jns_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jns_rel32_32 : Code::Jns_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jnz(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jne_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jne_rel8_32 : Code::Jne_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jne_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jne_rel32_32 : Code::Jne_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jnz(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jne_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jne_rel8_32 : Code::Jne_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jne_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jne_rel32_32 : Code::Jne_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jo(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jo_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jo_rel8_32 : Code::Jo_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jo_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jo_rel32_32 : Code::Jo_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jo(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jo_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jo_rel8_32 : Code::Jo_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jo_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jo_rel32_32 : Code::Jo_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jp(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jp_rel8_32 : Code::Jp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jp_rel32_32 : Code::Jp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jp(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jp_rel8_32 : Code::Jp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jp_rel32_32 : Code::Jp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jpe(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jp_rel8_32 : Code::Jp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jp_rel32_32 : Code::Jp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jpe(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jp_rel8_32 : Code::Jp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jp_rel32_32 : Code::Jp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jpo(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jnp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jnp_rel8_32 : Code::Jnp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jnp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jnp_rel32_32 : Code::Jnp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jpo(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Jnp_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Jnp_rel8_32 : Code::Jnp_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Jnp_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Jnp_rel32_32 : Code::Jnp_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jrcxz(Iced::Intel::Label dst)
	{
		AddInstruction(Instruction::CreateBranch(Code::Jrcxz_rel8_64, dst.Id));
	}

	void Assembler::jrcxz(std::uint64_t dst)
	{
		AddInstruction(Instruction::CreateBranch(Code::Jrcxz_rel8_64, dst));
	}

	void Assembler::js(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Js_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Js_rel8_32 : Code::Js_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Js_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Js_rel32_32 : Code::Js_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::js(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Js_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Js_rel8_32 : Code::Js_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Js_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Js_rel32_32 : Code::Js_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::jz(Iced::Intel::Label dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Je_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Je_rel8_32 : Code::Je_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Je_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Je_rel32_32 : Code::Je_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::jz(std::uint64_t dst)
	{
		Code code;
		if (GetPreferShortBranch())
		{
			if (GetBitness() == 64)
			{
				code = Code::Je_rel8_64;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Je_rel8_32 : Code::Je_rel8_16;
			}
		}
		else if (GetBitness() == 64)
		{
			code = Code::Je_rel32_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Je_rel32_32 : Code::Je_rel16;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::kaddb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kaddb_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kaddd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kaddd_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kaddq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kaddq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kaddw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kaddw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandb_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandd_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandnb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandnb_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandnd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandnd_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandnq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandnq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandnw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandnw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kandw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kandw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kmovb(AssemblerRegisterK dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovb_kr_r32, dst, src));
	}

	void Assembler::kmovb(AssemblerRegister32 dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovb_r32_kr, dst, src));
	}

	void Assembler::kmovb(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovb_kr_km8, dst, src));
	}

	void Assembler::kmovb(AssemblerMemoryOperand dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovb_m8_kr, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::kmovb(AssemblerRegisterK dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovb_kr_km8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::kmovd(AssemblerRegisterK dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovd_kr_r32, dst, src));
	}

	void Assembler::kmovd(AssemblerRegister32 dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovd_r32_kr, dst, src));
	}

	void Assembler::kmovd(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovd_kr_km32, dst, src));
	}

	void Assembler::kmovd(AssemblerMemoryOperand dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovd_m32_kr, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::kmovd(AssemblerRegisterK dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovd_kr_km32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::kmovq(AssemblerRegisterK dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovq_kr_r64, dst, src));
	}

	void Assembler::kmovq(AssemblerRegister64 dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovq_r64_kr, dst, src));
	}

	void Assembler::kmovq(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovq_kr_km64, dst, src));
	}

	void Assembler::kmovq(AssemblerMemoryOperand dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovq_m64_kr, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::kmovq(AssemblerRegisterK dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovq_kr_km64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::kmovw(AssemblerRegisterK dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovw_kr_r32, dst, src));
	}

	void Assembler::kmovw(AssemblerRegister32 dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovw_r32_kr, dst, src));
	}

	void Assembler::kmovw(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovw_kr_km16, dst, src));
	}

	void Assembler::kmovw(AssemblerMemoryOperand dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovw_m16_kr, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::kmovw(AssemblerRegisterK dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kmovw_kr_km16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::knotb(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Knotb_kr_kr, dst, src));
	}

	void Assembler::knotd(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Knotd_kr_kr, dst, src));
	}

	void Assembler::knotq(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Knotq_kr_kr, dst, src));
	}

	void Assembler::knotw(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Knotw_kr_kr, dst, src));
	}

	void Assembler::korb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Korb_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kord_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::korq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Korq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kortestb(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kortestb_kr_kr, dst, src));
	}

	void Assembler::kortestd(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kortestd_kr_kr, dst, src));
	}

	void Assembler::kortestq(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kortestq_kr_kr, dst, src));
	}

	void Assembler::kortestw(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kortestw_kr_kr, dst, src));
	}

	void Assembler::korw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Korw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftlb_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftlb_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftld_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftld_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftlq_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftlq_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftlw_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftlw_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrb_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrb_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrd_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrd_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrq_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrq_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrw_kr_kr_imm8, dst, src1, imm));
	}

	void Assembler::kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kshiftrw_kr_kr_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::ktestb(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Ktestb_kr_kr, dst, src));
	}

	void Assembler::ktestd(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Ktestd_kr_kr, dst, src));
	}

	void Assembler::ktestq(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Ktestq_kr_kr, dst, src));
	}

	void Assembler::ktestw(AssemblerRegisterK dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Ktestw_kr_kr, dst, src));
	}

	void Assembler::kunpckbw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kunpckbw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kunpckdq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kunpckdq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kunpckwd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kunpckwd_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxnorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxnorb_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxnord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxnord_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxnorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxnorq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxnorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxnorw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxorb_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxord_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxorq_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::kxorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Kxorw_kr_kr_kr, dst, src1, src2));
	}

	void Assembler::lahf()
	{
		AddInstruction(Instruction::Create(Code::Lahf));
	}

	void Assembler::lar(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Lar_r16_rm16, dst, src));
	}

	void Assembler::lar(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Lar_r32_r32m16, dst, src));
	}

	void Assembler::lar(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Lar_r64_r64m16, dst, src));
	}

	void Assembler::lar(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lar_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lar(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lar_r32_r32m16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lddqu_xmm_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ldmxcsr(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Ldmxcsr_m32, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lds(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lds_r16_m1616, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lds(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lds_r32_m1632, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ldtilecfg(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::VEX_Ldtilecfg_m512, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lea(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lea_r16_m, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lea(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lea_r32_m, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lea(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lea_r64_m, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::leave()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Leaveq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Leaved : Code::Leavew;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::les(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Les_r16_m1616, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::les(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Les_r32_m1632, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lfence()
	{
		AddInstruction(Instruction::Create(Code::Lfence));
	}

	void Assembler::lfs(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lfs_r16_m1616, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lfs(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lfs_r32_m1632, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lfs(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lfs_r64_m1664, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lgdt(AssemblerMemoryOperand dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Lgdt_m1664;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Lgdt_m1632 : Code::Lgdt_m1632_16;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lgs(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lgs_r16_m1616, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lgs(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lgs_r32_m1632, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lgs(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lgs_r64_m1664, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lidt(AssemblerMemoryOperand dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Lidt_m1664;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Lidt_m1632 : Code::Lidt_m1632_16;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lkgs(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Lkgs_rm16, dst));
	}

	void Assembler::lkgs(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Lkgs_r32m16, dst));
	}

	void Assembler::lkgs(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Lkgs_r64m16, dst));
	}

	void Assembler::lkgs(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Lkgs_r32m16 : Code::Lkgs_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lldt(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Lldt_rm16, dst));
	}

	void Assembler::lldt(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Lldt_r32m16, dst));
	}

	void Assembler::lldt(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Lldt_r64m16, dst));
	}

	void Assembler::lldt(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Lldt_r32m16 : Code::Lldt_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::llwpcb(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::XOP_Llwpcb_r32, dst));
	}

	void Assembler::llwpcb(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::XOP_Llwpcb_r64, dst));
	}

	void Assembler::lmsw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Lmsw_rm16, dst));
	}

	void Assembler::lmsw(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Lmsw_r32m16, dst));
	}

	void Assembler::lmsw(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Lmsw_r64m16, dst));
	}

	void Assembler::lmsw(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Lmsw_r32m16 : Code::Lmsw_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::loadall()
	{
		AddInstruction(Instruction::Create(Code::Loadall386));
	}

	void Assembler::loadiwkey(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Loadiwkey_xmm_xmm, dst, src));
	}

	void Assembler::lodsb()
	{
		AddInstruction(Instruction::CreateLodsb(GetBitness()));
	}

	void Assembler::lodsd()
	{
		AddInstruction(Instruction::CreateLodsd(GetBitness()));
	}

	void Assembler::lodsq()
	{
		AddInstruction(Instruction::CreateLodsq(GetBitness()));
	}

	void Assembler::lodsw()
	{
		AddInstruction(Instruction::CreateLodsw(GetBitness()));
	}

	void Assembler::loop(Iced::Intel::Label dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loop_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loop_rel8_32_ECX : Code::Loop_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::loop(std::uint64_t dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loop_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loop_rel8_32_ECX : Code::Loop_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::loope(Iced::Intel::Label dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loope_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loope_rel8_32_ECX : Code::Loope_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::loope(std::uint64_t dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loope_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loope_rel8_32_ECX : Code::Loope_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::loopne(Iced::Intel::Label dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loopne_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loopne_rel8_32_ECX : Code::Loopne_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::loopne(std::uint64_t dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loopne_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loopne_rel8_32_ECX : Code::Loopne_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::loopnz(Iced::Intel::Label dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loopne_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loopne_rel8_32_ECX : Code::Loopne_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::loopnz(std::uint64_t dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loopne_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loopne_rel8_32_ECX : Code::Loopne_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::loopz(Iced::Intel::Label dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loope_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loope_rel8_32_ECX : Code::Loope_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst.Id));
	}

	void Assembler::loopz(std::uint64_t dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Loope_rel8_64_RCX;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Loope_rel8_32_ECX : Code::Loope_rel8_16_CX;
		}
		AddInstruction(Instruction::CreateBranch(code, dst));
	}

	void Assembler::lsl(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Lsl_r16_rm16, dst, src));
	}

	void Assembler::lsl(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Lsl_r32_r32m16, dst, src));
	}

	void Assembler::lsl(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Lsl_r64_r64m16, dst, src));
	}

	void Assembler::lsl(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lsl_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lsl(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lsl_r32_r32m16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lss(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lss_r16_m1616, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lss(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lss_r32_m1632, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lss(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lss_r64_m1664, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ltr(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Ltr_rm16, dst));
	}

	void Assembler::ltr(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Ltr_r32m16, dst));
	}

	void Assembler::ltr(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Ltr_r64m16, dst));
	}

	void Assembler::ltr(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Ltr_r32m16 : Code::Ltr_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r32_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r64_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r32_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r64_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r32_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r64_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r32_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpins_r64_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r32_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r64_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r32_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r64_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r32_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r64_rm32_imm32, dst, src1, imm));
	}

	void Assembler::lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r32_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Lwpval_r64_rm32_imm32, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::lzcnt(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Lzcnt_r16_rm16, dst, src));
	}

	void Assembler::lzcnt(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Lzcnt_r32_rm32, dst, src));
	}

	void Assembler::lzcnt(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Lzcnt_r64_rm64, dst, src));
	}

	void Assembler::lzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lzcnt_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lzcnt_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::lzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Lzcnt_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::maskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::CreateMaskmovdqu(GetBitness(), dst, src));
	}

	void Assembler::maskmovq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::CreateMaskmovq(GetBitness(), dst, src));
	}

	void Assembler::maxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Maxpd_xmm_xmmm128, dst, src));
	}

	void Assembler::maxpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Maxpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::maxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Maxps_xmm_xmmm128, dst, src));
	}

	void Assembler::maxps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Maxps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::maxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Maxsd_xmm_xmmm64, dst, src));
	}

	void Assembler::maxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Maxsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::maxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Maxss_xmm_xmmm32, dst, src));
	}

	void Assembler::maxss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Maxss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mcommit()
	{
		AddInstruction(Instruction::Create(Code::Mcommit));
	}

	void Assembler::mfence()
	{
		AddInstruction(Instruction::Create(Code::Mfence));
	}

	void Assembler::minpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Minpd_xmm_xmmm128, dst, src));
	}

	void Assembler::minpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Minpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::minps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Minps_xmm_xmmm128, dst, src));
	}

	void Assembler::minps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Minps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::minsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Minsd_xmm_xmmm64, dst, src));
	}

	void Assembler::minsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Minsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::minss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Minss_xmm_xmmm32, dst, src));
	}

	void Assembler::minss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Minss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::monitor()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Monitorq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Monitord : Code::Monitorw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::monitorx()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Monitorxq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Monitorxd : Code::Monitorxw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::montmul()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Montmul_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Montmul_32 : Code::Montmul_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::mov(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_rm8_r8, dst, src));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (src.Value == Register::AL && GetBitness() == 64 && dst.IsDisplacementOnly())
		{
			code = Code::Mov_moffs8_AL;
		}
		else
		{
			code = src.Value == Register::AL && GetBitness() < 64 && dst.IsDisplacementOnly() ? Code::Mov_moffs8_AL : Code::Mov_rm8_r8;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::mov(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_rm16_r16, dst, src));
	}

	void Assembler::mov(AssemblerRegisterSegment dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_Sreg_rm16, dst, src));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		Code code;
		if (src.Value == Register::AX && GetBitness() == 64 && dst.IsDisplacementOnly())
		{
			code = Code::Mov_moffs16_AX;
		}
		else
		{
			code = src.Value == Register::AX && GetBitness() < 64 && dst.IsDisplacementOnly() ? Code::Mov_moffs16_AX : Code::Mov_rm16_r16;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::mov(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_rm32_r32, dst, src));
	}

	void Assembler::mov(AssemblerRegisterSegment dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_Sreg_r32m16, dst, src));
	}

	void Assembler::mov(AssemblerRegisterCR dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_cr_r32, dst, src));
	}

	void Assembler::mov(AssemblerRegisterDR dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_dr_r32, dst, src));
	}

	void Assembler::mov(AssemblerRegisterTR dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_tr_r32, dst, src));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		Code code;
		if (src.Value == Register::EAX && GetBitness() == 64 && dst.IsDisplacementOnly())
		{
			code = Code::Mov_moffs32_EAX;
		}
		else
		{
			code = src.Value == Register::EAX && GetBitness() < 64 && dst.IsDisplacementOnly() ? Code::Mov_moffs32_EAX : Code::Mov_rm32_r32;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::mov(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_rm64_r64, dst, src));
	}

	void Assembler::mov(AssemblerRegisterSegment dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_Sreg_r64m16, dst, src));
	}

	void Assembler::mov(AssemblerRegisterCR dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_cr_r64, dst, src));
	}

	void Assembler::mov(AssemblerRegisterDR dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Mov_dr_r64, dst, src));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		Code code;
		if (src.Value == Register::RAX && GetBitness() == 64 && dst.IsDisplacementOnly())
		{
			code = Code::Mov_moffs64_RAX;
		}
		else
		{
			code = src.Value == Register::RAX && GetBitness() < 64 && dst.IsDisplacementOnly() ? Code::Mov_moffs64_RAX : Code::Mov_rm64_r64;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::mov(AssemblerRegister16 dst, AssemblerRegisterSegment src)
	{
		AddInstruction(Instruction::Create(Code::Mov_rm16_Sreg, dst, src));
	}

	void Assembler::mov(AssemblerRegister32 dst, AssemblerRegisterSegment src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r32m16_Sreg, dst, src));
	}

	void Assembler::mov(AssemblerRegister64 dst, AssemblerRegisterSegment src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r64m16_Sreg, dst, src));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, AssemblerRegisterSegment src)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Mov_r32m16_Sreg : Code::Mov_rm16_Sreg;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::mov(AssemblerRegister32 dst, AssemblerRegisterCR src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r32_cr, dst, src));
	}

	void Assembler::mov(AssemblerRegister64 dst, AssemblerRegisterCR src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r64_cr, dst, src));
	}

	void Assembler::mov(AssemblerRegister32 dst, AssemblerRegisterDR src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r32_dr, dst, src));
	}

	void Assembler::mov(AssemblerRegister64 dst, AssemblerRegisterDR src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r64_dr, dst, src));
	}

	void Assembler::mov(AssemblerRegister32 dst, AssemblerRegisterTR src)
	{
		AddInstruction(Instruction::Create(Code::Mov_r32_tr, dst, src));
	}

	void Assembler::mov(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (dst.Value == Register::AL && GetBitness() == 64 && src.IsDisplacementOnly())
		{
			code = Code::Mov_AL_moffs8;
		}
		else
		{
			code = dst.Value == Register::AL && GetBitness() < 64 && src.IsDisplacementOnly() ? Code::Mov_AL_moffs8 : Code::Mov_r8_rm8;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mov(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (dst.Value == Register::AX && GetBitness() == 64 && src.IsDisplacementOnly())
		{
			code = Code::Mov_AX_moffs16;
		}
		else
		{
			code = dst.Value == Register::AX && GetBitness() < 64 && src.IsDisplacementOnly() ? Code::Mov_AX_moffs16 : Code::Mov_r16_rm16;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mov(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (dst.Value == Register::EAX && GetBitness() == 64 && src.IsDisplacementOnly())
		{
			code = Code::Mov_EAX_moffs32;
		}
		else
		{
			code = dst.Value == Register::EAX && GetBitness() < 64 && src.IsDisplacementOnly() ? Code::Mov_EAX_moffs32 : Code::Mov_r32_rm32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mov(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (dst.Value == Register::RAX && GetBitness() == 64 && src.IsDisplacementOnly())
		{
			code = Code::Mov_RAX_moffs64;
		}
		else
		{
			code = dst.Value == Register::RAX && GetBitness() < 64 && src.IsDisplacementOnly() ? Code::Mov_RAX_moffs64 : Code::Mov_r64_rm64;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mov(AssemblerRegisterSegment dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Mov_Sreg_r32m16 : Code::Mov_Sreg_rm16;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mov(AssemblerRegister8 dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r8_imm8, dst, imm));
	}

	void Assembler::mov(AssemblerRegister16 dst, std::int16_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r16_imm16, dst, imm));
	}

	void Assembler::mov(AssemblerRegister32 dst, std::int32_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r32_imm32, dst, imm));
	}

	void Assembler::mov(AssemblerRegister64 dst, std::int64_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r64_imm64, dst, imm));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Mov_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Mov_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Mov_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Mov_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Mov, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::mov(AssemblerRegister8 dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r8_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::mov(AssemblerRegister16 dst, std::uint16_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r16_imm16, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::mov(AssemblerRegister32 dst, std::uint32_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r32_imm32, dst, imm));
	}

	void Assembler::mov(AssemblerRegister64 dst, std::uint64_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mov_r64_imm64, dst, imm));
	}

	void Assembler::mov(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Mov_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Mov_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Mov_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Mov, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::movapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movapd_xmm_xmmm128, dst, src));
	}

	void Assembler::movapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movapd_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movapd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movaps_xmm_xmmm128, dst, src));
	}

	void Assembler::movaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movaps_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movaps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movbe(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movbe_m16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movbe(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movbe_m32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movbe(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Movbe_m64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movbe(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movbe_r16_m16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movbe(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movbe_r32_m32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movbe(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movbe_r64_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movd(AssemblerRegisterMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movd_mm_rm32, dst, src));
	}

	void Assembler::movd(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movd_xmm_rm32, dst, src));
	}

	void Assembler::movd(AssemblerRegister32 dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movd_rm32_mm, dst, src));
	}

	void Assembler::movd(AssemblerMemoryOperand dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movd_rm32_mm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movd(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movd_rm32_xmm, dst, src));
	}

	void Assembler::movd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movd_rm32_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movd_mm_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movd_xmm_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movddup_xmm_xmmm64, dst, src));
	}

	void Assembler::movddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movddup_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movdir64b(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movdir64b_r16_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movdir64b(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movdir64b_r32_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movdir64b(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movdir64b_r64_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movdiri(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movdiri_m32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movdiri(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Movdiri_m64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movdq2q(AssemblerRegisterMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movdq2q_mm_xmm, dst, src));
	}

	void Assembler::movdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movdqa_xmm_xmmm128, dst, src));
	}

	void Assembler::movdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movdqa_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movdqa_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movdqu_xmm_xmmm128, dst, src));
	}

	void Assembler::movdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movdqu_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movdqu_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movhlps_xmm_xmm, dst, src));
	}

	void Assembler::movhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movhpd_m64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movhpd_xmm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movhps_m64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movhps_xmm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movlhps_xmm_xmm, dst, src));
	}

	void Assembler::movlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movlpd_m64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movlpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movlpd_xmm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movlps_m64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movlps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movlps_xmm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movmskpd_r32_xmm, dst, src));
	}

	void Assembler::movmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movmskpd_r64_xmm, dst, src));
	}

	void Assembler::movmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movmskps_r32_xmm, dst, src));
	}

	void Assembler::movmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movmskps_r64_xmm, dst, src));
	}

	void Assembler::movntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movntdq_m128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movntdqa_xmm_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movnti(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movnti_m32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movnti(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Movnti_m64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movntpd_m128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movntps_m128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movntq(AssemblerMemoryOperand dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movntq_m64_mm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movntsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movntsd_m64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movntss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movntss_m32_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movq(AssemblerRegisterMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Movq_mm_rm64, dst, src));
	}

	void Assembler::movq(AssemblerRegisterXMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Movq_xmm_rm64, dst, src));
	}

	void Assembler::movq(AssemblerRegister64 dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq_rm64_mm, dst, src));
	}

	void Assembler::movq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq_mm_mmm64, dst, src));
	}

	void Assembler::movq(AssemblerMemoryOperand dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq_mmm64_mm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movq(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq_rm64_xmm, dst, src));
	}

	void Assembler::movq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq_xmm_xmmm64, dst, src));
	}

	void Assembler::movq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq_xmmm64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movq_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movq2dq(AssemblerRegisterXMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Movq2dq_xmm_mm, dst, src));
	}

	void Assembler::movsb()
	{
		AddInstruction(Instruction::CreateMovsb(GetBitness()));
	}

	void Assembler::movsd()
	{
		AddInstruction(Instruction::CreateMovsd(GetBitness()));
	}

	void Assembler::movsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movsd_xmm_xmmm64, dst, src));
	}

	void Assembler::movsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movsd_xmmm64_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movshdup_xmm_xmmm128, dst, src));
	}

	void Assembler::movshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movshdup_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movsldup_xmm_xmmm128, dst, src));
	}

	void Assembler::movsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movsldup_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsq()
	{
		AddInstruction(Instruction::CreateMovsq(GetBitness()));
	}

	void Assembler::movss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movss_xmm_xmmm32, dst, src));
	}

	void Assembler::movss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movss_xmmm32_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsw()
	{
		AddInstruction(Instruction::CreateMovsw(GetBitness()));
	}

	void Assembler::movsx(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Movsx_r16_rm8, dst, src));
	}

	void Assembler::movsx(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Movsx_r32_rm8, dst, src));
	}

	void Assembler::movsx(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Movsx_r64_rm8, dst, src));
	}

	void Assembler::movsx(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movsx_r16_rm16, dst, src));
	}

	void Assembler::movsx(AssemblerRegister32 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movsx_r32_rm16, dst, src));
	}

	void Assembler::movsx(AssemblerRegister64 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movsx_r64_rm16, dst, src));
	}

	void Assembler::movsx(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Movsx_r16_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Movsx_r16_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Movsx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsx(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Movsx_r32_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Movsx_r32_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Movsx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsx(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Movsx_r64_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Movsx_r64_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Movsx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsxd(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movsxd_r16_rm16, dst, src));
	}

	void Assembler::movsxd(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movsxd_r32_rm32, dst, src));
	}

	void Assembler::movsxd(AssemblerRegister64 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Movsxd_r64_rm32, dst, src));
	}

	void Assembler::movsxd(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movsxd_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsxd(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movsxd_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movsxd(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movsxd_r64_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movupd_xmm_xmmm128, dst, src));
	}

	void Assembler::movupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movupd_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movupd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movups_xmm_xmmm128, dst, src));
	}

	void Assembler::movups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Movups_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::movups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Movups_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movzx(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Movzx_r16_rm8, dst, src));
	}

	void Assembler::movzx(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Movzx_r32_rm8, dst, src));
	}

	void Assembler::movzx(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Movzx_r64_rm8, dst, src));
	}

	void Assembler::movzx(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movzx_r16_rm16, dst, src));
	}

	void Assembler::movzx(AssemblerRegister32 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movzx_r32_rm16, dst, src));
	}

	void Assembler::movzx(AssemblerRegister64 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Movzx_r64_rm16, dst, src));
	}

	void Assembler::movzx(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Movzx_r16_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Movzx_r16_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Movzx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movzx(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Movzx_r32_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Movzx_r32_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Movzx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::movzx(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.Size == MemoryOperandSize::Word)
		{
			code = Code::Movzx_r64_rm16;
		}
		else if (src.Size == MemoryOperandSize::Byte)
		{
			code = Code::Movzx_r64_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Movzx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mpsadbw_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mpsadbw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mpsadbw_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Mpsadbw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::mul(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Mul_rm8, dst));
	}

	void Assembler::mul(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Mul_rm16, dst));
	}

	void Assembler::mul(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Mul_rm32, dst));
	}

	void Assembler::mul(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Mul_rm64, dst));
	}

	void Assembler::mul(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Mul_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Mul_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Mul_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Mul_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Mul, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Mulpd_xmm_xmmm128, dst, src));
	}

	void Assembler::mulpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Mulpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Mulps_xmm_xmmm128, dst, src));
	}

	void Assembler::mulps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Mulps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Mulsd_xmm_xmmm64, dst, src));
	}

	void Assembler::mulsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Mulsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Mulss_xmm_xmmm32, dst, src));
	}

	void Assembler::mulss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Mulss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Mulx_r32_r32_rm32, dst, src1, src2));
	}

	void Assembler::mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Mulx_r64_r64_rm64, dst, src1, src2));
	}

	void Assembler::mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Mulx_r32_r32_rm32, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Mulx_r64_r64_rm64, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::mwait()
	{
		AddInstruction(Instruction::Create(Code::Mwait));
	}

	void Assembler::mwaitx()
	{
		AddInstruction(Instruction::Create(Code::Mwaitx));
	}

	void Assembler::neg(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Neg_rm8, dst));
	}

	void Assembler::neg(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Neg_rm16, dst));
	}

	void Assembler::neg(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Neg_rm32, dst));
	}

	void Assembler::neg(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Neg_rm64, dst));
	}

	void Assembler::neg(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Neg_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Neg_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Neg_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Neg_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Neg, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::nop()
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Nopd : Code::Nopw;
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::nop(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Nop_rm16, dst));
	}

	void Assembler::nop(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Nop_rm32, dst));
	}

	void Assembler::nop(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Nop_rm64, dst));
	}

	void Assembler::nop(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Nop_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Nop_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Nop_rm16;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Nop, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::not_(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Not_rm8, dst));
	}

	void Assembler::not_(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Not_rm16, dst));
	}

	void Assembler::not_(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Not_rm32, dst));
	}

	void Assembler::not_(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Not_rm64, dst));
	}

	void Assembler::not_(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Not_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Not_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Not_rm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Not_rm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Not, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::or_ (AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm8_r8, dst, src));
	}

	void Assembler::or_ (AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::or_ (AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm16_r16, dst, src));
	}

	void Assembler::or_ (AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::or_ (AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm32_r32, dst, src));
	}

	void Assembler::or_ (AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::or_ (AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm64_r64, dst, src));
	}

	void Assembler::or_ (AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Or_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::or_ (AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Or_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::or_ (AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Or_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::or_ (AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Or_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::or_ (AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Or_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::or_ (AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Or_AL_imm8 : Code::Or_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::or_ (AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Or_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Or_rm16_imm8 : Code::Or_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::or_ (AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Or_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Or_rm32_imm8 : Code::Or_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::or_ (AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Or_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Or_rm64_imm8 : Code::Or_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::or_ (AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Or_rm64_imm8 : Code::Or_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Or_rm32_imm8 : Code::Or_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Or_rm16_imm8 : Code::Or_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Or_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Or, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::or_ (AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Or_AL_imm8 : Code::Or_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::or_ (AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Or_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Or_rm16_imm8 : Code::Or_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::or_ (AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Or_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Or_rm32_imm8 : Code::Or_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::or_ (AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Or_rm32_imm8 : Code::Or_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Or_rm16_imm8 : Code::Or_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Or_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Or, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::orpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Orpd_xmm_xmmm128, dst, src));
	}

	void Assembler::orpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Orpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::orps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Orps_xmm_xmmm128, dst, src));
	}

	void Assembler::orps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Orps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::out(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Out_DX_AL, dst, src));
	}

	void Assembler::out(std::int8_t imm, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Out_imm8_AL, imm, src));
	}

	void Assembler::out(std::uint8_t imm, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Out_imm8_AL, static_cast<std::uint32_t>(imm), src));
	}

	void Assembler::out(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Out_DX_AX, dst, src));
	}

	void Assembler::out(std::int8_t imm, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Out_imm8_AX, imm, src));
	}

	void Assembler::out(std::uint8_t imm, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Out_imm8_AX, static_cast<std::uint32_t>(imm), src));
	}

	void Assembler::out(AssemblerRegister16 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Out_DX_EAX, dst, src));
	}

	void Assembler::out(std::int8_t imm, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Out_imm8_EAX, imm, src));
	}

	void Assembler::out(std::uint8_t imm, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Out_imm8_EAX, static_cast<std::uint32_t>(imm), src));
	}

	void Assembler::outsb()
	{
		AddInstruction(Instruction::CreateOutsb(GetBitness()));
	}

	void Assembler::outsd()
	{
		AddInstruction(Instruction::CreateOutsd(GetBitness()));
	}

	void Assembler::outsw()
	{
		AddInstruction(Instruction::CreateOutsw(GetBitness()));
	}

	void Assembler::pabsb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pabsb_mm_mmm64, dst, src));
	}

	void Assembler::pabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pabsb_xmm_xmmm128, dst, src));
	}

	void Assembler::pabsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pabsb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pabsb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pabsd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pabsd_mm_mmm64, dst, src));
	}

	void Assembler::pabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pabsd_xmm_xmmm128, dst, src));
	}

	void Assembler::pabsd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pabsd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pabsd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pabsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pabsw_mm_mmm64, dst, src));
	}

	void Assembler::pabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pabsw_xmm_xmmm128, dst, src));
	}

	void Assembler::pabsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pabsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pabsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packssdw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Packssdw_mm_mmm64, dst, src));
	}

	void Assembler::packssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Packssdw_xmm_xmmm128, dst, src));
	}

	void Assembler::packssdw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packssdw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packssdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packssdw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packsswb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Packsswb_mm_mmm64, dst, src));
	}

	void Assembler::packsswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Packsswb_xmm_xmmm128, dst, src));
	}

	void Assembler::packsswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packsswb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packsswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packsswb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Packusdw_xmm_xmmm128, dst, src));
	}

	void Assembler::packusdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packusdw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packuswb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Packuswb_mm_mmm64, dst, src));
	}

	void Assembler::packuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Packuswb_xmm_xmmm128, dst, src));
	}

	void Assembler::packuswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packuswb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::packuswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Packuswb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddb_mm_mmm64, dst, src));
	}

	void Assembler::paddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddb_xmm_xmmm128, dst, src));
	}

	void Assembler::paddb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddd_mm_mmm64, dst, src));
	}

	void Assembler::paddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddd_xmm_xmmm128, dst, src));
	}

	void Assembler::paddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddq_mm_mmm64, dst, src));
	}

	void Assembler::paddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddq_xmm_xmmm128, dst, src));
	}

	void Assembler::paddq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddsb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddsb_mm_mmm64, dst, src));
	}

	void Assembler::paddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddsb_xmm_xmmm128, dst, src));
	}

	void Assembler::paddsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddsb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddsb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddsiw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddsiw_mm_mmm64, dst, src));
	}

	void Assembler::paddsiw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddsiw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddsw_mm_mmm64, dst, src));
	}

	void Assembler::paddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddsw_xmm_xmmm128, dst, src));
	}

	void Assembler::paddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddusb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddusb_mm_mmm64, dst, src));
	}

	void Assembler::paddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddusb_xmm_xmmm128, dst, src));
	}

	void Assembler::paddusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddusb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddusb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddusw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddusw_mm_mmm64, dst, src));
	}

	void Assembler::paddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddusw_xmm_xmmm128, dst, src));
	}

	void Assembler::paddusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddusw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddusw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddw_mm_mmm64, dst, src));
	}

	void Assembler::paddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Paddw_xmm_xmmm128, dst, src));
	}

	void Assembler::paddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::paddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paddw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_mm_mmm64_imm8, dst, src1, imm));
	}

	void Assembler::palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_mm_mmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_mm_mmm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_mm_mmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Palignr_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pand(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pand_mm_mmm64, dst, src));
	}

	void Assembler::pand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pand_xmm_xmmm128, dst, src));
	}

	void Assembler::pand(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pand_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pand(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pand_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pandn(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pandn_mm_mmm64, dst, src));
	}

	void Assembler::pandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pandn_xmm_xmmm128, dst, src));
	}

	void Assembler::pandn(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pandn_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pandn(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pandn_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pause()
	{
		AddInstruction(Instruction::Create(Code::Pause));
	}

	void Assembler::paveb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Paveb_mm_mmm64, dst, src));
	}

	void Assembler::paveb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Paveb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pavgb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pavgb_mm_mmm64, dst, src));
	}

	void Assembler::pavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pavgb_xmm_xmmm128, dst, src));
	}

	void Assembler::pavgb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pavgb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pavgb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pavgb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pavgusb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pavgusb_mm_mmm64, dst, src));
	}

	void Assembler::pavgusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pavgusb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pavgw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pavgw_mm_mmm64, dst, src));
	}

	void Assembler::pavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pavgw_xmm_xmmm128, dst, src));
	}

	void Assembler::pavgw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pavgw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pavgw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pavgw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pblendvb_xmm_xmmm128, dst, src));
	}

	void Assembler::pblendvb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pblendvb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pblendw_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pblendw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pblendw_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pblendw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		pclmulqdq(dst, src, (std::uint8_t)17);
	}

	void Assembler::pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		pclmulqdq(dst, src, (std::uint8_t)17);
	}

	void Assembler::pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		pclmulqdq(dst, src, (std::uint8_t)1);
	}

	void Assembler::pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		pclmulqdq(dst, src, (std::uint8_t)1);
	}

	void Assembler::pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		pclmulqdq(dst, src, (std::uint8_t)16);
	}

	void Assembler::pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		pclmulqdq(dst, src, (std::uint8_t)16);
	}

	void Assembler::pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		pclmulqdq(dst, src, (std::uint8_t)0);
	}

	void Assembler::pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		pclmulqdq(dst, src, (std::uint8_t)0);
	}

	void Assembler::pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pclmulqdq_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pclmulqdq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pclmulqdq_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pclmulqdq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpeqb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqb_mm_mmm64, dst, src));
	}

	void Assembler::pcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqb_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpeqb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpeqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpeqd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqd_mm_mmm64, dst, src));
	}

	void Assembler::pcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqd_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpeqd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpeqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqq_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpeqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpeqw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqw_mm_mmm64, dst, src));
	}

	void Assembler::pcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqw_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpeqw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpeqw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpeqw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri64_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri64_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestri64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm64_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm64_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpestrm64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpgtb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtb_mm_mmm64, dst, src));
	}

	void Assembler::pcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtb_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpgtb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpgtb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpgtd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtd_mm_mmm64, dst, src));
	}

	void Assembler::pcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtd_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpgtd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpgtd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtq_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpgtq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpgtw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtw_mm_mmm64, dst, src));
	}

	void Assembler::pcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtw_xmm_xmmm128, dst, src));
	}

	void Assembler::pcmpgtw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpgtw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pcmpgtw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistri_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistri_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistrm_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistrm_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pcmpistrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pcommit()
	{
		AddInstruction(Instruction::Create(Code::Pcommit));
	}

	void Assembler::pconfig()
	{
		AddInstruction(Instruction::Create(Code::Pconfig));
	}

	void Assembler::pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pdep_r32_r32_rm32, dst, src1, src2));
	}

	void Assembler::pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pdep_r64_r64_rm64, dst, src1, src2));
	}

	void Assembler::pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pdep_r32_r32_rm32, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pdep_r64_r64_rm64, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pdistib(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pdistib_mm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pext_r32_r32_rm32, dst, src1, src2));
	}

	void Assembler::pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pext_r64_r64_rm64, dst, src1, src2));
	}

	void Assembler::pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pext_r32_r32_rm32, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Pext_r64_r64_rm64, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrb_r32m8_xmm_imm8, dst, src1, imm));
	}

	void Assembler::pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrb_r64m8_xmm_imm8, dst, src1, imm));
	}

	void Assembler::pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrb_r32m8_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrb_r32m8_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrb_r64m8_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrb_r32m8_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrd_rm32_xmm_imm8, dst, src1, imm));
	}

	void Assembler::pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrd_rm32_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrd_rm32_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrd_rm32_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrq_rm64_xmm_imm8, dst, src1, imm));
	}

	void Assembler::pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrq_rm64_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrq_rm64_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrq_rm64_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r32_mm_imm8, dst, src1, imm));
	}

	void Assembler::pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r64_mm_imm8, dst, src1, imm));
	}

	void Assembler::pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r32_xmm_imm8, dst, src1, imm));
	}

	void Assembler::pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r64_xmm_imm8, dst, src1, imm));
	}

	void Assembler::pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r32m16_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r32_mm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r64_mm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r32_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r64_xmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pextrw_r32m16_xmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pf2id(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pf2id_mm_mmm64, dst, src));
	}

	void Assembler::pf2id(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pf2id_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pf2iw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pf2iw_mm_mmm64, dst, src));
	}

	void Assembler::pf2iw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pf2iw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfacc(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfacc_mm_mmm64, dst, src));
	}

	void Assembler::pfacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfacc_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfadd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfadd_mm_mmm64, dst, src));
	}

	void Assembler::pfadd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfadd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfcmpeq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfcmpeq_mm_mmm64, dst, src));
	}

	void Assembler::pfcmpeq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfcmpeq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfcmpge(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfcmpge_mm_mmm64, dst, src));
	}

	void Assembler::pfcmpge(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfcmpge_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfcmpgt(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfcmpgt_mm_mmm64, dst, src));
	}

	void Assembler::pfcmpgt(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfcmpgt_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfmax(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfmax_mm_mmm64, dst, src));
	}

	void Assembler::pfmax(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfmax_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfmin(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfmin_mm_mmm64, dst, src));
	}

	void Assembler::pfmin(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfmin_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfmul(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfmul_mm_mmm64, dst, src));
	}

	void Assembler::pfmul(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfmul_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfnacc_mm_mmm64, dst, src));
	}

	void Assembler::pfnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfnacc_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfpnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfpnacc_mm_mmm64, dst, src));
	}

	void Assembler::pfpnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfpnacc_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrcp(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcp_mm_mmm64, dst, src));
	}

	void Assembler::pfrcp(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcp_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrcpit1(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcpit1_mm_mmm64, dst, src));
	}

	void Assembler::pfrcpit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcpit1_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrcpit2(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcpit2_mm_mmm64, dst, src));
	}

	void Assembler::pfrcpit2(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcpit2_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrcpv(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcpv_mm_mmm64, dst, src));
	}

	void Assembler::pfrcpv(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrcpv_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrsqit1(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrsqit1_mm_mmm64, dst, src));
	}

	void Assembler::pfrsqit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrsqit1_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrsqrt(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrsqrt_mm_mmm64, dst, src));
	}

	void Assembler::pfrsqrt(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrsqrt_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfrsqrtv(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrsqrtv_mm_mmm64, dst, src));
	}

	void Assembler::pfrsqrtv(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfrsqrtv_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfsub(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfsub_mm_mmm64, dst, src));
	}

	void Assembler::pfsub(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfsub_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pfsubr(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfsubr_mm_mmm64, dst, src));
	}

	void Assembler::pfsubr(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pfsubr_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phaddd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Phaddd_mm_mmm64, dst, src));
	}

	void Assembler::phaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phaddd_xmm_xmmm128, dst, src));
	}

	void Assembler::phaddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phaddd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phaddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phaddd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phaddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Phaddsw_mm_mmm64, dst, src));
	}

	void Assembler::phaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phaddsw_xmm_xmmm128, dst, src));
	}

	void Assembler::phaddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phaddsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phaddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phaddsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phaddw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Phaddw_mm_mmm64, dst, src));
	}

	void Assembler::phaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phaddw_xmm_xmmm128, dst, src));
	}

	void Assembler::phaddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phaddw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phaddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phaddw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phminposuw_xmm_xmmm128, dst, src));
	}

	void Assembler::phminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phminposuw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phsubd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Phsubd_mm_mmm64, dst, src));
	}

	void Assembler::phsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phsubd_xmm_xmmm128, dst, src));
	}

	void Assembler::phsubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phsubd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phsubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phsubd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phsubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Phsubsw_mm_mmm64, dst, src));
	}

	void Assembler::phsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phsubsw_xmm_xmmm128, dst, src));
	}

	void Assembler::phsubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phsubsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phsubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phsubsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phsubw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Phsubw_mm_mmm64, dst, src));
	}

	void Assembler::phsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Phsubw_xmm_xmmm128, dst, src));
	}

	void Assembler::phsubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phsubw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::phsubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Phsubw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pi2fd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pi2fd_mm_mmm64, dst, src));
	}

	void Assembler::pi2fd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pi2fd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pi2fw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pi2fw_mm_mmm64, dst, src));
	}

	void Assembler::pi2fw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pi2fw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrb_xmm_r32m8_imm8, dst, src1, imm));
	}

	void Assembler::pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrb_xmm_r64m8_imm8, dst, src1, imm));
	}

	void Assembler::pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrb_xmm_r32m8_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrb_xmm_r32m8_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrb_xmm_r64m8_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrb_xmm_r32m8_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrd_xmm_rm32_imm8, dst, src1, imm));
	}

	void Assembler::pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrd_xmm_rm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrd_xmm_rm32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrd_xmm_rm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrq_xmm_rm64_imm8, dst, src1, imm));
	}

	void Assembler::pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrq_xmm_rm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrq_xmm_rm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrq_xmm_rm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_mm_r32m16_imm8, dst, src1, imm));
	}

	void Assembler::pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_xmm_r32m16_imm8, dst, src1, imm));
	}

	void Assembler::pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_mm_r64m16_imm8, dst, src1, imm));
	}

	void Assembler::pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_xmm_r64m16_imm8, dst, src1, imm));
	}

	void Assembler::pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_mm_r32m16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_xmm_r32m16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_mm_r32m16_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_xmm_r32m16_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_mm_r64m16_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_xmm_r64m16_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_mm_r32m16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pinsrw_xmm_r32m16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pmachriw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmachriw_mm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaddubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddubsw_mm_mmm64, dst, src));
	}

	void Assembler::pmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddubsw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaddubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddubsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaddubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddubsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaddwd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddwd_mm_mmm64, dst, src));
	}

	void Assembler::pmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddwd_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaddwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddwd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaddwd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmagw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmagw_mm_mmm64, dst, src));
	}

	void Assembler::pmagw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmagw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsb_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaxsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsd_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsw_mm_mmm64, dst, src));
	}

	void Assembler::pmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaxsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxub(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxub_mm_mmm64, dst, src));
	}

	void Assembler::pmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxub_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaxub(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxub_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxub_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxud_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaxud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxud_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxuw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmaxuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmaxuw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminsb_xmm_xmmm128, dst, src));
	}

	void Assembler::pminsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminsb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminsd_xmm_xmmm128, dst, src));
	}

	void Assembler::pminsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminsd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminsw_mm_mmm64, dst, src));
	}

	void Assembler::pminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminsw_xmm_xmmm128, dst, src));
	}

	void Assembler::pminsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminub(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminub_mm_mmm64, dst, src));
	}

	void Assembler::pminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminub_xmm_xmmm128, dst, src));
	}

	void Assembler::pminub(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminub_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminub_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminud_xmm_xmmm128, dst, src));
	}

	void Assembler::pminud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminud_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pminuw_xmm_xmmm128, dst, src));
	}

	void Assembler::pminuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pminuw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovmskb(AssemblerRegister32 dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovmskb_r32_mm, dst, src));
	}

	void Assembler::pmovmskb(AssemblerRegister64 dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovmskb_r64_mm, dst, src));
	}

	void Assembler::pmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovmskb_r32_xmm, dst, src));
	}

	void Assembler::pmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovmskb_r64_xmm, dst, src));
	}

	void Assembler::pmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxbd_xmm_xmmm32, dst, src));
	}

	void Assembler::pmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxbd_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxbq_xmm_xmmm16, dst, src));
	}

	void Assembler::pmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxbq_xmm_xmmm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxbw_xmm_xmmm64, dst, src));
	}

	void Assembler::pmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxbw_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxdq_xmm_xmmm64, dst, src));
	}

	void Assembler::pmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxdq_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxwd_xmm_xmmm64, dst, src));
	}

	void Assembler::pmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxwd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxwq_xmm_xmmm32, dst, src));
	}

	void Assembler::pmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovsxwq_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxbd_xmm_xmmm32, dst, src));
	}

	void Assembler::pmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxbd_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxbq_xmm_xmmm16, dst, src));
	}

	void Assembler::pmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxbq_xmm_xmmm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxbw_xmm_xmmm64, dst, src));
	}

	void Assembler::pmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxbw_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxdq_xmm_xmmm64, dst, src));
	}

	void Assembler::pmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxdq_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxwd_xmm_xmmm64, dst, src));
	}

	void Assembler::pmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxwd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxwq_xmm_xmmm32, dst, src));
	}

	void Assembler::pmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmovzxwq_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmuldq_xmm_xmmm128, dst, src));
	}

	void Assembler::pmuldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmuldq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhriw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhriw_mm_mmm64, dst, src));
	}

	void Assembler::pmulhriw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhriw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhrsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhrsw_mm_mmm64, dst, src));
	}

	void Assembler::pmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhrsw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmulhrsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhrsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhrsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhrsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhrw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pmulhrw_mm_mmm64, dst, src));
	}

	void Assembler::pmulhrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pmulhrw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhrw_cyrix(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhrw_mm_mmm64, dst, src));
	}

	void Assembler::pmulhrw_cyrix(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhrw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhuw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhuw_mm_mmm64, dst, src));
	}

	void Assembler::pmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhuw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmulhuw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhuw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhuw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhw_mm_mmm64, dst, src));
	}

	void Assembler::pmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmulhw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulhw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmulld_xmm_xmmm128, dst, src));
	}

	void Assembler::pmulld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmulld_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmullw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmullw_mm_mmm64, dst, src));
	}

	void Assembler::pmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmullw_xmm_xmmm128, dst, src));
	}

	void Assembler::pmullw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmullw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmullw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmullw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmuludq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmuludq_mm_mmm64, dst, src));
	}

	void Assembler::pmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pmuludq_xmm_xmmm128, dst, src));
	}

	void Assembler::pmuludq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmuludq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmuludq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmuludq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmvgezb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmvgezb_mm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmvlzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmvlzb_mm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmvnzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmvnzb_mm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pmvzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pmvzb_mm_m64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pop(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Pop_r16, dst));
	}

	void Assembler::pop(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Pop_r32, dst));
	}

	void Assembler::pop(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Pop_r64, dst));
	}

	void Assembler::pop(AssemblerRegisterSegment dst)
	{
		Code code;
		if (dst == Register::FS)
		{
			if (GetBitness() == 64)
			{
				code = Code::Popq_FS;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Popd_FS : Code::Popw_FS;
			}
		}
		else if (dst == Register::GS)
		{
			if (GetBitness() == 64)
			{
				code = Code::Popq_GS;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Popd_GS : Code::Popw_GS;
			}
		}
		else if (dst == Register::ES)
		{
			code = GetBitness() >= 32 ? Code::Popd_ES : Code::Popw_ES;
		}
		else if (dst == Register::SS)
		{
			code = GetBitness() >= 32 ? Code::Popd_SS : Code::Popw_SS;
		}
		else if (dst == Register::DS)
		{
			code = GetBitness() >= 32 ? Code::Popd_DS : Code::Popw_DS;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Pop, dst);
		}
		AddInstruction(Instruction::Create(code, dst));
	}

	void Assembler::pop(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Pop_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Pop_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Pop_rm16;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Pop, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::popa()
	{
		AddInstruction(Instruction::Create(Code::Popaw));
	}

	void Assembler::popad()
	{
		AddInstruction(Instruction::Create(Code::Popad));
	}

	void Assembler::popcnt(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Popcnt_r16_rm16, dst, src));
	}

	void Assembler::popcnt(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Popcnt_r32_rm32, dst, src));
	}

	void Assembler::popcnt(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Popcnt_r64_rm64, dst, src));
	}

	void Assembler::popcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Popcnt_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::popcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Popcnt_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::popcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Popcnt_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::popf()
	{
		AddInstruction(Instruction::Create(Code::Popfw));
	}

	void Assembler::popfd()
	{
		AddInstruction(Instruction::Create(Code::Popfd));
	}

	void Assembler::popfq()
	{
		AddInstruction(Instruction::Create(Code::Popfq));
	}

	void Assembler::por(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Por_mm_mmm64, dst, src));
	}

	void Assembler::por(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Por_xmm_xmmm128, dst, src));
	}

	void Assembler::por(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Por_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::por(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Por_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetch(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetch_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetchnta(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetchnta_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetcht0(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetcht0_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetcht1(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetcht1_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetcht2(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetcht2_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetchw(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetchw_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::prefetchwt1(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Prefetchwt1_m8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psadbw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psadbw_mm_mmm64, dst, src));
	}

	void Assembler::psadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psadbw_xmm_xmmm128, dst, src));
	}

	void Assembler::psadbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psadbw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psadbw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pshufb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pshufb_mm_mmm64, dst, src));
	}

	void Assembler::pshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pshufb_xmm_xmmm128, dst, src));
	}

	void Assembler::pshufb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pshufb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pshufb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pshufb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufhw_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufhw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufhw_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufhw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshuflw_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshuflw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshuflw_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshuflw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufw_mm_mmm64_imm8, dst, src1, imm));
	}

	void Assembler::pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufw_mm_mmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufw_mm_mmm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pshufw_mm_mmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psignb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psignb_mm_mmm64, dst, src));
	}

	void Assembler::psignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psignb_xmm_xmmm128, dst, src));
	}

	void Assembler::psignb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psignb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psignb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psignb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psignd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psignd_mm_mmm64, dst, src));
	}

	void Assembler::psignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psignd_xmm_xmmm128, dst, src));
	}

	void Assembler::psignd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psignd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psignd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psignd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psignw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psignw_mm_mmm64, dst, src));
	}

	void Assembler::psignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psignw_xmm_xmmm128, dst, src));
	}

	void Assembler::psignw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psignw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psignw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psignw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pslld(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pslld_mm_mmm64, dst, src));
	}

	void Assembler::pslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pslld_xmm_xmmm128, dst, src));
	}

	void Assembler::pslld(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pslld_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pslld_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pslld(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pslld_mm_imm8, dst, imm));
	}

	void Assembler::pslld(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pslld_xmm_imm8, dst, imm));
	}

	void Assembler::pslld(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pslld_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pslld(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pslld_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::pslldq(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pslldq_xmm_imm8, dst, imm));
	}

	void Assembler::pslldq(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Pslldq_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psllq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psllq_mm_mmm64, dst, src));
	}

	void Assembler::psllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psllq_xmm_xmmm128, dst, src));
	}

	void Assembler::psllq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psllq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psllq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psllq(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllq_mm_imm8, dst, imm));
	}

	void Assembler::psllq(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllq_xmm_imm8, dst, imm));
	}

	void Assembler::psllq(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllq_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psllq(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllq_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psllw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psllw_mm_mmm64, dst, src));
	}

	void Assembler::psllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psllw_xmm_xmmm128, dst, src));
	}

	void Assembler::psllw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psllw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psllw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psllw(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllw_mm_imm8, dst, imm));
	}

	void Assembler::psllw(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllw_xmm_imm8, dst, imm));
	}

	void Assembler::psllw(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllw_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psllw(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psllw_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psmash()
	{
		AddInstruction(Instruction::Create(Code::Psmash));
	}

	void Assembler::psrad(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrad_mm_mmm64, dst, src));
	}

	void Assembler::psrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrad_xmm_xmmm128, dst, src));
	}

	void Assembler::psrad(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrad_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrad_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrad(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrad_mm_imm8, dst, imm));
	}

	void Assembler::psrad(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrad_xmm_imm8, dst, imm));
	}

	void Assembler::psrad(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrad_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrad(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrad_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psraw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psraw_mm_mmm64, dst, src));
	}

	void Assembler::psraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psraw_xmm_xmmm128, dst, src));
	}

	void Assembler::psraw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psraw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psraw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psraw(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psraw_mm_imm8, dst, imm));
	}

	void Assembler::psraw(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psraw_xmm_imm8, dst, imm));
	}

	void Assembler::psraw(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psraw_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psraw(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psraw_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrld(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrld_mm_mmm64, dst, src));
	}

	void Assembler::psrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrld_xmm_xmmm128, dst, src));
	}

	void Assembler::psrld(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrld_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrld_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrld(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrld_mm_imm8, dst, imm));
	}

	void Assembler::psrld(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrld_xmm_imm8, dst, imm));
	}

	void Assembler::psrld(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrld_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrld(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrld_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrldq(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrldq_xmm_imm8, dst, imm));
	}

	void Assembler::psrldq(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrldq_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrlq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_mm_mmm64, dst, src));
	}

	void Assembler::psrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_xmm_xmmm128, dst, src));
	}

	void Assembler::psrlq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrlq(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_mm_imm8, dst, imm));
	}

	void Assembler::psrlq(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_xmm_imm8, dst, imm));
	}

	void Assembler::psrlq(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrlq(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlq_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrlw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_mm_mmm64, dst, src));
	}

	void Assembler::psrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_xmm_xmmm128, dst, src));
	}

	void Assembler::psrlw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psrlw(AssemblerRegisterMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_mm_imm8, dst, imm));
	}

	void Assembler::psrlw(AssemblerRegisterXMM dst, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_xmm_imm8, dst, imm));
	}

	void Assembler::psrlw(AssemblerRegisterMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_mm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psrlw(AssemblerRegisterXMM dst, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Psrlw_xmm_imm8, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::psubb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubb_mm_mmm64, dst, src));
	}

	void Assembler::psubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubb_xmm_xmmm128, dst, src));
	}

	void Assembler::psubb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubd_mm_mmm64, dst, src));
	}

	void Assembler::psubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubd_xmm_xmmm128, dst, src));
	}

	void Assembler::psubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubq_mm_mmm64, dst, src));
	}

	void Assembler::psubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubq_xmm_xmmm128, dst, src));
	}

	void Assembler::psubq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubsb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubsb_mm_mmm64, dst, src));
	}

	void Assembler::psubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubsb_xmm_xmmm128, dst, src));
	}

	void Assembler::psubsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubsb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubsb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubsiw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubsiw_mm_mmm64, dst, src));
	}

	void Assembler::psubsiw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubsiw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubsw_mm_mmm64, dst, src));
	}

	void Assembler::psubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubsw_xmm_xmmm128, dst, src));
	}

	void Assembler::psubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubsw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubsw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubusb(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubusb_mm_mmm64, dst, src));
	}

	void Assembler::psubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubusb_xmm_xmmm128, dst, src));
	}

	void Assembler::psubusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubusb_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubusb_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubusw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubusw_mm_mmm64, dst, src));
	}

	void Assembler::psubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubusw_xmm_xmmm128, dst, src));
	}

	void Assembler::psubusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubusw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubusw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubw_mm_mmm64, dst, src));
	}

	void Assembler::psubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Psubw_xmm_xmmm128, dst, src));
	}

	void Assembler::psubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::psubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Psubw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pswapd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pswapd_mm_mmm64, dst, src));
	}

	void Assembler::pswapd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::D3NOW_Pswapd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Ptest_xmm_xmmm128, dst, src));
	}

	void Assembler::ptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ptest_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ptwrite(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Ptwrite_rm32, dst));
	}

	void Assembler::ptwrite(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Ptwrite_rm64, dst));
	}

	void Assembler::ptwrite(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Ptwrite_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Ptwrite_rm32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Ptwrite, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhbw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhbw_mm_mmm64, dst, src));
	}

	void Assembler::punpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhbw_xmm_xmmm128, dst, src));
	}

	void Assembler::punpckhbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhbw_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhbw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhdq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhdq_mm_mmm64, dst, src));
	}

	void Assembler::punpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhdq_xmm_xmmm128, dst, src));
	}

	void Assembler::punpckhdq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhdq_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhdq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhqdq_xmm_xmmm128, dst, src));
	}

	void Assembler::punpckhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhqdq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhwd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhwd_mm_mmm64, dst, src));
	}

	void Assembler::punpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhwd_xmm_xmmm128, dst, src));
	}

	void Assembler::punpckhwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhwd_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckhwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckhwd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpcklbw(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklbw_mm_mmm32, dst, src));
	}

	void Assembler::punpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklbw_xmm_xmmm128, dst, src));
	}

	void Assembler::punpcklbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklbw_mm_mmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpcklbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklbw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckldq(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckldq_mm_mmm32, dst, src));
	}

	void Assembler::punpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpckldq_xmm_xmmm128, dst, src));
	}

	void Assembler::punpckldq(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckldq_mm_mmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpckldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpckldq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklqdq_xmm_xmmm128, dst, src));
	}

	void Assembler::punpcklqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklqdq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpcklwd(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklwd_mm_mmm32, dst, src));
	}

	void Assembler::punpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklwd_xmm_xmmm128, dst, src));
	}

	void Assembler::punpcklwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklwd_mm_mmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::punpcklwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Punpcklwd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::push(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Push_r16, dst));
	}

	void Assembler::push(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Push_r32, dst));
	}

	void Assembler::push(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Push_r64, dst));
	}

	void Assembler::push(AssemblerRegisterSegment dst)
	{
		Code code;
		if (dst == Register::FS)
		{
			if (GetBitness() == 64)
			{
				code = Code::Pushq_FS;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Pushd_FS : Code::Pushw_FS;
			}
		}
		else if (dst == Register::GS)
		{
			if (GetBitness() == 64)
			{
				code = Code::Pushq_GS;
			}
			else
			{
				code = GetBitness() >= 32 ? Code::Pushd_GS : Code::Pushw_GS;
			}
		}
		else if (dst == Register::ES)
		{
			code = GetBitness() >= 32 ? Code::Pushd_ES : Code::Pushw_ES;
		}
		else if (dst == Register::CS)
		{
			code = GetBitness() >= 32 ? Code::Pushd_CS : Code::Pushw_CS;
		}
		else if (dst == Register::SS)
		{
			code = GetBitness() >= 32 ? Code::Pushd_SS : Code::Pushw_SS;
		}
		else if (dst == Register::DS)
		{
			code = GetBitness() >= 32 ? Code::Pushd_DS : Code::Pushw_DS;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Push, dst);
		}
		AddInstruction(Instruction::Create(code, dst));
	}

	void Assembler::push(AssemblerMemoryOperand dst)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Push_rm64;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Push_rm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Push_rm16;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Push, dst);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::push(std::int32_t imm)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Pushq_imm8 : Code::Pushq_imm32;
		}
		else if (GetBitness() >= 32)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Pushd_imm8 : Code::Pushd_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Pushw_imm8 : Code::Push_imm16;
		}
		AddInstruction(Instruction::Create(code, imm));
	}

	void Assembler::push(std::uint32_t imm)
	{
		Code code;
		if (GetBitness() >= 32)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Pushd_imm8 : Code::Pushd_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Pushw_imm8 : Code::Push_imm16;
		}
		AddInstruction(Instruction::Create(code, imm));
	}

	void Assembler::pusha()
	{
		AddInstruction(Instruction::Create(Code::Pushaw));
	}

	void Assembler::pushad()
	{
		AddInstruction(Instruction::Create(Code::Pushad));
	}

	void Assembler::pushf()
	{
		AddInstruction(Instruction::Create(Code::Pushfw));
	}

	void Assembler::pushfd()
	{
		AddInstruction(Instruction::Create(Code::Pushfd));
	}

	void Assembler::pushfq()
	{
		AddInstruction(Instruction::Create(Code::Pushfq));
	}

	void Assembler::pvalidate()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Pvalidateq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Pvalidated : Code::Pvalidatew;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::pxor(AssemblerRegisterMM dst, AssemblerRegisterMM src)
	{
		AddInstruction(Instruction::Create(Code::Pxor_mm_mmm64, dst, src));
	}

	void Assembler::pxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Pxor_xmm_xmmm128, dst, src));
	}

	void Assembler::pxor(AssemblerRegisterMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pxor_mm_mmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::pxor(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Pxor_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rcl(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcl_rm8_CL, dst, src));
	}

	void Assembler::rcl(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcl_rm16_CL, dst, src));
	}

	void Assembler::rcl(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcl_rm32_CL, dst, src));
	}

	void Assembler::rcl(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcl_rm64_CL, dst, src));
	}

	void Assembler::rcl(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rcl_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rcl_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rcl_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rcl_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rcl, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::rcl(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm8_1 : Code::Rcl_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcl(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm16_1 : Code::Rcl_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcl(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm32_1 : Code::Rcl_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcl(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm64_1 : Code::Rcl_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcl(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Rcl_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Rcl_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Rcl_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Rcl_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Rcl, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rcl_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rcl_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rcl_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rcl_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rcl, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::rcl(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm8_1 : Code::Rcl_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcl(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm16_1 : Code::Rcl_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcl(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm32_1 : Code::Rcl_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcl(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcl_rm64_1 : Code::Rcl_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcl(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Rcl_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Rcl_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Rcl_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Rcl_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Rcl, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rcl_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rcl_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rcl_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rcl_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rcl, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Rcpps_xmm_xmmm128, dst, src));
	}

	void Assembler::rcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Rcpps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Rcpss_xmm_xmmm32, dst, src));
	}

	void Assembler::rcpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Rcpss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rcr(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcr_rm8_CL, dst, src));
	}

	void Assembler::rcr(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcr_rm16_CL, dst, src));
	}

	void Assembler::rcr(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcr_rm32_CL, dst, src));
	}

	void Assembler::rcr(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rcr_rm64_CL, dst, src));
	}

	void Assembler::rcr(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rcr_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rcr_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rcr_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rcr_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rcr, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::rcr(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm8_1 : Code::Rcr_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcr(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm16_1 : Code::Rcr_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcr(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm32_1 : Code::Rcr_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcr(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm64_1 : Code::Rcr_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rcr(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Rcr_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Rcr_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Rcr_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Rcr_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Rcr, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rcr_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rcr_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rcr_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rcr_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rcr, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::rcr(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm8_1 : Code::Rcr_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcr(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm16_1 : Code::Rcr_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcr(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm32_1 : Code::Rcr_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcr(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rcr_rm64_1 : Code::Rcr_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rcr(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Rcr_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Rcr_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Rcr_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Rcr_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Rcr, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rcr_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rcr_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rcr_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rcr_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rcr, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rdfsbase(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdfsbase_r32, dst));
	}

	void Assembler::rdfsbase(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdfsbase_r64, dst));
	}

	void Assembler::rdgsbase(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdgsbase_r32, dst));
	}

	void Assembler::rdgsbase(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdgsbase_r64, dst));
	}

	void Assembler::rdm()
	{
		AddInstruction(Instruction::Create(Code::Rdm));
	}

	void Assembler::rdmsr()
	{
		AddInstruction(Instruction::Create(Code::Rdmsr));
	}

	void Assembler::rdpid(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdpid_r32, dst));
	}

	void Assembler::rdpid(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdpid_r64, dst));
	}

	void Assembler::rdpkru()
	{
		AddInstruction(Instruction::Create(Code::Rdpkru));
	}

	void Assembler::rdpmc()
	{
		AddInstruction(Instruction::Create(Code::Rdpmc));
	}

	void Assembler::rdpru()
	{
		AddInstruction(Instruction::Create(Code::Rdpru));
	}

	void Assembler::rdrand(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdrand_r16, dst));
	}

	void Assembler::rdrand(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdrand_r32, dst));
	}

	void Assembler::rdrand(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdrand_r64, dst));
	}

	void Assembler::rdseed(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdseed_r16, dst));
	}

	void Assembler::rdseed(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdseed_r32, dst));
	}

	void Assembler::rdseed(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdseed_r64, dst));
	}

	void Assembler::rdshr(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdshr_rm32, dst));
	}

	void Assembler::rdshr(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Rdshr_rm32, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rdsspd(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdsspd_r32, dst));
	}

	void Assembler::rdsspq(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Rdsspq_r64, dst));
	}

	void Assembler::rdtsc()
	{
		AddInstruction(Instruction::Create(Code::Rdtsc));
	}

	void Assembler::rdtscp()
	{
		AddInstruction(Instruction::Create(Code::Rdtscp));
	}

	void Assembler::rdudbg()
	{
		AddInstruction(Instruction::Create(Code::Rdudbg));
	}

	void Assembler::reservednop_0f0d(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F0D, dst, src));
	}

	void Assembler::reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F0D, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f0d(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F0D, dst, src));
	}

	void Assembler::reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F0D, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f0d(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F0D, dst, src));
	}

	void Assembler::reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F0D, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f18(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F18, dst, src));
	}

	void Assembler::reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F18, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f18(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F18, dst, src));
	}

	void Assembler::reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F18, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f18(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F18, dst, src));
	}

	void Assembler::reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F18, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f19(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F19, dst, src));
	}

	void Assembler::reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F19, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f19(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F19, dst, src));
	}

	void Assembler::reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F19, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f19(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F19, dst, src));
	}

	void Assembler::reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F19, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1a(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1A, dst, src));
	}

	void Assembler::reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1A, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1a(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1A, dst, src));
	}

	void Assembler::reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1A, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1a(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1A, dst, src));
	}

	void Assembler::reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1A, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1b(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1B, dst, src));
	}

	void Assembler::reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1B, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1b(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1B, dst, src));
	}

	void Assembler::reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1B, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1b(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1B, dst, src));
	}

	void Assembler::reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1B, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1c(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1C, dst, src));
	}

	void Assembler::reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1C, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1c(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1C, dst, src));
	}

	void Assembler::reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1C, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1c(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1C, dst, src));
	}

	void Assembler::reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1C, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1d(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1D, dst, src));
	}

	void Assembler::reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1D, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1d(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1D, dst, src));
	}

	void Assembler::reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1D, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1d(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1D, dst, src));
	}

	void Assembler::reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1D, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1e(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1E, dst, src));
	}

	void Assembler::reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1E, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1e(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1E, dst, src));
	}

	void Assembler::reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1E, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1e(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1E, dst, src));
	}

	void Assembler::reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1E, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1f(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1F, dst, src));
	}

	void Assembler::reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm16_r16_0F1F, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1f(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1F, dst, src));
	}

	void Assembler::reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm32_r32_0F1F, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::reservednop_0f1f(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1F, dst, src));
	}

	void Assembler::reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Reservednop_rm64_r64_0F1F, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::ret()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Retnq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Retnd : Code::Retnw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::ret(std::int16_t imm)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Retnq_imm16;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Retnd_imm16 : Code::Retnw_imm16;
		}
		AddInstruction(Instruction::Create(code, imm));
	}

	void Assembler::ret(std::uint16_t imm)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Retnq_imm16;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Retnd_imm16 : Code::Retnw_imm16;
		}
		AddInstruction(Instruction::Create(code, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::retf()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Retfq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Retfd : Code::Retfw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::retf(std::int16_t imm)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Retfq_imm16;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Retfd_imm16 : Code::Retfw_imm16;
		}
		AddInstruction(Instruction::Create(code, imm));
	}

	void Assembler::retf(std::uint16_t imm)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Retfq_imm16;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Retfd_imm16 : Code::Retfw_imm16;
		}
		AddInstruction(Instruction::Create(code, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rmpadjust()
	{
		AddInstruction(Instruction::Create(Code::Rmpadjust));
	}

	void Assembler::rmpupdate()
	{
		AddInstruction(Instruction::Create(Code::Rmpupdate));
	}

	void Assembler::rol(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rol_rm8_CL, dst, src));
	}

	void Assembler::rol(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rol_rm16_CL, dst, src));
	}

	void Assembler::rol(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rol_rm32_CL, dst, src));
	}

	void Assembler::rol(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Rol_rm64_CL, dst, src));
	}

	void Assembler::rol(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rol_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rol_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rol_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rol_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rol, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::rol(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm8_1 : Code::Rol_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rol(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm16_1 : Code::Rol_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rol(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm32_1 : Code::Rol_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rol(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm64_1 : Code::Rol_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::rol(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Rol_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Rol_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Rol_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Rol_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Rol, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rol_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rol_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rol_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rol_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rol, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::rol(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm8_1 : Code::Rol_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rol(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm16_1 : Code::Rol_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rol(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm32_1 : Code::Rol_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rol(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Rol_rm64_1 : Code::Rol_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rol(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Rol_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Rol_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Rol_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Rol_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Rol, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Rol_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Rol_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Rol_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Rol_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Rol, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::ror(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Ror_rm8_CL, dst, src));
	}

	void Assembler::ror(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Ror_rm16_CL, dst, src));
	}

	void Assembler::ror(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Ror_rm32_CL, dst, src));
	}

	void Assembler::ror(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Ror_rm64_CL, dst, src));
	}

	void Assembler::ror(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Ror_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Ror_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Ror_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Ror_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Ror, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::ror(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm8_1 : Code::Ror_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::ror(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm16_1 : Code::Ror_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::ror(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm32_1 : Code::Ror_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::ror(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm64_1 : Code::Ror_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::ror(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Ror_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Ror_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Ror_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Ror_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Ror, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Ror_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Ror_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Ror_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Ror_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Ror, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::ror(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm8_1 : Code::Ror_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::ror(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm16_1 : Code::Ror_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::ror(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm32_1 : Code::Ror_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::ror(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Ror_rm64_1 : Code::Ror_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::ror(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Ror_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Ror_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Ror_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Ror_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Ror, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Ror_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Ror_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Ror_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Ror_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Ror, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r32_rm32_imm8, dst, src1, imm));
	}

	void Assembler::rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r64_rm64_imm8, dst, src1, imm));
	}

	void Assembler::rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r32_rm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r64_rm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r32_rm32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r64_rm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r32_rm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Rorx_r64_rm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundpd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundpd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundps_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundps_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundsd_xmm_xmmm64_imm8, dst, src1, imm));
	}

	void Assembler::roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundsd_xmm_xmmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundsd_xmm_xmmm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundsd_xmm_xmmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundss_xmm_xmmm32_imm8, dst, src1, imm));
	}

	void Assembler::roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundss_xmm_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundss_xmm_xmmm32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Roundss_xmm_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::rsdc(AssemblerRegisterSegment dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Rsdc_Sreg_m80, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rsldt(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Rsldt_m80, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rsm()
	{
		AddInstruction(Instruction::Create(Code::Rsm));
	}

	void Assembler::rsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Rsqrtps_xmm_xmmm128, dst, src));
	}

	void Assembler::rsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Rsqrtps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Rsqrtss_xmm_xmmm32, dst, src));
	}

	void Assembler::rsqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Rsqrtss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rstorssp(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Rstorssp_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::rsts(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Rsts_m80, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sahf()
	{
		AddInstruction(Instruction::Create(Code::Sahf));
	}

	void Assembler::sal(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sal_rm8_CL, dst, src));
	}

	void Assembler::sal(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sal_rm16_CL, dst, src));
	}

	void Assembler::sal(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sal_rm32_CL, dst, src));
	}

	void Assembler::sal(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sal_rm64_CL, dst, src));
	}

	void Assembler::sal(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Sal_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Sal_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Sal_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sal_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sal, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sal(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm8_1 : Code::Sal_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sal(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm16_1 : Code::Sal_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sal(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm32_1 : Code::Sal_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sal(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm64_1 : Code::Sal_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sal(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Sal_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Sal_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Sal_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Sal_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Sal, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Sal_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Sal_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Sal_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sal_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sal, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::sal(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm8_1 : Code::Sal_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sal(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm16_1 : Code::Sal_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sal(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm32_1 : Code::Sal_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sal(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sal_rm64_1 : Code::Sal_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sal(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Sal_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Sal_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Sal_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Sal_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Sal, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Sal_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Sal_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Sal_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sal_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sal, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::salc()
	{
		AddInstruction(Instruction::Create(Code::Salc));
	}

	void Assembler::sar(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sar_rm8_CL, dst, src));
	}

	void Assembler::sar(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sar_rm16_CL, dst, src));
	}

	void Assembler::sar(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sar_rm32_CL, dst, src));
	}

	void Assembler::sar(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sar_rm64_CL, dst, src));
	}

	void Assembler::sar(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Sar_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Sar_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Sar_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sar_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sar, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sar(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm8_1 : Code::Sar_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sar(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm16_1 : Code::Sar_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sar(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm32_1 : Code::Sar_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sar(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm64_1 : Code::Sar_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sar(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Sar_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Sar_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Sar_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Sar_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Sar, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Sar_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Sar_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Sar_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sar_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sar, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::sar(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm8_1 : Code::Sar_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sar(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm16_1 : Code::Sar_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sar(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm32_1 : Code::Sar_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sar(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Sar_rm64_1 : Code::Sar_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sar(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Sar_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Sar_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Sar_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Sar_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Sar, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Sar_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Sar_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Sar_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sar_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sar, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sarx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Sarx_r32_rm32_r32, dst, src1, src2));
	}

	void Assembler::sarx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Sarx_r32_rm32_r32, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::sarx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Sarx_r64_rm64_r64, dst, src1, src2));
	}

	void Assembler::sarx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Sarx_r64_rm64_r64, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::saveprevssp()
	{
		AddInstruction(Instruction::Create(Code::Saveprevssp));
	}

	void Assembler::sbb(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm8_r8, dst, src));
	}

	void Assembler::sbb(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sbb(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm16_r16, dst, src));
	}

	void Assembler::sbb(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sbb(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm32_r32, dst, src));
	}

	void Assembler::sbb(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sbb(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm64_r64, dst, src));
	}

	void Assembler::sbb(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sbb(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sbb(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sbb(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sbb(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sbb_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sbb(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Sbb_AL_imm8 : Code::Sbb_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sbb(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Sbb_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sbb_rm16_imm8 : Code::Sbb_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sbb(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Sbb_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sbb_rm32_imm8 : Code::Sbb_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sbb(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Sbb_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sbb_rm64_imm8 : Code::Sbb_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sbb(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sbb_rm64_imm8 : Code::Sbb_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sbb_rm32_imm8 : Code::Sbb_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sbb_rm16_imm8 : Code::Sbb_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sbb_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sbb, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::sbb(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Sbb_AL_imm8 : Code::Sbb_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sbb(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Sbb_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Sbb_rm16_imm8 : Code::Sbb_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sbb(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Sbb_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Sbb_rm32_imm8 : Code::Sbb_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sbb(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Sbb_rm32_imm8 : Code::Sbb_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Sbb_rm16_imm8 : Code::Sbb_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sbb_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sbb, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::scasb()
	{
		AddInstruction(Instruction::CreateScasb(GetBitness()));
	}

	void Assembler::scasd()
	{
		AddInstruction(Instruction::CreateScasd(GetBitness()));
	}

	void Assembler::scasq()
	{
		AddInstruction(Instruction::CreateScasq(GetBitness()));
	}

	void Assembler::scasw()
	{
		AddInstruction(Instruction::CreateScasw(GetBitness()));
	}

	void Assembler::seamcall()
	{
		AddInstruction(Instruction::Create(Code::Seamcall));
	}

	void Assembler::seamops()
	{
		AddInstruction(Instruction::Create(Code::Seamops));
	}

	void Assembler::seamret()
	{
		AddInstruction(Instruction::Create(Code::Seamret));
	}

	void Assembler::senduipi(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Senduipi_r64, dst));
	}

	void Assembler::serialize()
	{
		AddInstruction(Instruction::Create(Code::Serialize));
	}

	void Assembler::seta(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Seta_rm8, dst));
	}

	void Assembler::seta(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Seta_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setae(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setae_rm8, dst));
	}

	void Assembler::setae(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setae_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setb(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setb_rm8, dst));
	}

	void Assembler::setb(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setb_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setbe(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setbe_rm8, dst));
	}

	void Assembler::setbe(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setbe_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setc(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setb_rm8, dst));
	}

	void Assembler::setc(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setb_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sete(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Sete_rm8, dst));
	}

	void Assembler::sete(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Sete_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setg(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setg_rm8, dst));
	}

	void Assembler::setg(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setg_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setge(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setge_rm8, dst));
	}

	void Assembler::setge(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setge_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setl(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setl_rm8, dst));
	}

	void Assembler::setl(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setl_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setle(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setle_rm8, dst));
	}

	void Assembler::setle(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setle_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setna(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setbe_rm8, dst));
	}

	void Assembler::setna(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setbe_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnae(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setb_rm8, dst));
	}

	void Assembler::setnae(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setb_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnb(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setae_rm8, dst));
	}

	void Assembler::setnb(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setae_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnbe(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Seta_rm8, dst));
	}

	void Assembler::setnbe(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Seta_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnc(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setae_rm8, dst));
	}

	void Assembler::setnc(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setae_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setne(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setne_rm8, dst));
	}

	void Assembler::setne(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setne_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setng(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setle_rm8, dst));
	}

	void Assembler::setng(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setle_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnge(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setl_rm8, dst));
	}

	void Assembler::setnge(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setl_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnl(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setge_rm8, dst));
	}

	void Assembler::setnl(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setge_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnle(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setg_rm8, dst));
	}

	void Assembler::setnle(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setg_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setno(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setno_rm8, dst));
	}

	void Assembler::setno(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setno_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnp(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setnp_rm8, dst));
	}

	void Assembler::setnp(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setnp_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setns(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setns_rm8, dst));
	}

	void Assembler::setns(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setns_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setnz(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setne_rm8, dst));
	}

	void Assembler::setnz(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setne_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::seto(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Seto_rm8, dst));
	}

	void Assembler::seto(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Seto_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setp(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setp_rm8, dst));
	}

	void Assembler::setp(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setp_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setpe(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setp_rm8, dst));
	}

	void Assembler::setpe(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setp_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setpo(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Setnp_rm8, dst));
	}

	void Assembler::setpo(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Setnp_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sets(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Sets_rm8, dst));
	}

	void Assembler::sets(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Sets_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::setssbsy()
	{
		AddInstruction(Instruction::Create(Code::Setssbsy));
	}

	void Assembler::setz(AssemblerRegister8 dst)
	{
		AddInstruction(Instruction::Create(Code::Sete_rm8, dst));
	}

	void Assembler::setz(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Sete_rm8, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sfence()
	{
		AddInstruction(Instruction::Create(Code::Sfence));
	}

	void Assembler::sgdt(AssemblerMemoryOperand dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Sgdt_m1664;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Sgdt_m1632 : Code::Sgdt_m1632_16;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sha1msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sha1msg1_xmm_xmmm128, dst, src));
	}

	void Assembler::sha1msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sha1msg1_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sha1msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sha1msg2_xmm_xmmm128, dst, src));
	}

	void Assembler::sha1msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sha1msg2_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sha1nexte(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sha1nexte_xmm_xmmm128, dst, src));
	}

	void Assembler::sha1nexte(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sha1nexte_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Sha1rnds4_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Sha1rnds4_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Sha1rnds4_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Sha1rnds4_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sha256msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sha256msg1_xmm_xmmm128, dst, src));
	}

	void Assembler::sha256msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sha256msg1_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sha256msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sha256msg2_xmm_xmmm128, dst, src));
	}

	void Assembler::sha256msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sha256msg2_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sha256rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sha256rnds2_xmm_xmmm128, dst, src));
	}

	void Assembler::sha256rnds2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sha256rnds2_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::shl(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shl_rm8_CL, dst, src));
	}

	void Assembler::shl(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shl_rm16_CL, dst, src));
	}

	void Assembler::shl(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shl_rm32_CL, dst, src));
	}

	void Assembler::shl(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shl_rm64_CL, dst, src));
	}

	void Assembler::shl(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Shl_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Shl_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Shl_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Shl_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Shl, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::shl(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm8_1 : Code::Shl_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shl(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm16_1 : Code::Shl_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shl(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm32_1 : Code::Shl_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shl(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm64_1 : Code::Shl_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shl(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Shl_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Shl_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Shl_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Shl_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Shl, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Shl_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Shl_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Shl_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Shl_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Shl, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::shl(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm8_1 : Code::Shl_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shl(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm16_1 : Code::Shl_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shl(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm32_1 : Code::Shl_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shl(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shl_rm64_1 : Code::Shl_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shl(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Shl_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Shl_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Shl_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Shl_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Shl, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Shl_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Shl_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Shl_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Shl_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Shl, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shld(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm16_r16_CL, dst, src1, src2));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm16_r16_CL, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::shld(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm32_r32_CL, dst, src1, src2));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm32_r32_CL, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::shld(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm64_r64_CL, dst, src1, src2));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm64_r64_CL, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::shld(AssemblerRegister16 dst, AssemblerRegister16 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm16_r16_imm8, dst, src1, imm));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm16_r16_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::shld(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm32_r32_imm8, dst, src1, imm));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm32_r32_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::shld(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm64_r64_imm8, dst, src1, imm));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm64_r64_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::shld(AssemblerRegister16 dst, AssemblerRegister16 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm16_r16_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm16_r16_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shld(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm32_r32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm32_r32_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shld(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm64_r64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shld_rm64_r64_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shlx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shlx_r32_rm32_r32, dst, src1, src2));
	}

	void Assembler::shlx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shlx_r32_rm32_r32, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::shlx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shlx_r64_rm64_r64, dst, src1, src2));
	}

	void Assembler::shlx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shlx_r64_rm64_r64, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::shr(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shr_rm8_CL, dst, src));
	}

	void Assembler::shr(AssemblerRegister16 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shr_rm16_CL, dst, src));
	}

	void Assembler::shr(AssemblerRegister32 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shr_rm32_CL, dst, src));
	}

	void Assembler::shr(AssemblerRegister64 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Shr_rm64_CL, dst, src));
	}

	void Assembler::shr(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Shr_rm64_CL;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Shr_rm32_CL;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Shr_rm16_CL;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Shr_rm8_CL;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Shr, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::shr(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm8_1 : Code::Shr_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shr(AssemblerRegister16 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm16_1 : Code::Shr_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shr(AssemblerRegister32 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm32_1 : Code::Shr_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shr(AssemblerRegister64 dst, std::int8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm64_1 : Code::Shr_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::shr(AssemblerMemoryOperand dst, std::int8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Shr_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Shr_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Shr_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Shr_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Shr, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Shr_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Shr_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Shr_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Shr_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Shr, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::shr(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm8_1 : Code::Shr_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shr(AssemblerRegister16 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm16_1 : Code::Shr_rm16_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shr(AssemblerRegister32 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm32_1 : Code::Shr_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shr(AssemblerRegister64 dst, std::uint8_t imm)
	{
		Code code;
		code = imm == (std::uint8_t)1 ? Code::Shr_rm64_1 : Code::Shr_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shr(AssemblerMemoryOperand dst, std::uint8_t imm)
	{
		Code code;
		if (imm == (std::uint8_t)1)
		{
			if (dst.Size == MemoryOperandSize::Qword)
			{
				code = Code::Shr_rm64_1;
			}
			else if (dst.Size == MemoryOperandSize::Dword)
			{
				code = Code::Shr_rm32_1;
			}
			else if (dst.Size == MemoryOperandSize::Word)
			{
				code = Code::Shr_rm16_1;
			}
			else if (dst.Size == MemoryOperandSize::Byte)
			{
				code = Code::Shr_rm8_1;
			}
			else
			{
				throw NoOpCodeFoundFor(Mnemonic::Shr, dst, imm);
			}
		}
		else if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Shr_rm64_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Shr_rm32_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Shr_rm16_imm8;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Shr_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Shr, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm16_r16_CL, dst, src1, src2));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm16_r16_CL, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm32_r32_CL, dst, src1, src2));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm32_r32_CL, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm64_r64_CL, dst, src1, src2));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm64_r64_CL, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm16_r16_imm8, dst, src1, imm));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm16_r16_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm32_r32_imm8, dst, src1, imm));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm32_r32_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm64_r64_imm8, dst, src1, imm));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm64_r64_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm16_r16_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm16_r16_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm32_r32_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm32_r32_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm64_r64_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shrd_rm64_r64_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shrx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shrx_r32_rm32_r32, dst, src1, src2));
	}

	void Assembler::shrx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shrx_r32_rm32_r32, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::shrx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shrx_r64_rm64_r64, dst, src1, src2));
	}

	void Assembler::shrx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Shrx_r64_rm64_r64, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufpd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufpd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufps_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufps_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Shufps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sidt(AssemblerMemoryOperand dst)
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Sidt_m1664;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Sidt_m1632 : Code::Sidt_m1632_16;
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::skinit()
	{
		AddInstruction(Instruction::Create(Code::Skinit));
	}

	void Assembler::sldt(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Sldt_rm16, dst));
	}

	void Assembler::sldt(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Sldt_r32m16, dst));
	}

	void Assembler::sldt(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Sldt_r64m16, dst));
	}

	void Assembler::sldt(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Sldt_r32m16 : Code::Sldt_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::slwpcb(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::XOP_Slwpcb_r32, dst));
	}

	void Assembler::slwpcb(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::XOP_Slwpcb_r64, dst));
	}

	void Assembler::smint()
	{
		AddInstruction(Instruction::Create(Code::Smint));
	}

	void Assembler::smint_0f7e()
	{
		AddInstruction(Instruction::Create(Code::Smint_0F7E));
	}

	void Assembler::smsw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Smsw_rm16, dst));
	}

	void Assembler::smsw(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Smsw_r32m16, dst));
	}

	void Assembler::smsw(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Smsw_r64m16, dst));
	}

	void Assembler::smsw(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Smsw_r32m16 : Code::Smsw_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtpd_xmm_xmmm128, dst, src));
	}

	void Assembler::sqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtps_xmm_xmmm128, dst, src));
	}

	void Assembler::sqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtsd_xmm_xmmm64, dst, src));
	}

	void Assembler::sqrtsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtss_xmm_xmmm32, dst, src));
	}

	void Assembler::sqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sqrtss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::stac()
	{
		AddInstruction(Instruction::Create(Code::Stac));
	}

	void Assembler::stc()
	{
		AddInstruction(Instruction::Create(Code::Stc));
	}

	void Assembler::std()
	{
		AddInstruction(Instruction::Create(Code::Std));
	}

	void Assembler::stgi()
	{
		AddInstruction(Instruction::Create(Code::Stgi));
	}

	void Assembler::sti()
	{
		AddInstruction(Instruction::Create(Code::Sti));
	}

	void Assembler::stmxcsr(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Stmxcsr_m32, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::stosb()
	{
		AddInstruction(Instruction::CreateStosb(GetBitness()));
	}

	void Assembler::stosd()
	{
		AddInstruction(Instruction::CreateStosd(GetBitness()));
	}

	void Assembler::stosq()
	{
		AddInstruction(Instruction::CreateStosq(GetBitness()));
	}

	void Assembler::stosw()
	{
		AddInstruction(Instruction::CreateStosw(GetBitness()));
	}

	void Assembler::str(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Str_rm16, dst));
	}

	void Assembler::str(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Str_r32m16, dst));
	}

	void Assembler::str(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Str_r64m16, dst));
	}

	void Assembler::str(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Str_r32m16 : Code::Str_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sttilecfg(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::VEX_Sttilecfg_m512, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::stui()
	{
		AddInstruction(Instruction::Create(Code::Stui));
	}

	void Assembler::sub(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm8_r8, dst, src));
	}

	void Assembler::sub(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sub(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm16_r16, dst, src));
	}

	void Assembler::sub(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sub(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm32_r32, dst, src));
	}

	void Assembler::sub(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sub(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm64_r64, dst, src));
	}

	void Assembler::sub(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Sub_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::sub(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sub_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sub(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sub_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sub(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sub_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sub(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Sub_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::sub(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Sub_AL_imm8 : Code::Sub_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sub(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Sub_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sub_rm16_imm8 : Code::Sub_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sub(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Sub_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sub_rm32_imm8 : Code::Sub_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sub(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Sub_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sub_rm64_imm8 : Code::Sub_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sub(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sub_rm64_imm8 : Code::Sub_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sub_rm32_imm8 : Code::Sub_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Sub_rm16_imm8 : Code::Sub_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sub_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sub, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::sub(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Sub_AL_imm8 : Code::Sub_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sub(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Sub_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Sub_rm16_imm8 : Code::Sub_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::sub(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Sub_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Sub_rm32_imm8 : Code::Sub_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::sub(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Sub_rm32_imm8 : Code::Sub_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Sub_rm16_imm8 : Code::Sub_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Sub_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Sub, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::subpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Subpd_xmm_xmmm128, dst, src));
	}

	void Assembler::subpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Subpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::subps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Subps_xmm_xmmm128, dst, src));
	}

	void Assembler::subps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Subps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::subsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Subsd_xmm_xmmm64, dst, src));
	}

	void Assembler::subsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Subsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::subss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Subss_xmm_xmmm32, dst, src));
	}

	void Assembler::subss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Subss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::svdc(AssemblerMemoryOperand dst, AssemblerRegisterSegment src)
	{
		AddInstruction(Instruction::Create(Code::Svdc_m80_Sreg, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::svldt(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Svldt_m80, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::svts(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Svts_m80, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::swapgs()
	{
		AddInstruction(Instruction::Create(Code::Swapgs));
	}

	void Assembler::syscall()
	{
		AddInstruction(Instruction::Create(Code::Syscall));
	}

	void Assembler::sysenter()
	{
		AddInstruction(Instruction::Create(Code::Sysenter));
	}

	void Assembler::sysexit()
	{
		AddInstruction(Instruction::Create(Code::Sysexitd));
	}

	void Assembler::sysexitq()
	{
		AddInstruction(Instruction::Create(Code::Sysexitq));
	}

	void Assembler::sysret()
	{
		AddInstruction(Instruction::Create(Code::Sysretd));
	}

	void Assembler::sysretq()
	{
		AddInstruction(Instruction::Create(Code::Sysretq));
	}

	void Assembler::t1mskc(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_T1mskc_r32_rm32, dst, src));
	}

	void Assembler::t1mskc(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_T1mskc_r64_rm64, dst, src));
	}

	void Assembler::t1mskc(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_T1mskc_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::t1mskc(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_T1mskc_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tdcall()
	{
		AddInstruction(Instruction::Create(Code::Tdcall));
	}

	void Assembler::tdpbf16ps(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tdpbf16ps_tmm_tmm_tmm, dst, src1, src2));
	}

	void Assembler::tdpbssd(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tdpbssd_tmm_tmm_tmm, dst, src1, src2));
	}

	void Assembler::tdpbsud(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tdpbsud_tmm_tmm_tmm, dst, src1, src2));
	}

	void Assembler::tdpbusd(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tdpbusd_tmm_tmm_tmm, dst, src1, src2));
	}

	void Assembler::tdpbuud(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tdpbuud_tmm_tmm_tmm, dst, src1, src2));
	}

	void Assembler::test(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm8_r8, dst, src));
	}

	void Assembler::test(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::test(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm16_r16, dst, src));
	}

	void Assembler::test(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::test(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm32_r32, dst, src));
	}

	void Assembler::test(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::test(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm64_r64, dst, src));
	}

	void Assembler::test(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Test_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::test(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Test_AL_imm8 : Code::Test_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::test(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		code = dst == Register::AX ? Code::Test_AX_imm16 : Code::Test_rm16_imm16;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::test(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		code = dst == Register::EAX ? Code::Test_EAX_imm32 : Code::Test_rm32_imm32;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::test(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		code = dst == Register::RAX ? Code::Test_RAX_imm32 : Code::Test_rm64_imm32;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::test(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = Code::Test_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Test_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Test_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Test_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Test, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::test(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Test_AL_imm8 : Code::Test_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::test(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		code = dst == Register::AX ? Code::Test_AX_imm16 : Code::Test_rm16_imm16;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::test(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		code = dst == Register::EAX ? Code::Test_EAX_imm32 : Code::Test_rm32_imm32;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::test(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = Code::Test_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = Code::Test_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Test_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Test, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::testui()
	{
		AddInstruction(Instruction::Create(Code::Testui));
	}

	void Assembler::tileloadd(AssemblerRegisterTMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tileloadd_tmm_sibmem, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tileloaddt1(AssemblerRegisterTMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tileloaddt1_tmm_sibmem, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tilerelease()
	{
		AddInstruction(Instruction::Create(Code::VEX_Tilerelease));
	}

	void Assembler::tilestored(AssemblerMemoryOperand dst, AssemblerRegisterTMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tilestored_sibmem_tmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::tilezero(AssemblerRegisterTMM dst)
	{
		AddInstruction(Instruction::Create(Code::VEX_Tilezero_tmm, dst));
	}

	void Assembler::tlbsync()
	{
		AddInstruction(Instruction::Create(Code::Tlbsync));
	}

	void Assembler::tpause(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Tpause_r32, dst));
	}

	void Assembler::tpause(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Tpause_r64, dst));
	}

	void Assembler::tzcnt(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Tzcnt_r16_rm16, dst, src));
	}

	void Assembler::tzcnt(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Tzcnt_r32_rm32, dst, src));
	}

	void Assembler::tzcnt(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Tzcnt_r64_rm64, dst, src));
	}

	void Assembler::tzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Tzcnt_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Tzcnt_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Tzcnt_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tzmsk(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Tzmsk_r32_rm32, dst, src));
	}

	void Assembler::tzmsk(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Tzmsk_r64_rm64, dst, src));
	}

	void Assembler::tzmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Tzmsk_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::tzmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Tzmsk_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Ucomisd_xmm_xmmm64, dst, src));
	}

	void Assembler::ucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ucomisd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Ucomiss_xmm_xmmm32, dst, src));
	}

	void Assembler::ucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ucomiss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud0()
	{
		AddInstruction(Instruction::Create(Code::Ud0));
	}

	void Assembler::ud0(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Ud0_r16_rm16, dst, src));
	}

	void Assembler::ud0(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Ud0_r32_rm32, dst, src));
	}

	void Assembler::ud0(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Ud0_r64_rm64, dst, src));
	}

	void Assembler::ud0(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ud0_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud0(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ud0_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud0(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ud0_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud1(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Ud1_r16_rm16, dst, src));
	}

	void Assembler::ud1(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Ud1_r32_rm32, dst, src));
	}

	void Assembler::ud1(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Ud1_r64_rm64, dst, src));
	}

	void Assembler::ud1(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ud1_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud1(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ud1_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud1(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Ud1_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::ud2()
	{
		AddInstruction(Instruction::Create(Code::Ud2));
	}

	void Assembler::uiret()
	{
		AddInstruction(Instruction::Create(Code::Uiret));
	}

	void Assembler::umonitor(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Umonitor_r16, dst));
	}

	void Assembler::umonitor(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Umonitor_r32, dst));
	}

	void Assembler::umonitor(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Umonitor_r64, dst));
	}

	void Assembler::umov(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Umov_rm8_r8, dst, src));
	}

	void Assembler::umov(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Umov_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::umov(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Umov_rm16_r16, dst, src));
	}

	void Assembler::umov(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Umov_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::umov(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Umov_rm32_r32, dst, src));
	}

	void Assembler::umov(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Umov_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::umov(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Umov_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::umov(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Umov_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::umov(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Umov_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::umwait(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Umwait_r32, dst));
	}

	void Assembler::umwait(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Umwait_r64, dst));
	}

	void Assembler::unpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Unpckhpd_xmm_xmmm128, dst, src));
	}

	void Assembler::unpckhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Unpckhpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::unpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Unpckhps_xmm_xmmm128, dst, src));
	}

	void Assembler::unpckhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Unpckhps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::unpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Unpcklpd_xmm_xmmm128, dst, src));
	}

	void Assembler::unpcklpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Unpcklpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::unpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Unpcklps_xmm_xmmm128, dst, src));
	}

	void Assembler::unpcklps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Unpcklps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::v4fmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_V4fmaddps_zmm_k1z_zmmp3_m128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::v4fmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_V4fmaddss_xmm_k1z_xmmp3_m128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::v4fnmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::v4fnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddpd_xmm_xmm_xmmm128 : Code::EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddpd_ymm_ymm_ymmm256 : Code::EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vaddpd_xmm_xmm_xmmm128 : Code::EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vaddpd_ymm_ymm_ymmm256 : Code::EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vaddph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vaddph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vaddph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddps_xmm_xmm_xmmm128 : Code::EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddps_ymm_ymm_ymmm256 : Code::EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vaddps_xmm_xmm_xmmm128 : Code::EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vaddps_ymm_ymm_ymmm256 : Code::EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddsd_xmm_xmm_xmmm64 : Code::EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddsd_xmm_xmm_xmmm64 : Code::EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vaddsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddss_xmm_xmm_xmmm32 : Code::EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaddss_xmm_xmm_xmmm32 : Code::EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubpd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubpd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubpd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubpd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubps_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubps_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubps_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaddsubps_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdec_xmm_xmm_xmmm128 : Code::EVEX_Vaesdec_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdec_ymm_ymm_ymmm256 : Code::EVEX_Vaesdec_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesdec_zmm_zmm_zmmm512, dst, src1, src2));
	}

	void Assembler::vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdec_xmm_xmm_xmmm128 : Code::EVEX_Vaesdec_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdec_ymm_ymm_ymmm256 : Code::EVEX_Vaesdec_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesdec_zmm_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdeclast_xmm_xmm_xmmm128 : Code::EVEX_Vaesdeclast_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdeclast_ymm_ymm_ymmm256 : Code::EVEX_Vaesdeclast_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesdeclast_zmm_zmm_zmmm512, dst, src1, src2));
	}

	void Assembler::vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdeclast_xmm_xmm_xmmm128 : Code::EVEX_Vaesdeclast_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesdeclast_ymm_ymm_ymmm256 : Code::EVEX_Vaesdeclast_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesdeclast_zmm_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenc_xmm_xmm_xmmm128 : Code::EVEX_Vaesenc_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenc_ymm_ymm_ymmm256 : Code::EVEX_Vaesenc_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesenc_zmm_zmm_zmmm512, dst, src1, src2));
	}

	void Assembler::vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenc_xmm_xmm_xmmm128 : Code::EVEX_Vaesenc_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenc_ymm_ymm_ymmm256 : Code::EVEX_Vaesenc_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesenc_zmm_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenclast_xmm_xmm_xmmm128 : Code::EVEX_Vaesenclast_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenclast_ymm_ymm_ymmm256 : Code::EVEX_Vaesenclast_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesenclast_zmm_zmm_zmmm512, dst, src1, src2));
	}

	void Assembler::vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenclast_xmm_xmm_xmmm128 : Code::EVEX_Vaesenclast_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vaesenclast_ymm_ymm_ymmm256 : Code::EVEX_Vaesenclast_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vaesenclast_zmm_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaesimc_xmm_xmmm128, dst, src));
	}

	void Assembler::vaesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaesimc_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vaeskeygenassist_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandnpd_xmm_xmm_xmmm128 : Code::EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandnpd_ymm_ymm_ymmm256 : Code::EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandnpd_xmm_xmm_xmmm128 : Code::EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandnpd_ymm_ymm_ymmm256 : Code::EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandnps_xmm_xmm_xmmm128 : Code::EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandnps_ymm_ymm_ymmm256 : Code::EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandnps_xmm_xmm_xmmm128 : Code::EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandnps_ymm_ymm_ymmm256 : Code::EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandpd_xmm_xmm_xmmm128 : Code::EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandpd_ymm_ymm_ymmm256 : Code::EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandpd_xmm_xmm_xmmm128 : Code::EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandpd_ymm_ymm_ymmm256 : Code::EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandps_xmm_xmm_xmmm128 : Code::EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vandps_ymm_ymm_ymmm256 : Code::EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandps_xmm_xmm_xmmm128 : Code::EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vandps_ymm_ymm_ymmm256 : Code::EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendpd_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendps_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vblendvps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vbroadcastf128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vbroadcastf128_ymm_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x4_ymm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x4_zmm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf32x8_zmm_k1z_m256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf64x2_ymm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf64x2_zmm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastf64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastf64x4_zmm_k1z_m256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vbroadcasti128_ymm_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x4_ymm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x4_zmm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti32x8_zmm_k1z_m256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti64x2_ymm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti64x2_zmm_k1z_m128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcasti64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcasti64x4_zmm_k1z_m256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastsd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vbroadcastsd_ymm_xmm : Code::EVEX_Vbroadcastsd_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastsd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastsd_zmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vbroadcastsd_ymm_m64 : Code::EVEX_Vbroadcastsd_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastsd_zmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vbroadcastss_xmm_xmm : Code::EVEX_Vbroadcastss_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastss(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vbroadcastss_ymm_xmm : Code::EVEX_Vbroadcastss_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastss(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastss_zmm_k1z_xmmm32, dst, src), dst.Flags);
	}

	void Assembler::vbroadcastss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vbroadcastss_xmm_m32 : Code::EVEX_Vbroadcastss_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastss(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vbroadcastss_ymm_m32 : Code::EVEX_Vbroadcastss_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vbroadcastss(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vbroadcastss_zmm_k1z_xmmm32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)8);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)24);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)27);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)11);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)29);
	}

	void Assembler::vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)13);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)30);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)14);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)18);
	}

	void Assembler::vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)12);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)28);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)20);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)25);
	}

	void Assembler::vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)9);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)26);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)10);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)22);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)21);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5	);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)23);
	}

	void Assembler::vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmppd_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpps_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, dst, src1, src2, imm));
	}

	void Assembler::vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, dst, src1, src2, imm));
	}

	void Assembler::vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vcmpss_xmm_xmm_xmmm32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)31);
	}

	void Assembler::vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)15);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)19);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmppd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpph(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vcmpps(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpsh(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vcmpss(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vcomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcomisd_xmm_xmmm64 : Code::EVEX_Vcomisd_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcomisd_xmm_xmmm64 : Code::EVEX_Vcomisd_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcomish(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcomish_xmm_xmmm16_sae, dst, src), src.Flags);
	}

	void Assembler::vcomish(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcomish_xmm_xmmm16_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcomiss_xmm_xmmm32 : Code::EVEX_Vcomiss_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcomiss_xmm_xmmm32 : Code::EVEX_Vcomiss_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcompresspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompresspd_xmmm128_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompresspd_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vcompresspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompresspd_ymmm256_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompresspd_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vcompresspd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompresspd_zmmm512_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompresspd_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vcompressps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompressps_xmmm128_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompressps_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vcompressps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompressps_ymmm256_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompressps_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vcompressps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompressps_zmmm512_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcompressps_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2pd_xmm_xmmm64 : Code::EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2pd_ymm_xmmm128 : Code::EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2pd_xmm_xmmm64 : Code::EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2pd_ymm_xmmm128 : Code::EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtdq2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtdq2ph, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2ps_xmm_xmmm128 : Code::EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2ps_ymm_ymmm256 : Code::EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2ps_xmm_xmmm128 : Code::EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtdq2ps_ymm_ymmm256 : Code::EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtneps2bf16, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtneps2bf16x(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtneps2bf16y(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2dq_xmm_xmmm128 : Code::EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2dq_xmm_ymmm256 : Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2dq_xmm_ymmm256 : Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2dq_xmm_xmmm128 : Code::EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtpd2dq, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er;
		}
		else if (src.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtpd2ph, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2ps_xmm_xmmm128 : Code::EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2ps_xmm_ymmm256 : Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2ps_xmm_ymmm256 : Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtpd2ps_xmm_xmmm128 : Code::EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtpd2ps, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtpd2udq, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2dq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2dq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2pd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtph2ps_xmm_xmmm64 : Code::EVEX_Vcvtph2ps_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2ps(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtph2ps_ymm_xmmm128 : Code::EVEX_Vcvtph2ps_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2ps(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtph2ps_xmm_xmmm64 : Code::EVEX_Vcvtph2ps_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vcvtph2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtph2ps_ymm_xmmm128 : Code::EVEX_Vcvtph2ps_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vcvtph2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2psx(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2psx(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2psx(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2psx(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2psx(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2qq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2udq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2udq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2uqq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2uw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2uw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2uw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2w_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2w_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtph2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2w(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2w_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2w(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2w_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtph2w(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2dq_xmm_xmmm128 : Code::EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2dq_ymm_ymmm256 : Code::EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2dq_xmm_xmmm128 : Code::EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2dq_ymm_ymmm256 : Code::EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2pd_xmm_xmmm64 : Code::EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2pd_ymm_xmmm128 : Code::EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2pd_xmm_xmmm64 : Code::EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2pd_ymm_xmmm128 : Code::EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm64_xmm_imm8 : Code::EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtps2ph_xmmm128_ymm_imm8 : Code::EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vcvtps2phx(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2phx(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2phx(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtps2phx, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2phx(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2phxx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2phxy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er;
		}
		else if (src.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtqq2ph, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtqq2ps, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtsd2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsd2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsd2si_r32_xmmm64 : Code::EVEX_Vcvtsd2si_r32_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsd2si_r64_xmmm64 : Code::EVEX_Vcvtsd2si_r64_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsd2si_r32_xmmm64 : Code::EVEX_Vcvtsd2si_r32_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsd2si_r64_xmmm64 : Code::EVEX_Vcvtsd2si_r64_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsd2ss_xmm_xmm_xmmm64 : Code::EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsd2ss_xmm_xmm_xmmm64 : Code::EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsd2usi_r32_xmmm64_er, dst, src), src.Flags);
	}

	void Assembler::vcvtsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsd2usi_r64_xmmm64_er, dst, src), src.Flags);
	}

	void Assembler::vcvtsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsd2usi_r32_xmmm64_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsd2usi_r64_xmmm64_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsh2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsh2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsh2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2si_r32_xmmm16_er, dst, src), src.Flags);
	}

	void Assembler::vcvtsh2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2si_r64_xmmm16_er, dst, src), src.Flags);
	}

	void Assembler::vcvtsh2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2si_r32_xmmm16_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsh2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2si_r64_xmmm16_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsh2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsh2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtsh2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2usi_r32_xmmm16_er, dst, src), src.Flags);
	}

	void Assembler::vcvtsh2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2usi_r64_xmmm16_er, dst, src), src.Flags);
	}

	void Assembler::vcvtsh2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2usi_r32_xmmm16_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsh2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsh2usi_r64_xmmm16_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2sd_xmm_xmm_rm32 : Code::EVEX_Vcvtsi2sd_xmm_xmm_rm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2sd_xmm_xmm_rm64 : Code::EVEX_Vcvtsi2sd_xmm_xmm_rm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.Size == MemoryOperandSize::Qword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2sd_xmm_xmm_rm64 : Code::EVEX_Vcvtsi2sd_xmm_xmm_rm64_er;
		}
		else if (src2.Size == MemoryOperandSize::Dword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2sd_xmm_xmm_rm32 : Code::EVEX_Vcvtsi2sd_xmm_xmm_rm32_er;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtsi2sd, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsi2sh_xmm_xmm_rm32_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtsi2sh_xmm_xmm_rm64_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.Size == MemoryOperandSize::Qword)
		{
			code = Code::EVEX_Vcvtsi2sh_xmm_xmm_rm64_er;
		}
		else if (src2.Size == MemoryOperandSize::Dword)
		{
			code = Code::EVEX_Vcvtsi2sh_xmm_xmm_rm32_er;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtsi2sh, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2ss_xmm_xmm_rm32 : Code::EVEX_Vcvtsi2ss_xmm_xmm_rm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2ss_xmm_xmm_rm64 : Code::EVEX_Vcvtsi2ss_xmm_xmm_rm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.Size == MemoryOperandSize::Qword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2ss_xmm_xmm_rm64 : Code::EVEX_Vcvtsi2ss_xmm_xmm_rm64_er;
		}
		else if (src2.Size == MemoryOperandSize::Dword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvtsi2ss_xmm_xmm_rm32 : Code::EVEX_Vcvtsi2ss_xmm_xmm_rm32_er;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtsi2ss, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtss2sd_xmm_xmm_xmmm32 : Code::EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtss2sd_xmm_xmm_xmmm32 : Code::EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtss2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtss2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vcvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtss2si_r32_xmmm32 : Code::EVEX_Vcvtss2si_r32_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtss2si_r64_xmmm32 : Code::EVEX_Vcvtss2si_r64_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtss2si_r32_xmmm32 : Code::EVEX_Vcvtss2si_r32_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvtss2si_r64_xmmm32 : Code::EVEX_Vcvtss2si_r64_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtss2usi_r32_xmmm32_er, dst, src), src.Flags);
	}

	void Assembler::vcvtss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtss2usi_r64_xmmm32_er, dst, src), src.Flags);
	}

	void Assembler::vcvtss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtss2usi_r32_xmmm32_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtss2usi_r64_xmmm32_er, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttpd2dq_xmm_xmmm128 : Code::EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttpd2dq_xmm_ymmm256 : Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvttpd2dq_xmm_ymmm256 : Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvttpd2dq_xmm_xmmm128 : Code::EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvttpd2dq, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvttpd2udq, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2dq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2dq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2qq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2udq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2udq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2uqq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2uw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2uw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2uw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2w_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2w_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vcvttph2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2w(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2w_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2w(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2w_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttph2w(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttps2dq_xmm_xmmm128 : Code::EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttps2dq_ymm_ymmm256 : Code::EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvttps2dq_xmm_xmmm128 : Code::EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vcvttps2dq_ymm_ymmm256 : Code::EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttsd2si_r32_xmmm64 : Code::EVEX_Vcvttsd2si_r32_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttsd2si_r64_xmmm64 : Code::EVEX_Vcvttsd2si_r64_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttsd2si_r32_xmmm64 : Code::EVEX_Vcvttsd2si_r32_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttsd2si_r64_xmmm64 : Code::EVEX_Vcvttsd2si_r64_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsd2usi_r32_xmmm64_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsd2usi_r64_xmmm64_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsd2usi_r32_xmmm64_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsd2usi_r64_xmmm64_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsh2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2si_r32_xmmm16_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttsh2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2si_r64_xmmm16_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttsh2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2si_r32_xmmm16_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsh2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2si_r64_xmmm16_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsh2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2usi_r32_xmmm16_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttsh2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2usi_r64_xmmm16_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttsh2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2usi_r32_xmmm16_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttsh2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttsh2usi_r64_xmmm16_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttss2si_r32_xmmm32 : Code::EVEX_Vcvttss2si_r32_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttss2si_r64_xmmm32 : Code::EVEX_Vcvttss2si_r64_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vcvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttss2si_r32_xmmm32 : Code::EVEX_Vcvttss2si_r32_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vcvttss2si_r64_xmmm32 : Code::EVEX_Vcvttss2si_r64_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttss2usi_r32_xmmm32_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttss2usi_r64_xmmm32_sae, dst, src), src.Flags);
	}

	void Assembler::vcvttss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttss2usi_r32_xmmm32_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvttss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvttss2usi_r64_xmmm32_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtudq2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtudq2ph, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er;
		}
		else if (src.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtuqq2ph, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
		}
		else if (src.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtuqq2ps, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtusi2sd_xmm_xmm_rm64_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.Size == MemoryOperandSize::Qword)
		{
			code = Code::EVEX_Vcvtusi2sd_xmm_xmm_rm64_er;
		}
		else if (src2.Size == MemoryOperandSize::Dword)
		{
			code = Code::EVEX_Vcvtusi2sd_xmm_xmm_rm32_er;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtusi2sd, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtusi2sh_xmm_xmm_rm32_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtusi2sh_xmm_xmm_rm64_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.Size == MemoryOperandSize::Qword)
		{
			code = Code::EVEX_Vcvtusi2sh_xmm_xmm_rm64_er;
		}
		else if (src2.Size == MemoryOperandSize::Dword)
		{
			code = Code::EVEX_Vcvtusi2sh_xmm_xmm_rm32_er;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtusi2sh, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtusi2ss_xmm_xmm_rm64_er, dst, src1, src2), src2.Flags);
	}

	void Assembler::vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.Size == MemoryOperandSize::Qword)
		{
			code = Code::EVEX_Vcvtusi2ss_xmm_xmm_rm64_er;
		}
		else if (src2.Size == MemoryOperandSize::Dword)
		{
			code = Code::EVEX_Vcvtusi2ss_xmm_xmm_rm32_er;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vcvtusi2ss, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vcvtuw2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtuw2ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtuw2ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuw2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuw2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtuw2ph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtw2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtw2ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vcvtw2ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vcvtw2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtw2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vcvtw2ph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivpd_xmm_xmm_xmmm128 : Code::EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivpd_ymm_ymm_ymmm256 : Code::EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vdivpd_xmm_xmm_xmmm128 : Code::EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vdivpd_ymm_ymm_ymmm256 : Code::EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdivph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdivph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vdivph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivps_xmm_xmm_xmmm128 : Code::EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivps_ymm_ymm_ymmm256 : Code::EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vdivps_xmm_xmm_xmmm128 : Code::EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vdivps_ymm_ymm_ymmm256 : Code::EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivsd_xmm_xmm_xmmm64 : Code::EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivsd_xmm_xmm_xmmm64 : Code::EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vdivsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivss_xmm_xmm_xmmm32 : Code::EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vdivss_xmm_xmm_xmmm32 : Code::EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdppd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vdpps_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::verr(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Verr_rm16, dst));
	}

	void Assembler::verr(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Verr_r32m16, dst));
	}

	void Assembler::verr(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Verr_r64m16, dst));
	}

	void Assembler::verr(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Verr_r32m16 : Code::Verr_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::verw(AssemblerRegister16 dst)
	{
		AddInstruction(Instruction::Create(Code::Verw_rm16, dst));
	}

	void Assembler::verw(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Verw_r32m16, dst));
	}

	void Assembler::verw(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Verw_r64m16, dst));
	}

	void Assembler::verw(AssemblerMemoryOperand dst)
	{
		Code code;
		code = GetBitness() >= 32 ? Code::Verw_r32m16 : Code::Verw_rm16;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vexp2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vexp2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vexp2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vexp2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vexpandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandpd_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vexpandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandpd_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vexpandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandpd_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vexpandpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandpd_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vexpandpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandpd_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vexpandpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandpd_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vexpandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandps_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vexpandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandps_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vexpandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandps_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vexpandps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandps_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vexpandps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandps_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vexpandps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vexpandps_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextractf128_xmmm128_ymm_imm8, dst, src1, imm));
	}

	void Assembler::vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextractf128_xmmm128_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextractf128_xmmm128_ymm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextractf128_xmmm128_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextracti128_xmmm128_ymm_imm8, dst, src1, imm));
	}

	void Assembler::vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextracti128_xmmm128_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextracti128_xmmm128_ymm_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vextracti128_xmmm128_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, imm), dst.Flags);
	}

	void Assembler::vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vextractps_rm32_xmm_imm8 : Code::EVEX_Vextractps_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vextractps_r64m32_xmm_imm8 : Code::EVEX_Vextractps_r64m32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vextractps_rm32_xmm_imm8 : Code::EVEX_Vextractps_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vextractps_rm32_xmm_imm8 : Code::EVEX_Vextractps_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vextractps_r64m32_xmm_imm8 : Code::EVEX_Vextractps_r64m32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vextractps_rm32_xmm_imm8 : Code::EVEX_Vextractps_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vfcmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfcmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfcmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfcmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfcmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfcmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmadd231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddps_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddps_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddss_xmm_xmm_xmm_xmmm32, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmaddsub231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsub231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfmsubadd231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubps_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubps_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfmsubss_xmm_xmm_xmm_xmmm32, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmadd231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub132ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub213ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231pd_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231pd_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231ps_xmm_xmm_xmmm128 : Code::EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231ps_ymm_ymm_ymmm256 : Code::EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231sd_xmm_xmm_xmmm64 : Code::EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vfnmsub231ss_xmm_xmm_xmmm32 : Code::EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, dst, src1, src2, src3));
	}

	void Assembler::vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vfpclasspd, dst, src1, imm);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vfpclasspd, dst, src1, imm);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vfpclassph, dst, src1, imm);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassph(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vfpclassph, dst, src1, imm);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassphx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassphx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassphy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassphy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassphz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassphz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vfpclassps, dst, src1, imm);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Zword)
		{
			code = Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Yword)
		{
			code = Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
		}
		else if (src1.Size == MemoryOperandSize::Xword)
		{
			code = Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vfpclassps, dst, src1, imm);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclasssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclasssh(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vfpclasssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclasssh(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vfpclassss_kr_k1_xmmm32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vfrczpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczpd_xmm_xmmm128, dst, src));
	}

	void Assembler::vfrczpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczpd_ymm_ymmm256, dst, src));
	}

	void Assembler::vfrczpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfrczpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczpd_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfrczps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczps_xmm_xmmm128, dst, src));
	}

	void Assembler::vfrczps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczps_ymm_ymmm256, dst, src));
	}

	void Assembler::vfrczps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfrczps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczps_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfrczsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczsd_xmm_xmmm64, dst, src));
	}

	void Assembler::vfrczsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczsd_xmm_xmmm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vfrczss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczss_xmm_xmmm32, dst, src));
	}

	void Assembler::vfrczss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vfrczss_xmm_xmmm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherdpd_xmm_k1_vm32x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherdpd_ymm_k1_vm32x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherdpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherdpd_zmm_k1_vm32y, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vgatherdpd_xmm_vm32x_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vgatherdpd_ymm_vm32x_ymm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherdps_xmm_k1_vm32x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherdps_ymm_k1_vm32y, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherdps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherdps_zmm_k1_vm32z, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vgatherdps_xmm_vm32x_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vgatherdps_ymm_vm32y_ymm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgatherpf0dpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf0dpd_vm32y_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf0dps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf0dps_vm32z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf0qpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf0qpd_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf0qps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf0qps_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf1dpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf1dpd_vm32y_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf1dps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf1dps_vm32z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf1qpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf1qpd_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherpf1qps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherpf1qps_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherqpd_xmm_k1_vm64x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherqpd_ymm_k1_vm64y, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherqpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherqpd_zmm_k1_vm64z, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vgatherqpd_xmm_vm64x_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vgatherqpd_ymm_vm64y_ymm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (Iced::Intel::RegisterExtensions::IsXMM(src.Index))
		{
			code = Code::EVEX_Vgatherqps_xmm_k1_vm64x;
		}
		else if (Iced::Intel::RegisterExtensions::IsYMM(src.Index))
		{
			code = Code::EVEX_Vgatherqps_xmm_k1_vm64y;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vgatherqps, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherqps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgatherqps_ymm_k1_vm64z, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		Code code;
		if (Iced::Intel::RegisterExtensions::IsXMM(src1.Index))
		{
			code = Code::VEX_Vgatherqps_xmm_vm64x_xmm;
		}
		else if (Iced::Intel::RegisterExtensions::IsYMM(src1.Index))
		{
			code = Code::VEX_Vgatherqps_xmm_vm64y_xmm;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vgatherqps, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vgetexppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexppd_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vgetexppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexppd_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vgetexppd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vgetexppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexppd_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexppd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexppd_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexppd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpph_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vgetexpph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpph_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vgetexpph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpph_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpph_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpps_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vgetexpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpps_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vgetexpps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpps_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpps_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vgetexpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vgetexpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8mulb_xmm_xmm_xmmm128 : Code::EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8mulb_ymm_ymm_ymmm256 : Code::EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8mulb_xmm_xmm_xmmm128 : Code::EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vgf2p8mulb_ymm_ymm_ymmm256 : Code::EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddpd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddpd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddpd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddpd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddps_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddps_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddps_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhaddps_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubpd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubpd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubpd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubpd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubps_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubps_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubps_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vhsubps_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vinserti128_ymm_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vinsertps_xmm_xmm_xmmm32_imm8 : Code::EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vlddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vlddqu_xmm_m128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vlddqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vlddqu_ymm_m256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vldmxcsr(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vldmxcsr_m32, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmaskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::CreateVmaskmovdqu(GetBitness(), dst, src));
	}

	void Assembler::vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovpd_m128_xmm_xmm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovpd_m256_ymm_ymm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vmaskmovpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovpd_xmm_xmm_m128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmaskmovpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovpd_ymm_ymm_m256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovps_m128_xmm_xmm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovps_m256_ymm_ymm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vmaskmovps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovps_xmm_xmm_m128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmaskmovps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmaskmovps_ymm_ymm_m256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxpd_xmm_xmm_xmmm128 : Code::EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxpd_ymm_ymm_ymmm256 : Code::EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmaxpd_xmm_xmm_xmmm128 : Code::EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmaxpd_ymm_ymm_ymmm256 : Code::EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmaxph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmaxph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxps_xmm_xmm_xmmm128 : Code::EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxps_ymm_ymm_ymmm256 : Code::EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmaxps_xmm_xmm_xmmm128 : Code::EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmaxps_ymm_ymm_ymmm256 : Code::EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxsd_xmm_xmm_xmmm64 : Code::EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxsd_xmm_xmm_xmmm64 : Code::EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxss_xmm_xmm_xmmm32 : Code::EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmaxss_xmm_xmm_xmmm32 : Code::EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmcall()
	{
		AddInstruction(Instruction::Create(Code::Vmcall));
	}

	void Assembler::vmclear(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Vmclear_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmfunc()
	{
		AddInstruction(Instruction::Create(Code::Vmfunc));
	}

	void Assembler::vmgexit()
	{
		AddInstruction(Instruction::Create(Code::Vmgexit));
	}

	void Assembler::vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminpd_xmm_xmm_xmmm128 : Code::EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminpd_ymm_ymm_ymmm256 : Code::EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vminpd_xmm_xmm_xmmm128 : Code::EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vminpd_ymm_ymm_ymmm256 : Code::EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vminph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vminph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vminph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminps_xmm_xmm_xmmm128 : Code::EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminps_ymm_ymm_ymmm256 : Code::EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vminps_xmm_xmm_xmmm128 : Code::EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vminps_ymm_ymm_ymmm256 : Code::EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminsd_xmm_xmm_xmmm64 : Code::EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminsd_xmm_xmm_xmmm64 : Code::EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vminsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminss_xmm_xmm_xmmm32 : Code::EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vminss_xmm_xmm_xmmm32 : Code::EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmlaunch()
	{
		AddInstruction(Instruction::Create(Code::Vmlaunch));
	}

	void Assembler::vmload()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Vmloadq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Vmloadd : Code::Vmloadw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::vmmcall()
	{
		AddInstruction(Instruction::Create(Code::Vmmcall));
	}

	void Assembler::vmovapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovapd_xmm_xmmm128 : Code::EVEX_Vmovapd_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovapd_xmmm128_xmm : Code::EVEX_Vmovapd_xmmm128_k1z_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovapd_ymm_ymmm256 : Code::EVEX_Vmovapd_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovapd_ymmm256_ymm : Code::EVEX_Vmovapd_ymmm256_k1z_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovapd_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovapd_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovapd_xmm_xmmm128 : Code::EVEX_Vmovapd_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovapd_ymm_ymmm256 : Code::EVEX_Vmovapd_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovapd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovapd_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovaps_xmm_xmmm128 : Code::EVEX_Vmovaps_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovaps_xmmm128_xmm : Code::EVEX_Vmovaps_xmmm128_k1z_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovaps_ymm_ymmm256 : Code::EVEX_Vmovaps_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovaps_ymmm256_ymm : Code::EVEX_Vmovaps_ymmm256_k1z_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovaps_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovaps_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovaps_xmm_xmmm128 : Code::EVEX_Vmovaps_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovaps_ymm_ymmm256 : Code::EVEX_Vmovaps_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovaps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovaps_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovd(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovd_xmm_rm32 : Code::EVEX_Vmovd_xmm_rm32;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::vmovd(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovd_rm32_xmm : Code::EVEX_Vmovd_rm32_xmm;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::vmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovd_rm32_xmm : Code::EVEX_Vmovd_rm32_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovd_xmm_rm32 : Code::EVEX_Vmovd_xmm_rm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovddup_xmm_xmmm64 : Code::EVEX_Vmovddup_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovddup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovddup_ymm_ymmm256 : Code::EVEX_Vmovddup_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovddup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovddup_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovddup_xmm_xmmm64 : Code::EVEX_Vmovddup_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovddup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovddup_ymm_ymmm256 : Code::EVEX_Vmovddup_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovddup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovddup_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqa_xmm_xmmm128, dst, src));
	}

	void Assembler::vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqa_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovdqa(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqa_ymm_ymmm256, dst, src));
	}

	void Assembler::vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqa_ymmm256_ymm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqa_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqa_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovdqa32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqa32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa32_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqa64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqa64_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqu_xmm_xmmm128, dst, src));
	}

	void Assembler::vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqu_xmmm128_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovdqu(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqu_ymm_ymmm256, dst, src));
	}

	void Assembler::vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqu_ymmm256_ymm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqu_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovdqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovdqu_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovdqu16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu16(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu16_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu32_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu64_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovdqu8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovdqu8_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovhlps_xmm_xmm_xmm : Code::EVEX_Vmovhlps_xmm_xmm_xmm;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vmovhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovhpd_m64_xmm : Code::EVEX_Vmovhpd_m64_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovhpd_xmm_xmm_m64 : Code::EVEX_Vmovhpd_xmm_xmm_m64;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovhps_m64_xmm : Code::EVEX_Vmovhps_m64_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovhps_xmm_xmm_m64 : Code::EVEX_Vmovhps_xmm_xmm_m64;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovlhps_xmm_xmm_xmm : Code::EVEX_Vmovlhps_xmm_xmm_xmm;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vmovlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovlpd_m64_xmm : Code::EVEX_Vmovlpd_m64_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovlpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovlpd_xmm_xmm_m64 : Code::EVEX_Vmovlpd_xmm_xmm_m64;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovlps_m64_xmm : Code::EVEX_Vmovlps_m64_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovlps_xmm_xmm_m64 : Code::EVEX_Vmovlps_xmm_xmm_m64;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskpd_r32_xmm, dst, src));
	}

	void Assembler::vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskpd_r64_xmm, dst, src));
	}

	void Assembler::vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskpd_r32_ymm, dst, src));
	}

	void Assembler::vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskpd_r64_ymm, dst, src));
	}

	void Assembler::vmovmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskps_r32_xmm, dst, src));
	}

	void Assembler::vmovmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskps_r64_xmm, dst, src));
	}

	void Assembler::vmovmskps(AssemblerRegister32 dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskps_r32_ymm, dst, src));
	}

	void Assembler::vmovmskps(AssemblerRegister64 dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmovmskps_r64_ymm, dst, src));
	}

	void Assembler::vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntdq_m128_xmm : Code::EVEX_Vmovntdq_m128_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntdq_m256_ymm : Code::EVEX_Vmovntdq_m256_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovntdq_m512_zmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntdqa_xmm_m128 : Code::EVEX_Vmovntdqa_xmm_m128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovntdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntdqa_ymm_m256 : Code::EVEX_Vmovntdqa_ymm_m256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovntdqa(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovntdqa_zmm_m512, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntpd_m128_xmm : Code::EVEX_Vmovntpd_m128_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntpd_m256_ymm : Code::EVEX_Vmovntpd_m256_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovntpd_m512_zmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntps_m128_xmm : Code::EVEX_Vmovntps_m128_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovntps_m256_ymm : Code::EVEX_Vmovntps_m256_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovntps_m512_zmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovq(AssemblerRegisterXMM dst, AssemblerRegister64 src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovq_xmm_rm64 : Code::EVEX_Vmovq_xmm_rm64;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::vmovq(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovq_rm64_xmm : Code::EVEX_Vmovq_rm64_xmm;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::vmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovq_xmm_xmmm64 : Code::EVEX_Vmovq_xmm_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::vmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovq_xmmm64_xmm : Code::EVEX_Vmovq_xmmm64_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovq_xmm_xmmm64 : Code::EVEX_Vmovq_xmm_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmovsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsd_m64_xmm : Code::EVEX_Vmovsd_m64_k1_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsd_xmm_m64 : Code::EVEX_Vmovsd_xmm_k1z_m64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsd_xmm_xmm_xmm : Code::EVEX_Vmovsd_xmm_k1z_xmm_xmm;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmovsh(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovsh_m16_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovsh(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovsh_xmm_k1z_m16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovsh_xmm_k1z_xmm_xmm, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmovshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovshdup_xmm_xmmm128 : Code::EVEX_Vmovshdup_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovshdup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovshdup_ymm_ymmm256 : Code::EVEX_Vmovshdup_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovshdup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovshdup_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovshdup_xmm_xmmm128 : Code::EVEX_Vmovshdup_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovshdup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovshdup_ymm_ymmm256 : Code::EVEX_Vmovshdup_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovshdup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovshdup_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsldup_xmm_xmmm128 : Code::EVEX_Vmovsldup_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovsldup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsldup_ymm_ymmm256 : Code::EVEX_Vmovsldup_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovsldup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovsldup_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsldup_xmm_xmmm128 : Code::EVEX_Vmovsldup_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovsldup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovsldup_ymm_ymmm256 : Code::EVEX_Vmovsldup_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovsldup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovsldup_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovss_m32_xmm : Code::EVEX_Vmovss_m32_k1_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovss_xmm_m32 : Code::EVEX_Vmovss_xmm_k1z_m32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovss_xmm_xmm_xmm : Code::EVEX_Vmovss_xmm_k1z_xmm_xmm;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovupd_xmm_xmmm128 : Code::EVEX_Vmovupd_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovupd_xmmm128_xmm : Code::EVEX_Vmovupd_xmmm128_k1z_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovupd_ymm_ymmm256 : Code::EVEX_Vmovupd_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovupd_ymmm256_ymm : Code::EVEX_Vmovupd_ymmm256_k1z_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovupd_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovupd_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovupd_xmm_xmmm128 : Code::EVEX_Vmovupd_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovupd_ymm_ymmm256 : Code::EVEX_Vmovupd_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovupd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovupd_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovups_xmm_xmmm128 : Code::EVEX_Vmovups_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovups_xmmm128_xmm : Code::EVEX_Vmovups_xmmm128_k1z_xmm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovups(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovups_ymm_ymmm256 : Code::EVEX_Vmovups_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vmovups(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovups_ymmm256_ymm : Code::EVEX_Vmovups_ymmm256_k1z_ymm;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovups(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovups_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vmovups(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovups_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vmovups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovups_xmm_xmmm128 : Code::EVEX_Vmovups_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovups(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmovups_ymm_ymmm256 : Code::EVEX_Vmovups_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovups(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovups_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vmovw(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovw_xmm_r32m16, dst, src));
	}

	void Assembler::vmovw(AssemblerRegisterXMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovw_xmm_r64m16, dst, src));
	}

	void Assembler::vmovw(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovw_r32m16_xmm, dst, src));
	}

	void Assembler::vmovw(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovw_r64m16_xmm, dst, src));
	}

	void Assembler::vmovw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovw_r32m16_xmm, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmovw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmovw_xmm_r32m16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vmptrld(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Vmptrld_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmptrst(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Vmptrst_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmread(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Vmread_rm32_r32, dst, src));
	}

	void Assembler::vmread(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Vmread_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmread(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Vmread_rm64_r64, dst, src));
	}

	void Assembler::vmread(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Vmread_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::vmresume()
	{
		AddInstruction(Instruction::Create(Code::Vmresume));
	}

	void Assembler::vmrun()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Vmrunq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Vmrund : Code::Vmrunw;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::vmsave()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Vmsaveq;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Vmsaved : Code::Vmsavew;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulpd_xmm_xmm_xmmm128 : Code::EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulpd_ymm_ymm_ymmm256 : Code::EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmulpd_xmm_xmm_xmmm128 : Code::EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmulpd_ymm_ymm_ymmm256 : Code::EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmulph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmulph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmulph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulps_xmm_xmm_xmmm128 : Code::EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulps_ymm_ymm_ymmm256 : Code::EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmulps_xmm_xmm_xmmm128 : Code::EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vmulps_ymm_ymm_ymmm256 : Code::EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulsd_xmm_xmm_xmmm64 : Code::EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulsd_xmm_xmm_xmmm64 : Code::EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmulsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulss_xmm_xmm_xmmm32 : Code::EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vmulss_xmm_xmm_xmmm32 : Code::EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vmwrite(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Vmwrite_r32_rm32, dst, src));
	}

	void Assembler::vmwrite(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Vmwrite_r64_rm64, dst, src));
	}

	void Assembler::vmwrite(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Vmwrite_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmwrite(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Vmwrite_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vmxoff()
	{
		AddInstruction(Instruction::Create(Code::Vmxoff));
	}

	void Assembler::vmxon(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Vmxon_m64, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vorpd_xmm_xmm_xmmm128 : Code::EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vorpd_ymm_ymm_ymmm256 : Code::EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vorpd_xmm_xmm_xmmm128 : Code::EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vorpd_ymm_ymm_ymmm256 : Code::EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vorps_xmm_xmm_xmmm128 : Code::EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vorps_ymm_ymm_ymmm256 : Code::EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vorps_xmm_xmm_xmmm128 : Code::EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vorps_ymm_ymm_ymmm256 : Code::EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, dst, src1, src2));
	}

	void Assembler::vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, dst, src1, src2));
	}

	void Assembler::vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, dst, src1, src2));
	}

	void Assembler::vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, dst, src1, src2));
	}

	void Assembler::vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, dst, src1, src2));
	}

	void Assembler::vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, dst, src1, src2));
	}

	void Assembler::vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), src2.Flags);
	}

	void Assembler::vp4dpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vp4dpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsb_xmm_xmmm128 : Code::EVEX_Vpabsb_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpabsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsb_ymm_ymmm256 : Code::EVEX_Vpabsb_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpabsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsb_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsb_xmm_xmmm128 : Code::EVEX_Vpabsb_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpabsb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsb_ymm_ymmm256 : Code::EVEX_Vpabsb_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpabsb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsb_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsd_xmm_xmmm128 : Code::EVEX_Vpabsd_xmm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpabsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsd_ymm_ymmm256 : Code::EVEX_Vpabsd_ymm_k1z_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpabsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsd_zmm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vpabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vpabsd_xmm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpabsd_xmm_xmmm128 : Code::EVEX_Vpabsd_xmm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpabsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vpabsd_ymm_k1z_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpabsd_ymm_ymmm256 : Code::EVEX_Vpabsd_ymm_k1z_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpabsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsd_zmm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpabsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vpabsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vpabsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsq_zmm_k1z_zmmm512b64, dst, src), dst.Flags);
	}

	void Assembler::vpabsq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpabsq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpabsq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsq_zmm_k1z_zmmm512b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsw_xmm_xmmm128 : Code::EVEX_Vpabsw_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpabsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsw_ymm_ymmm256 : Code::EVEX_Vpabsw_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpabsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsw_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsw_xmm_xmmm128 : Code::EVEX_Vpabsw_xmm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpabsw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpabsw_ymm_ymmm256 : Code::EVEX_Vpabsw_ymm_k1z_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpabsw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpabsw_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackssdw_xmm_xmm_xmmm128 : Code::EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackssdw_ymm_ymm_ymmm256 : Code::EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpackssdw_xmm_xmm_xmmm128 : Code::EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpackssdw_ymm_ymm_ymmm256 : Code::EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpacksswb_xmm_xmm_xmmm128 : Code::EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpacksswb_ymm_ymm_ymmm256 : Code::EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpacksswb_xmm_xmm_xmmm128 : Code::EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpacksswb_ymm_ymm_ymmm256 : Code::EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackusdw_xmm_xmm_xmmm128 : Code::EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackusdw_ymm_ymm_ymmm256 : Code::EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpackusdw_xmm_xmm_xmmm128 : Code::EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpackusdw_ymm_ymm_ymmm256 : Code::EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackuswb_xmm_xmm_xmmm128 : Code::EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackuswb_ymm_ymm_ymmm256 : Code::EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackuswb_xmm_xmm_xmmm128 : Code::EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpackuswb_ymm_ymm_ymmm256 : Code::EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddb_xmm_xmm_xmmm128 : Code::EVEX_Vpaddb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddb_ymm_ymm_ymmm256 : Code::EVEX_Vpaddb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddb_xmm_xmm_xmmm128 : Code::EVEX_Vpaddb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddb_ymm_ymm_ymmm256 : Code::EVEX_Vpaddb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddd_xmm_xmm_xmmm128 : Code::EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddd_ymm_ymm_ymmm256 : Code::EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpaddd_xmm_xmm_xmmm128 : Code::EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpaddd_ymm_ymm_ymmm256 : Code::EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddq_xmm_xmm_xmmm128 : Code::EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddq_ymm_ymm_ymmm256 : Code::EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpaddq_xmm_xmm_xmmm128 : Code::EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpaddq_ymm_ymm_ymmm256 : Code::EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsb_xmm_xmm_xmmm128 : Code::EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsb_ymm_ymm_ymmm256 : Code::EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsb_xmm_xmm_xmmm128 : Code::EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsb_ymm_ymm_ymmm256 : Code::EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsw_xmm_xmm_xmmm128 : Code::EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsw_ymm_ymm_ymmm256 : Code::EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsw_xmm_xmm_xmmm128 : Code::EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddsw_ymm_ymm_ymmm256 : Code::EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusb_xmm_xmm_xmmm128 : Code::EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusb_ymm_ymm_ymmm256 : Code::EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusb_xmm_xmm_xmmm128 : Code::EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusb_ymm_ymm_ymmm256 : Code::EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusw_xmm_xmm_xmmm128 : Code::EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusw_ymm_ymm_ymmm256 : Code::EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusw_xmm_xmm_xmmm128 : Code::EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddusw_ymm_ymm_ymmm256 : Code::EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddw_xmm_xmm_xmmm128 : Code::EVEX_Vpaddw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddw_ymm_ymm_ymmm256 : Code::EVEX_Vpaddw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddw_xmm_xmm_xmmm128 : Code::EVEX_Vpaddw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpaddw_ymm_ymm_ymmm256 : Code::EVEX_Vpaddw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpalignr_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpand_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpand_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpand_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpand_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpandn_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpandn_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpandn_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpandn_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgb_xmm_xmm_xmmm128 : Code::EVEX_Vpavgb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgb_ymm_ymm_ymmm256 : Code::EVEX_Vpavgb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgb_xmm_xmm_xmmm128 : Code::EVEX_Vpavgb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgb_ymm_ymm_ymmm256 : Code::EVEX_Vpavgb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgw_xmm_xmm_xmmm128 : Code::EVEX_Vpavgw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgw_ymm_ymm_ymmm256 : Code::EVEX_Vpavgw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgw_xmm_xmm_xmmm128 : Code::EVEX_Vpavgw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpavgw_ymm_ymm_ymmm256 : Code::EVEX_Vpavgw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendd_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpblendw_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastb_xmm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastb_ymm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastb_zmm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastb_xmm_xmmm8 : Code::EVEX_Vpbroadcastb_xmm_k1z_xmmm8;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastb_ymm_xmmm8 : Code::EVEX_Vpbroadcastb_ymm_k1z_xmmm8;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastb_zmm_k1z_xmmm8, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastb_xmm_xmmm8 : Code::EVEX_Vpbroadcastb_xmm_k1z_xmmm8;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastb_ymm_xmmm8 : Code::EVEX_Vpbroadcastb_ymm_k1z_xmmm8;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastb_zmm_k1z_xmmm8, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastd_xmm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastd_ymm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastd_zmm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastd_xmm_xmmm32 : Code::EVEX_Vpbroadcastd_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastd_ymm_xmmm32 : Code::EVEX_Vpbroadcastd_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastd_zmm_k1z_xmmm32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastd_xmm_xmmm32 : Code::EVEX_Vpbroadcastd_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastd_ymm_xmmm32 : Code::EVEX_Vpbroadcastd_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastd_zmm_k1z_xmmm32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastmb2q(AssemblerRegisterXMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastmb2q_xmm_kr, dst, src));
	}

	void Assembler::vpbroadcastmb2q(AssemblerRegisterYMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastmb2q_ymm_kr, dst, src));
	}

	void Assembler::vpbroadcastmb2q(AssemblerRegisterZMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastmb2q_zmm_kr, dst, src));
	}

	void Assembler::vpbroadcastmw2d(AssemblerRegisterXMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastmw2d_xmm_kr, dst, src));
	}

	void Assembler::vpbroadcastmw2d(AssemblerRegisterYMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastmw2d_ymm_kr, dst, src));
	}

	void Assembler::vpbroadcastmw2d(AssemblerRegisterZMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastmw2d_zmm_kr, dst, src));
	}

	void Assembler::vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastq_xmm_k1z_r64, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastq_ymm_k1z_r64, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastq_zmm_k1z_r64, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastq_xmm_xmmm64 : Code::EVEX_Vpbroadcastq_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastq_ymm_xmmm64 : Code::EVEX_Vpbroadcastq_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastq_zmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastq_xmm_xmmm64 : Code::EVEX_Vpbroadcastq_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastq_ymm_xmmm64 : Code::EVEX_Vpbroadcastq_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastq_zmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastw_xmm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastw_ymm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastw_zmm_k1z_r32, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastw_xmm_xmmm16 : Code::EVEX_Vpbroadcastw_xmm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastw_ymm_xmmm16 : Code::EVEX_Vpbroadcastw_ymm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastw_zmm_k1z_xmmm16, dst, src), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastw_xmm_xmmm16 : Code::EVEX_Vpbroadcastw_xmm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpbroadcastw_ymm_xmmm16 : Code::EVEX_Vpbroadcastw_ymm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpbroadcastw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpbroadcastw_zmm_k1z_xmmm16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)17);
	}

	void Assembler::vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)16);
	}

	void Assembler::vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpclmulqdq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcmov_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcmov_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcmov_ymm_ymm_ymmm256_ymm, dst, src1, src2, src3));
	}

	void Assembler::vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcmov_ymm_ymm_ymmm256_ymm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcmov_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcmov_ymm_ymm_ymm_ymmm256, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqb_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqb_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqb_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqb_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqq_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqq_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqq_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqq_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpeqw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri64_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri64_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestri64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm64_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm64_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpestrm64_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtb_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtb_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtb_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtb_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtq_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtq_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtq_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtq_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpgtw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistri_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpcmpistrm_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmplew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmplew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmplew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmplew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmplew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmplew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		vpcmpw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomb_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomd_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)4);
	}

	void Assembler::vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)6);
	}

	void Assembler::vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)3);
	}

	void Assembler::vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)2);
	}

	void Assembler::vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)1);
	}

	void Assembler::vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)0);
	}

	void Assembler::vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)5);
	}

	void Assembler::vpcompressb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressb_xmmm128_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressb_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressb_ymmm256_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressb_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressb_zmmm512_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressb_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressd_xmmm128_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressd_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressd_ymmm256_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressd_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressd_zmmm512_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressd_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressq_xmmm128_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressq_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressq_ymmm256_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressq_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressq_zmmm512_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressq_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressw_xmmm128_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressw_xmmm128_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressw_ymmm256_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressw_ymmm256_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcompressw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressw_zmmm512_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpcompressw_zmmm512_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomq_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomb(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomd(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomub(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomud(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuq(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomuw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		vpcomw(dst, src1, src2, (std::uint8_t)7);
	}

	void Assembler::vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomub_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomud_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, dst, src1, src2, imm));
	}

	void Assembler::vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpcomw_xmm_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpconflictd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictd_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vpconflictd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictd_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vpconflictd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictd_zmm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vpconflictd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictd_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpconflictd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictd_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpconflictd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictd_zmm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpconflictq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vpconflictq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vpconflictq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictq_zmm_k1z_zmmm512b64, dst, src), dst.Flags);
	}

	void Assembler::vpconflictq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpconflictq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpconflictq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpconflictq_zmm_k1z_zmmm512b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusd_xmm_xmm_xmmm128 : Code::EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusd_ymm_ymm_ymmm256 : Code::EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusd_xmm_xmm_xmmm128 : Code::EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusd_ymm_ymm_ymmm256 : Code::EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusds_xmm_xmm_xmmm128 : Code::EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusds_ymm_ymm_ymmm256 : Code::EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusds_xmm_xmm_xmmm128 : Code::EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpbusds_ymm_ymm_ymmm256 : Code::EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssd_xmm_xmm_xmmm128 : Code::EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssd_ymm_ymm_ymmm256 : Code::EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssd_xmm_xmm_xmmm128 : Code::EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssd_ymm_ymm_ymmm256 : Code::EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssds_xmm_xmm_xmmm128 : Code::EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssds_ymm_ymm_ymmm256 : Code::EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssds_xmm_xmm_xmmm128 : Code::EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpdpwssds_ymm_ymm_ymmm256 : Code::EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, dst, src1, src2, imm));
	}

	void Assembler::vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermb_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermb_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermb_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermb_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermd_ymm_ymm_ymmm256 : Code::EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermd_ymm_ymm_ymmm256 : Code::EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2, src3, imm));
	}

	void Assembler::vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, imm));
	}

	void Assembler::vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2, src3, imm));
	}

	void Assembler::vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, imm));
	}

	void Assembler::vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2, src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2, src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2, src3, imm));
	}

	void Assembler::vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, imm));
	}

	void Assembler::vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2, src3, imm));
	}

	void Assembler::vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, imm));
	}

	void Assembler::vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2, src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2, src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, dst, src1, src2.ToMemoryOperand(GetBitness()), src3, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, dst, src1, src2, src3.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_xmm_xmm_xmmm128 : Code::EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_ymm_ymm_ymmm256 : Code::EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_xmm_xmm_xmmm128 : Code::EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_ymm_ymm_ymmm256 : Code::EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_xmm_xmmm128_imm8 : Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_xmm_xmmm128_imm8 : Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_xmm_xmmm128_imm8 : Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_xmm_xmmm128_imm8 : Code::EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_xmm_xmm_xmmm128 : Code::EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_ymm_ymm_ymmm256 : Code::EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_xmm_xmm_xmmm128 : Code::EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_ymm_ymm_ymmm256 : Code::EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_xmm_xmmm128_imm8 : Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_ymm_ymmm256_imm8 : Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_xmm_xmmm128_imm8 : Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_ymm_ymmm256_imm8 : Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_xmm_xmmm128_imm8 : Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_ymm_ymmm256_imm8 : Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_xmm_xmmm128_imm8 : Code::EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermilps_ymm_ymmm256_imm8 : Code::EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermpd_ymm_ymmm256_imm8 : Code::EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermps_ymm_ymm_ymmm256 : Code::EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermps_ymm_ymm_ymmm256 : Code::EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermq_ymm_ymmm256_imm8 : Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermq_ymm_ymmm256_imm8 : Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpermq_ymm_ymmm256_imm8 : Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpermq_ymm_ymmm256_imm8 : Code::EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpermw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandb_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpexpandb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandb_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpexpandb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandb_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpexpandb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandb_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandb_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandb_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandd_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpexpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandd_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpexpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandd_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpexpandd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandd_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandd_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandd_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandq_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpexpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandq_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpexpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandq_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpexpandq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandq_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandq_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandq_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandw_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpexpandw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandw_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpexpandw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandw_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpexpandw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandw_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandw_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpexpandw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpexpandw_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrb_r32m8_xmm_imm8 : Code::EVEX_Vpextrb_r32m8_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrb_r64m8_xmm_imm8 : Code::EVEX_Vpextrb_r64m8_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrb_r32m8_xmm_imm8 : Code::EVEX_Vpextrb_r32m8_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrb_r32m8_xmm_imm8 : Code::EVEX_Vpextrb_r32m8_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrb_r64m8_xmm_imm8 : Code::EVEX_Vpextrb_r64m8_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrb_r32m8_xmm_imm8 : Code::EVEX_Vpextrb_r32m8_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrd_rm32_xmm_imm8 : Code::EVEX_Vpextrd_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrd_rm32_xmm_imm8 : Code::EVEX_Vpextrd_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrd_rm32_xmm_imm8 : Code::EVEX_Vpextrd_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrd_rm32_xmm_imm8 : Code::EVEX_Vpextrd_rm32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrq_rm64_xmm_imm8 : Code::EVEX_Vpextrq_rm64_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrq_rm64_xmm_imm8 : Code::EVEX_Vpextrq_rm64_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrq_rm64_xmm_imm8 : Code::EVEX_Vpextrq_rm64_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrq_rm64_xmm_imm8 : Code::EVEX_Vpextrq_rm64_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrw_r32_xmm_imm8 : Code::EVEX_Vpextrw_r32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrw_r64_xmm_imm8 : Code::EVEX_Vpextrw_r64_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrw_r32m16_xmm_imm8 : Code::EVEX_Vpextrw_r32m16_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, imm));
	}

	void Assembler::vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrw_r32_xmm_imm8 : Code::EVEX_Vpextrw_r32_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrw_r64_xmm_imm8 : Code::EVEX_Vpextrw_r64_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpextrw_r32m16_xmm_imm8 : Code::EVEX_Vpextrw_r32m16_xmm_imm8;
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherdd_xmm_k1_vm32x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherdd_ymm_k1_vm32y, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherdd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherdd_zmm_k1_vm32z, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpgatherdd_xmm_vm32x_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpgatherdd_ymm_vm32y_ymm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherdq_xmm_k1_vm32x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherdq_ymm_k1_vm32x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherdq_zmm_k1_vm32y, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpgatherdq_xmm_vm32x_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpgatherdq_ymm_vm32x_ymm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (Iced::Intel::RegisterExtensions::IsXMM(src.Index))
		{
			code = Code::EVEX_Vpgatherqd_xmm_k1_vm64x;
		}
		else if (Iced::Intel::RegisterExtensions::IsYMM(src.Index))
		{
			code = Code::EVEX_Vpgatherqd_xmm_k1_vm64y;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vpgatherqd, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherqd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherqd_ymm_k1_vm64z, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		Code code;
		if (Iced::Intel::RegisterExtensions::IsXMM(src1.Index))
		{
			code = Code::VEX_Vpgatherqd_xmm_vm64x_xmm;
		}
		else if (Iced::Intel::RegisterExtensions::IsYMM(src1.Index))
		{
			code = Code::VEX_Vpgatherqd_xmm_vm64y_xmm;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vpgatherqd, dst, src1, src2);
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherqq_xmm_k1_vm64x, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherqq_ymm_k1_vm64y, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpgatherqq_zmm_k1_vm64z, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpgatherqq_xmm_vm64x_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpgatherqq_ymm_vm64y_ymm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vphaddbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddbd_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddbd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddbq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddbq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddbw_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddbw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphadddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphadddq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphadddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphadddq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddsw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddsw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddsw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddsw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddubd_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddubd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddubq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddubq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddubw_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddubw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddudq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddudq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddudq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddudq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphadduwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphadduwd_xmm_xmmm128, dst, src));
	}

	void Assembler::vphadduwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphadduwd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphadduwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphadduwq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphadduwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphadduwq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphaddw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddwd_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddwd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphaddwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddwq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphaddwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphaddwq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphminposuw_xmm_xmmm128, dst, src));
	}

	void Assembler::vphminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphminposuw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphsubbw_xmm_xmmm128, dst, src));
	}

	void Assembler::vphsubbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphsubbw_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphsubdq_xmm_xmmm128, dst, src));
	}

	void Assembler::vphsubdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphsubdq_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubsw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubsw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubsw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubsw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vphsubw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vphsubwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphsubwd_xmm_xmmm128, dst, src));
	}

	void Assembler::vphsubwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vphsubwd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrb_xmm_xmm_r64m8_imm8 : Code::EVEX_Vpinsrb_xmm_xmm_r64m8_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrb_xmm_xmm_r64m8_imm8 : Code::EVEX_Vpinsrb_xmm_xmm_r64m8_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrb_xmm_xmm_r32m8_imm8 : Code::EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrd_xmm_xmm_rm32_imm8 : Code::EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code::EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code::EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code::EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrq_xmm_xmm_rm64_imm8 : Code::EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrw_xmm_xmm_r64m16_imm8 : Code::EVEX_Vpinsrw_xmm_xmm_r64m16_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm));
	}

	void Assembler::vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrw_xmm_xmm_r64m16_imm8 : Code::EVEX_Vpinsrw_xmm_xmm_r64m16_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpinsrw_xmm_xmm_r32m16_imm8 : Code::EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vplzcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntd_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vplzcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntd_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vplzcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntd_zmm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vplzcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntd_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vplzcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntd_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vplzcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntd_zmm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vplzcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vplzcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vplzcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntq_zmm_k1z_zmmm512b64, dst, src), dst.Flags);
	}

	void Assembler::vplzcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vplzcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vplzcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vplzcntq_zmm_k1z_zmmm512b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddubsw_xmm_xmm_xmmm128 : Code::EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddubsw_ymm_ymm_ymmm256 : Code::EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddubsw_xmm_xmm_xmmm128 : Code::EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddubsw_ymm_ymm_ymmm256 : Code::EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddwd_xmm_xmm_xmmm128 : Code::EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddwd_ymm_ymm_ymmm256 : Code::EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddwd_xmm_xmm_xmmm128 : Code::EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaddwd_ymm_ymm_ymmm256 : Code::EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovd_m128_xmm_xmm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovd_m256_ymm_ymm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vpmaskmovd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovd_xmm_xmm_m128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpmaskmovd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovd_ymm_ymm_m256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovq_m128_xmm_xmm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovq_m256_ymm_ymm, dst.ToMemoryOperand(GetBitness()), src1, src2));
	}

	void Assembler::vpmaskmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovq_xmm_xmm_m128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpmaskmovq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmaskmovq_ymm_ymm_m256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsb_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsb_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsb_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsb_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsd_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsd_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsd_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsd_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsw_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsw_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsw_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxsw_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxub_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxub_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxub_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxub_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxud_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxud_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmaxud_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmaxud_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxuw_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxuw_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxuw_xmm_xmm_xmmm128 : Code::EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmaxuw_ymm_ymm_ymmm256 : Code::EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsb_xmm_xmm_xmmm128 : Code::EVEX_Vpminsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsb_ymm_ymm_ymmm256 : Code::EVEX_Vpminsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsb_xmm_xmm_xmmm128 : Code::EVEX_Vpminsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsb_ymm_ymm_ymmm256 : Code::EVEX_Vpminsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsd_xmm_xmm_xmmm128 : Code::EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsd_ymm_ymm_ymmm256 : Code::EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpminsd_xmm_xmm_xmmm128 : Code::EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpminsd_ymm_ymm_ymmm256 : Code::EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsw_xmm_xmm_xmmm128 : Code::EVEX_Vpminsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsw_ymm_ymm_ymmm256 : Code::EVEX_Vpminsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsw_xmm_xmm_xmmm128 : Code::EVEX_Vpminsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminsw_ymm_ymm_ymmm256 : Code::EVEX_Vpminsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminub_xmm_xmm_xmmm128 : Code::EVEX_Vpminub_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminub_ymm_ymm_ymmm256 : Code::EVEX_Vpminub_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminub_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminub_xmm_xmm_xmmm128 : Code::EVEX_Vpminub_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminub_ymm_ymm_ymmm256 : Code::EVEX_Vpminub_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminub_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminud_xmm_xmm_xmmm128 : Code::EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminud_ymm_ymm_ymmm256 : Code::EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpminud_xmm_xmm_xmmm128 : Code::EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpminud_ymm_ymm_ymmm256 : Code::EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminuw_xmm_xmm_xmmm128 : Code::EVEX_Vpminuw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminuw_ymm_ymm_ymmm256 : Code::EVEX_Vpminuw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminuw_xmm_xmm_xmmm128 : Code::EVEX_Vpminuw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpminuw_ymm_ymm_ymmm256 : Code::EVEX_Vpminuw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovb2m_kr_xmm, dst, src));
	}

	void Assembler::vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovb2m_kr_ymm, dst, src));
	}

	void Assembler::vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovb2m_kr_zmm, dst, src));
	}

	void Assembler::vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovd2m_kr_xmm, dst, src));
	}

	void Assembler::vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovd2m_kr_ymm, dst, src));
	}

	void Assembler::vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovd2m_kr_zmm, dst, src));
	}

	void Assembler::vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdb_xmmm32_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdb_xmmm32_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdb_xmmm64_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdb_xmmm64_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdb_xmmm128_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdb_xmmm128_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdw_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdw_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdw_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdw_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdw_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovdw_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovm2b(AssemblerRegisterXMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2b_xmm_kr, dst, src));
	}

	void Assembler::vpmovm2b(AssemblerRegisterYMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2b_ymm_kr, dst, src));
	}

	void Assembler::vpmovm2b(AssemblerRegisterZMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2b_zmm_kr, dst, src));
	}

	void Assembler::vpmovm2d(AssemblerRegisterXMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2d_xmm_kr, dst, src));
	}

	void Assembler::vpmovm2d(AssemblerRegisterYMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2d_ymm_kr, dst, src));
	}

	void Assembler::vpmovm2d(AssemblerRegisterZMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2d_zmm_kr, dst, src));
	}

	void Assembler::vpmovm2q(AssemblerRegisterXMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2q_xmm_kr, dst, src));
	}

	void Assembler::vpmovm2q(AssemblerRegisterYMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2q_ymm_kr, dst, src));
	}

	void Assembler::vpmovm2q(AssemblerRegisterZMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2q_zmm_kr, dst, src));
	}

	void Assembler::vpmovm2w(AssemblerRegisterXMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2w_xmm_kr, dst, src));
	}

	void Assembler::vpmovm2w(AssemblerRegisterYMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2w_ymm_kr, dst, src));
	}

	void Assembler::vpmovm2w(AssemblerRegisterZMM dst, AssemblerRegisterK src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovm2w_zmm_kr, dst, src));
	}

	void Assembler::vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmovmskb_r32_xmm, dst, src));
	}

	void Assembler::vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmovmskb_r64_xmm, dst, src));
	}

	void Assembler::vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmovmskb_r32_ymm, dst, src));
	}

	void Assembler::vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpmovmskb_r64_ymm, dst, src));
	}

	void Assembler::vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovq2m_kr_xmm, dst, src));
	}

	void Assembler::vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovq2m_kr_ymm, dst, src));
	}

	void Assembler::vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovq2m_kr_zmm, dst, src));
	}

	void Assembler::vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqb_xmmm16_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqb_xmmm16_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqb_xmmm32_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqb_xmmm32_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqb_xmmm64_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqb_xmmm64_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqd_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqd_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqd_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqd_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqd_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqd_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqw_xmmm32_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqw_xmmm32_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqw_xmmm64_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqw_xmmm64_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqw_xmmm128_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovqw_xmmm128_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdb_xmmm32_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdb_xmmm32_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdb_xmmm64_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdb_xmmm64_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdb_xmmm128_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdb_xmmm128_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdw_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdw_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdw_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdw_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdw_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsdw_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqb_xmmm16_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqb_xmmm16_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqb_xmmm32_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqb_xmmm32_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqb_xmmm64_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqb_xmmm64_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqd_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqd_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqd_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqd_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqd_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqd_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqw_xmmm32_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqw_xmmm32_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqw_xmmm64_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqw_xmmm64_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqw_xmmm128_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsqw_xmmm128_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovswb_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovswb_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovswb_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovswb_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovswb_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovswb_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbd_xmm_xmmm32 : Code::EVEX_Vpmovsxbd_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbd_ymm_xmmm64 : Code::EVEX_Vpmovsxbd_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxbd_zmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbd_xmm_xmmm32 : Code::EVEX_Vpmovsxbd_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbd_ymm_xmmm64 : Code::EVEX_Vpmovsxbd_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxbd_zmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbq_xmm_xmmm16 : Code::EVEX_Vpmovsxbq_xmm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbq_ymm_xmmm32 : Code::EVEX_Vpmovsxbq_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxbq_zmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbq_xmm_xmmm16 : Code::EVEX_Vpmovsxbq_xmm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbq_ymm_xmmm32 : Code::EVEX_Vpmovsxbq_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxbq_zmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbw_xmm_xmmm64 : Code::EVEX_Vpmovsxbw_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbw_ymm_xmmm128 : Code::EVEX_Vpmovsxbw_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxbw_zmm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbw_xmm_xmmm64 : Code::EVEX_Vpmovsxbw_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxbw_ymm_xmmm128 : Code::EVEX_Vpmovsxbw_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxbw_zmm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxdq_xmm_xmmm64 : Code::EVEX_Vpmovsxdq_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxdq_ymm_xmmm128 : Code::EVEX_Vpmovsxdq_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxdq_zmm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxdq_xmm_xmmm64 : Code::EVEX_Vpmovsxdq_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxdq_ymm_xmmm128 : Code::EVEX_Vpmovsxdq_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxdq_zmm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwd_xmm_xmmm64 : Code::EVEX_Vpmovsxwd_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwd_ymm_xmmm128 : Code::EVEX_Vpmovsxwd_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxwd_zmm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwd_xmm_xmmm64 : Code::EVEX_Vpmovsxwd_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwd_ymm_xmmm128 : Code::EVEX_Vpmovsxwd_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxwd_zmm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwq_xmm_xmmm32 : Code::EVEX_Vpmovsxwq_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwq_ymm_xmmm64 : Code::EVEX_Vpmovsxwq_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxwq_zmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwq_xmm_xmmm32 : Code::EVEX_Vpmovsxwq_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovsxwq_ymm_xmmm64 : Code::EVEX_Vpmovsxwq_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovsxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovsxwq_zmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdb_xmmm32_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdb_xmmm32_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdb_xmmm64_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdb_xmmm64_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdb_xmmm128_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdb_xmmm128_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdw_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdw_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdw_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdw_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdw_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusdw_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqb_xmmm16_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqb_xmmm16_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqb_xmmm32_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqb_xmmm32_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqb_xmmm64_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqb_xmmm64_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqd_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqd_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqd_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqd_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqd_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqd_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqw_xmmm32_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqw_xmmm32_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqw_xmmm64_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqw_xmmm64_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqw_xmmm128_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovusqw_xmmm128_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovuswb_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovuswb_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovuswb_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovuswb_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovuswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovuswb_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovuswb_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovw2m_kr_xmm, dst, src));
	}

	void Assembler::vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovw2m_kr_ymm, dst, src));
	}

	void Assembler::vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovw2m_kr_zmm, dst, src));
	}

	void Assembler::vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovwb_xmmm64_k1z_xmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovwb_xmmm64_k1z_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovwb_xmmm128_k1z_ymm, dst, src), dst.Flags);
	}

	void Assembler::vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovwb_xmmm128_k1z_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovwb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovwb_ymmm256_k1z_zmm, dst, src), dst.Flags);
	}

	void Assembler::vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovwb_ymmm256_k1z_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbd_xmm_xmmm32 : Code::EVEX_Vpmovzxbd_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbd_ymm_xmmm64 : Code::EVEX_Vpmovzxbd_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxbd_zmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbd_xmm_xmmm32 : Code::EVEX_Vpmovzxbd_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbd_ymm_xmmm64 : Code::EVEX_Vpmovzxbd_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxbd_zmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbq_xmm_xmmm16 : Code::EVEX_Vpmovzxbq_xmm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbq_ymm_xmmm32 : Code::EVEX_Vpmovzxbq_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxbq_zmm_k1z_xmmm64, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbq_xmm_xmmm16 : Code::EVEX_Vpmovzxbq_xmm_k1z_xmmm16;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbq_ymm_xmmm32 : Code::EVEX_Vpmovzxbq_ymm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxbq_zmm_k1z_xmmm64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbw_xmm_xmmm64 : Code::EVEX_Vpmovzxbw_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbw_ymm_xmmm128 : Code::EVEX_Vpmovzxbw_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxbw_zmm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbw_xmm_xmmm64 : Code::EVEX_Vpmovzxbw_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxbw_ymm_xmmm128 : Code::EVEX_Vpmovzxbw_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxbw_zmm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxdq_xmm_xmmm64 : Code::EVEX_Vpmovzxdq_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxdq_ymm_xmmm128 : Code::EVEX_Vpmovzxdq_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxdq_zmm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxdq_xmm_xmmm64 : Code::EVEX_Vpmovzxdq_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxdq_ymm_xmmm128 : Code::EVEX_Vpmovzxdq_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxdq_zmm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwd_xmm_xmmm64 : Code::EVEX_Vpmovzxwd_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwd_ymm_xmmm128 : Code::EVEX_Vpmovzxwd_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxwd_zmm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwd_xmm_xmmm64 : Code::EVEX_Vpmovzxwd_xmm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwd_ymm_xmmm128 : Code::EVEX_Vpmovzxwd_ymm_k1z_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxwd_zmm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwq_xmm_xmmm32 : Code::EVEX_Vpmovzxwq_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwq_ymm_xmmm64 : Code::EVEX_Vpmovzxwq_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxwq_zmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwq_xmm_xmmm32 : Code::EVEX_Vpmovzxwq_xmm_k1z_xmmm32;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmovzxwq_ymm_xmmm64 : Code::EVEX_Vpmovzxwq_ymm_k1z_xmmm64;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmovzxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmovzxwq_zmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmuldq_xmm_xmm_xmmm128 : Code::EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmuldq_ymm_ymm_ymmm256 : Code::EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmuldq_xmm_xmm_xmmm128 : Code::EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmuldq_ymm_ymm_ymmm256 : Code::EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhrsw_xmm_xmm_xmmm128 : Code::EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhrsw_ymm_ymm_ymmm256 : Code::EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhrsw_xmm_xmm_xmmm128 : Code::EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhrsw_ymm_ymm_ymmm256 : Code::EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhuw_xmm_xmm_xmmm128 : Code::EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhuw_ymm_ymm_ymmm256 : Code::EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhuw_xmm_xmm_xmmm128 : Code::EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhuw_ymm_ymm_ymmm256 : Code::EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhw_xmm_xmm_xmmm128 : Code::EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhw_ymm_ymm_ymmm256 : Code::EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhw_xmm_xmm_xmmm128 : Code::EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulhw_ymm_ymm_ymmm256 : Code::EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulld_xmm_xmm_xmmm128 : Code::EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmulld_ymm_ymm_ymmm256 : Code::EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmulld_xmm_xmm_xmmm128 : Code::EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmulld_ymm_ymm_ymmm256 : Code::EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmullw_xmm_xmm_xmmm128 : Code::EVEX_Vpmullw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmullw_ymm_ymm_ymmm256 : Code::EVEX_Vpmullw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmullw_xmm_xmm_xmmm128 : Code::EVEX_Vpmullw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmullw_ymm_ymm_ymmm256 : Code::EVEX_Vpmullw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmuludq_xmm_xmm_xmmm128 : Code::EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpmuludq_ymm_ymm_ymmm256 : Code::EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmuludq_xmm_xmm_xmmm128 : Code::EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpmuludq_ymm_ymm_ymmm256 : Code::EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpopcntb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntb_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpopcntb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntb_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpopcntb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntb_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpopcntb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntb_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpopcntb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntb_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpopcntb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntb_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpopcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntd_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vpopcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntd_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vpopcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntd_zmm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vpopcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntd_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpopcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntd_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpopcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntd_zmm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpopcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntq_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vpopcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntq_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vpopcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntq_zmm_k1z_zmmm512b64, dst, src), dst.Flags);
	}

	void Assembler::vpopcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntq_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpopcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntq_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpopcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntq_zmm_k1z_zmmm512b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vpopcntw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntw_xmm_k1z_xmmm128, dst, src), dst.Flags);
	}

	void Assembler::vpopcntw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntw_ymm_k1z_ymmm256, dst, src), dst.Flags);
	}

	void Assembler::vpopcntw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntw_zmm_k1z_zmmm512, dst, src), dst.Flags);
	}

	void Assembler::vpopcntw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntw_xmm_k1z_xmmm128, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpopcntw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntw_ymm_k1z_ymmm256, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpopcntw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpopcntw_zmm_k1z_zmmm512, dst, src.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpor_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpor_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpor_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpor_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpperm_xmm_xmm_xmmm128_xmm, dst, src1, src2, src3));
	}

	void Assembler::vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpperm_xmm_xmm_xmmm128_xmm, dst, src1, src2.ToMemoryOperand(GetBitness()), src3));
	}

	void Assembler::vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpperm_xmm_xmm_xmm_xmmm128, dst, src1, src2, src3.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotb_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vprotw_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsadbw_xmm_xmm_xmmm128 : Code::EVEX_Vpsadbw_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsadbw_ymm_ymm_ymmm256 : Code::EVEX_Vpsadbw_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2));
	}

	void Assembler::vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsadbw_zmm_zmm_zmmm512, dst, src1, src2));
	}

	void Assembler::vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsadbw_xmm_xmm_xmmm128 : Code::EVEX_Vpsadbw_xmm_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsadbw_ymm_ymm_ymmm256 : Code::EVEX_Vpsadbw_ymm_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsadbw_zmm_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterdd_vm32x_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterdd_vm32y_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterdd_vm32z_k1_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterdq_vm32x_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterdq_vm32x_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterdq_vm32y_k1_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		if (Iced::Intel::RegisterExtensions::IsXMM(dst.Index))
		{
			code = Code::EVEX_Vpscatterqd_vm64x_k1_xmm;
		}
		else if (Iced::Intel::RegisterExtensions::IsYMM(dst.Index))
		{
			code = Code::EVEX_Vpscatterqd_vm64y_k1_xmm;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vpscatterqd, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterqd_vm64z_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterqq_vm64x_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterqq_vm64y_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpscatterqq_vm64z_k1_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshab_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshab(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshab_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshab_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshad_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshad_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshad_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshaq_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshaq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshaq_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshaq_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshaw_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshaw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshaw_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshaw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlb_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshlb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlb_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlb_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshld_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshld_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshld_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlq_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlq_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlq_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlw_xmm_xmmm128_xmm, dst, src1, src2));
	}

	void Assembler::vpshlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlw_xmm_xmmm128_xmm, dst, src1.ToMemoryOperand(GetBitness()), src2));
	}

	void Assembler::vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::XOP_Vpshlw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufb_xmm_xmm_xmmm128 : Code::EVEX_Vpshufb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufb_ymm_ymm_ymmm256 : Code::EVEX_Vpshufb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufb_xmm_xmm_xmmm128 : Code::EVEX_Vpshufb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufb_ymm_ymm_ymmm256 : Code::EVEX_Vpshufb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_xmm_xmmm128_imm8 : Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_ymm_ymmm256_imm8 : Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_xmm_xmmm128_imm8 : Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_ymm_ymmm256_imm8 : Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_xmm_xmmm128_imm8 : Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_ymm_ymmm256_imm8 : Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_xmm_xmmm128_imm8 : Code::EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		if (src1.IsBroadcast())
		{
			code = Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpshufd_ymm_ymmm256_imm8 : Code::EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_xmm_xmmm128_imm8 : Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_ymm_ymmm256_imm8 : Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_xmm_xmmm128_imm8 : Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_ymm_ymmm256_imm8 : Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_xmm_xmmm128_imm8 : Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_ymm_ymmm256_imm8 : Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_xmm_xmmm128_imm8 : Code::EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshufhw_ymm_ymmm256_imm8 : Code::EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_xmm_xmmm128_imm8 : Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_ymm_ymmm256_imm8 : Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_xmm_xmmm128_imm8 : Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_ymm_ymmm256_imm8 : Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_xmm_xmmm128_imm8 : Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_ymm_ymmm256_imm8 : Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_xmm_xmmm128_imm8 : Code::EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpshuflw_ymm_ymmm256_imm8 : Code::EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignb_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignb_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignb_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignb_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignd_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignd_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignd_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignd_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignw_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignw_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignw_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpsignw_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_xmm_xmm_xmmm128 : Code::EVEX_Vpslld_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_ymm_ymm_xmmm128 : Code::EVEX_Vpslld_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_xmm_xmm_xmmm128 : Code::EVEX_Vpslld_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_ymm_ymm_xmmm128 : Code::EVEX_Vpslld_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_xmm_xmm_imm8 : Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_ymm_ymm_imm8 : Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_xmm_xmm_imm8 : Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslld_ymm_ymm_imm8 : Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslldq_xmm_xmm_imm8 : Code::EVEX_Vpslldq_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslldq_ymm_ymm_imm8 : Code::EVEX_Vpslldq_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, dst, src1, imm));
	}

	void Assembler::vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslldq_xmm_xmm_imm8 : Code::EVEX_Vpslldq_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpslldq_ymm_ymm_imm8 : Code::EVEX_Vpslldq_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpslldq_zmm_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_xmm_xmm_xmmm128 : Code::EVEX_Vpsllq_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_ymm_ymm_xmmm128 : Code::EVEX_Vpsllq_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_xmm_xmm_xmmm128 : Code::EVEX_Vpsllq_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_ymm_ymm_xmmm128 : Code::EVEX_Vpsllq_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_xmm_xmm_imm8 : Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_ymm_ymm_imm8 : Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_xmm_xmm_imm8 : Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllq_ymm_ymm_imm8 : Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllvd_xmm_xmm_xmmm128 : Code::EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllvd_ymm_ymm_ymmm256 : Code::EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsllvd_xmm_xmm_xmmm128 : Code::EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsllvd_ymm_ymm_ymmm256 : Code::EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllvq_xmm_xmm_xmmm128 : Code::EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllvq_ymm_ymm_ymmm256 : Code::EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsllvq_xmm_xmm_xmmm128 : Code::EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsllvq_ymm_ymm_ymmm256 : Code::EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_xmm_xmm_xmmm128 : Code::EVEX_Vpsllw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_ymm_ymm_xmmm128 : Code::EVEX_Vpsllw_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_xmm_xmm_xmmm128 : Code::EVEX_Vpsllw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_ymm_ymm_xmmm128 : Code::EVEX_Vpsllw_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_xmm_xmm_imm8 : Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_ymm_ymm_imm8 : Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_xmm_xmm_imm8 : Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsllw_ymm_ymm_imm8 : Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_xmm_xmm_xmmm128 : Code::EVEX_Vpsrad_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_ymm_ymm_xmmm128 : Code::EVEX_Vpsrad_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_xmm_xmm_xmmm128 : Code::EVEX_Vpsrad_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_ymm_ymm_xmmm128 : Code::EVEX_Vpsrad_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_xmm_xmm_imm8 : Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_ymm_ymm_imm8 : Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_xmm_xmm_imm8 : Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrad_ymm_ymm_imm8 : Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsravd_xmm_xmm_xmmm128 : Code::EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsravd_ymm_ymm_ymmm256 : Code::EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsravd_xmm_xmm_xmmm128 : Code::EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsravd_ymm_ymm_ymmm256 : Code::EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_xmm_xmm_xmmm128 : Code::EVEX_Vpsraw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_ymm_ymm_xmmm128 : Code::EVEX_Vpsraw_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_xmm_xmm_xmmm128 : Code::EVEX_Vpsraw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_ymm_ymm_xmmm128 : Code::EVEX_Vpsraw_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_xmm_xmm_imm8 : Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_ymm_ymm_imm8 : Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_xmm_xmm_imm8 : Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsraw_ymm_ymm_imm8 : Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_xmm_xmm_xmmm128 : Code::EVEX_Vpsrld_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_ymm_ymm_xmmm128 : Code::EVEX_Vpsrld_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_xmm_xmm_xmmm128 : Code::EVEX_Vpsrld_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_ymm_ymm_xmmm128 : Code::EVEX_Vpsrld_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_xmm_xmm_imm8 : Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_ymm_ymm_imm8 : Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_xmm_xmm_imm8 : Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrld_ymm_ymm_imm8 : Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrldq_xmm_xmm_imm8 : Code::EVEX_Vpsrldq_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrldq_ymm_ymm_imm8 : Code::EVEX_Vpsrldq_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm));
	}

	void Assembler::vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, dst, src1, imm));
	}

	void Assembler::vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrldq_xmm_xmm_imm8 : Code::EVEX_Vpsrldq_xmm_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrldq_ymm_ymm_imm8 : Code::EVEX_Vpsrldq_ymm_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrldq_zmm_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_ymm_ymm_xmmm128 : Code::EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_ymm_ymm_xmmm128 : Code::EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_xmm_xmm_imm8 : Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_ymm_ymm_imm8 : Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_xmm_xmm_imm8 : Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlq_ymm_ymm_imm8 : Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvd_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvd_ymm_ymm_ymmm256 : Code::EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvd_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvd_ymm_ymm_ymmm256 : Code::EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvq_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvq_ymm_ymm_ymmm256 : Code::EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvq_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsrlvq_ymm_ymm_ymmm256 : Code::EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_ymm_ymm_xmmm128 : Code::EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_xmm_xmm_xmmm128 : Code::EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_ymm_ymm_xmmm128 : Code::EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_xmm_xmm_imm8 : Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_ymm_ymm_imm8 : Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_xmm_xmm_imm8 : Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsrlw_ymm_ymm_imm8 : Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubb_xmm_xmm_xmmm128 : Code::EVEX_Vpsubb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubb_ymm_ymm_ymmm256 : Code::EVEX_Vpsubb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubb_xmm_xmm_xmmm128 : Code::EVEX_Vpsubb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubb_ymm_ymm_ymmm256 : Code::EVEX_Vpsubb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubd_xmm_xmm_xmmm128 : Code::EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubd_ymm_ymm_ymmm256 : Code::EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsubd_xmm_xmm_xmmm128 : Code::EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsubd_ymm_ymm_ymmm256 : Code::EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubq_xmm_xmm_xmmm128 : Code::EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubq_ymm_ymm_ymmm256 : Code::EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsubq_xmm_xmm_xmmm128 : Code::EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpsubq_ymm_ymm_ymmm256 : Code::EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsb_xmm_xmm_xmmm128 : Code::EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsb_ymm_ymm_ymmm256 : Code::EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsb_xmm_xmm_xmmm128 : Code::EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsb_ymm_ymm_ymmm256 : Code::EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsw_xmm_xmm_xmmm128 : Code::EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsw_ymm_ymm_ymmm256 : Code::EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsw_xmm_xmm_xmmm128 : Code::EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubsw_ymm_ymm_ymmm256 : Code::EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusb_xmm_xmm_xmmm128 : Code::EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusb_ymm_ymm_ymmm256 : Code::EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusb_xmm_xmm_xmmm128 : Code::EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusb_ymm_ymm_ymmm256 : Code::EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusw_xmm_xmm_xmmm128 : Code::EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusw_ymm_ymm_ymmm256 : Code::EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusw_xmm_xmm_xmmm128 : Code::EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubusw_ymm_ymm_ymmm256 : Code::EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubw_xmm_xmm_xmmm128 : Code::EVEX_Vpsubw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubw_ymm_ymm_ymmm256 : Code::EVEX_Vpsubw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubw_xmm_xmm_xmmm128 : Code::EVEX_Vpsubw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpsubw_ymm_ymm_ymmm256 : Code::EVEX_Vpsubw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vptest_xmm_xmmm128, dst, src));
	}

	void Assembler::vptest(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vptest_ymm_ymmm256, dst, src));
	}

	void Assembler::vptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vptest_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vptest(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vptest_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmb_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmb_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmb_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmb_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmb_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmb_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmw_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmw_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmw_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmw_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmw_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestmw_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmb_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmb_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmb_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmb_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmb_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmb_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmw_kr_k1_xmm_xmmm128, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmw_kr_k1_ymm_ymmm256, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmw_kr_k1_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmw_kr_k1_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmw_kr_k1_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vptestnmw_kr_k1_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhbw_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhbw_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhbw_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhbw_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhdq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhdq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhdq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhdq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhqdq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhqdq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhqdq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhqdq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhwd_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhwd_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhwd_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckhwd_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklbw_xmm_xmm_xmmm128 : Code::EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklbw_ymm_ymm_ymmm256 : Code::EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklbw_xmm_xmm_xmmm128 : Code::EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklbw_ymm_ymm_ymmm256 : Code::EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckldq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpckldq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpckldq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpckldq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklqdq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklqdq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklqdq_xmm_xmm_xmmm128 : Code::EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklqdq_ymm_ymm_ymmm256 : Code::EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklwd_xmm_xmm_xmmm128 : Code::EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklwd_ymm_ymm_ymmm256 : Code::EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklwd_xmm_xmm_xmmm128 : Code::EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vpunpcklwd_ymm_ymm_ymmm256 : Code::EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpxor_xmm_xmm_xmmm128, dst, src1, src2));
	}

	void Assembler::vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpxor_ymm_ymm_ymmm256, dst, src1, src2));
	}

	void Assembler::vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpxor_xmm_xmm_xmmm128, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vpxor_ymm_ymm_ymmm256, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrcp14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vrcp14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vrcp14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, dst, src), dst.Flags);
	}

	void Assembler::vrcp14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vrcp14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vrcp14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vrcp14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vrcp28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vrcp28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vrcp28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vrcpph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpph_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vrcpph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpph_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vrcpph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpph_zmm_k1z_zmmm512b16, dst, src), dst.Flags);
	}

	void Assembler::vrcpph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpph_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcpph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpph_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcpph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpph_zmm_k1z_zmmm512b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrcpps_xmm_xmmm128, dst, src));
	}

	void Assembler::vrcpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrcpps_ymm_ymmm256, dst, src));
	}

	void Assembler::vrcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrcpps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vrcpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrcpps_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vrcpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vrcpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrcpss_xmm_xmm_xmmm32, dst, src1, src2));
	}

	void Assembler::vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrcpss_xmm_xmm_xmmm32, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, dst, src1, imm), dst.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1, imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), imm), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1, static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src1.Flags);
	}

	void Assembler::vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_ymm_ymmm256_imm8, dst, src1, imm));
	}

	void Assembler::vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_ymm_ymmm256_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundpd_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_xmm_xmmm128_imm8, dst, src1, imm));
	}

	void Assembler::vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_ymm_ymmm256_imm8, dst, src1, imm));
	}

	void Assembler::vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_xmm_xmmm128_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_ymm_ymmm256_imm8, dst, src1, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_xmm_xmmm128_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundps_ymm_ymmm256_imm8, dst, src1.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, dst, src1, src2, imm));
	}

	void Assembler::vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundsd_xmm_xmm_xmmm64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, dst, src1, src2, imm));
	}

	void Assembler::vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vroundss_xmm_xmm_xmmm32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)));
	}

	void Assembler::vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, dst, src), dst.Flags);
	}

	void Assembler::vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, dst, src), dst.Flags);
	}

	void Assembler::vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, dst, src), dst.Flags);
	}

	void Assembler::vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, dst, src), dst.Flags);
	}

	void Assembler::vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, dst, src), dst.Flags);
	}

	void Assembler::vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, dst, src), dst.Flags);
	}

	void Assembler::vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vrsqrtph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtph_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vrsqrtph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtph_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vrsqrtph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtph_zmm_k1z_zmmm512b16, dst, src), dst.Flags);
	}

	void Assembler::vrsqrtph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtph_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrtph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtph_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrtph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtph_zmm_k1z_zmmm512b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vrsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrsqrtps_xmm_xmmm128, dst, src));
	}

	void Assembler::vrsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrsqrtps_ymm_ymmm256, dst, src));
	}

	void Assembler::vrsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrsqrtps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vrsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrsqrtps_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vrsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vrsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrsqrtss_xmm_xmm_xmmm32, dst, src1, src2));
	}

	void Assembler::vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vrsqrtss_xmm_xmm_xmmm32, dst, src1, src2.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vscalefph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vscalefph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterdpd_vm32x_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterdpd_vm32x_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterdpd_vm32y_k1_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterdps_vm32x_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterdps_vm32y_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterdps_vm32z_k1_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterpf0dpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf0dpd_vm32y_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf0dps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf0dps_vm32z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf0qpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf0qpd_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf0qps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf0qps_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf1dpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf1dpd_vm32y_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf1dps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf1dps_vm32z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf1qpd(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf1qpd_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterpf1qps(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterpf1qps_vm64z_k1, dst.ToMemoryOperand(GetBitness())), dst.Flags);
	}

	void Assembler::vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterqpd_vm64x_k1_xmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterqpd_vm64y_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterqpd_vm64z_k1_zmm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src)
	{
		Code code;
		if (Iced::Intel::RegisterExtensions::IsXMM(dst.Index))
		{
			code = Code::EVEX_Vscatterqps_vm64x_k1_xmm;
		}
		else if (Iced::Intel::RegisterExtensions::IsYMM(dst.Index))
		{
			code = Code::EVEX_Vscatterqps_vm64y_k1_xmm;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Vscatterqps, dst, src);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vscatterqps_vm64z_k1_ymm, dst.ToMemoryOperand(GetBitness()), src), dst.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufpd_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::int8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, imm), dst.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), imm), dst.Flags | src2.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, std::uint8_t imm)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
		AddInstruction(Instruction::Create(code, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2, static_cast<std::uint32_t>(imm)), dst.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufps_xmm_xmm_xmmm128_imm8 : Code::EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vshufps_ymm_ymm_ymmm256_imm8 : Code::EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, dst, src1, src2.ToMemoryOperand(GetBitness()), static_cast<std::uint32_t>(imm)), dst.Flags | src2.Flags);
	}

	void Assembler::vsqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtpd_xmm_xmmm128 : Code::EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vsqrtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtpd_ymm_ymmm256 : Code::EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vsqrtpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsqrtpd_xmm_xmmm128 : Code::EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsqrtpd_ymm_ymmm256 : Code::EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtph_xmm_k1z_xmmm128b16, dst, src), dst.Flags);
	}

	void Assembler::vsqrtph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtph_ymm_k1z_ymmm256b16, dst, src), dst.Flags);
	}

	void Assembler::vsqrtph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtph_xmm_k1z_xmmm128b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtph_ymm_k1z_ymmm256b16, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtps_xmm_xmmm128 : Code::EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtps_ymm_ymmm256 : Code::EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src), dst.Flags);
	}

	void Assembler::vsqrtps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, dst, src), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsqrtps_xmm_xmmm128 : Code::EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		if (src.IsBroadcast())
		{
			code = Code::EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsqrtps_ymm_ymmm256 : Code::EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, dst, src.ToMemoryOperand(GetBitness())), dst.Flags | src.Flags);
	}

	void Assembler::vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtsd_xmm_xmm_xmmm64 : Code::EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtsd_xmm_xmm_xmmm64 : Code::EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtss_xmm_xmm_xmmm32 : Code::EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsqrtss_xmm_xmm_xmmm32 : Code::EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vstmxcsr(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vstmxcsr_m32, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubpd_xmm_xmm_xmmm128 : Code::EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubpd_ymm_ymm_ymmm256 : Code::EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsubpd_xmm_xmm_xmmm128 : Code::EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsubpd_ymm_ymm_ymmm256 : Code::EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vsubph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2), dst.Flags);
	}

	void Assembler::vsubph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsubph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubps_xmm_xmm_xmmm128 : Code::EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubps_ymm_ymm_ymmm256 : Code::EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsubps_xmm_xmm_xmmm128 : Code::EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vsubps_ymm_ymm_ymmm256 : Code::EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubsd_xmm_xmm_xmmm64 : Code::EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubsd_xmm_xmm_xmmm64 : Code::EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsubsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubss_xmm_xmm_xmmm32 : Code::EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags | src2.Flags);
	}

	void Assembler::vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vsubss_xmm_xmm_xmmm32 : Code::EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er;
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vtestpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestpd_xmm_xmmm128, dst, src));
	}

	void Assembler::vtestpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestpd_ymm_ymmm256, dst, src));
	}

	void Assembler::vtestpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vtestpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestpd_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vtestps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestps_xmm_xmmm128, dst, src));
	}

	void Assembler::vtestps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestps_ymm_ymmm256, dst, src));
	}

	void Assembler::vtestps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vtestps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::VEX_Vtestps_ymm_ymmm256, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::vucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vucomisd_xmm_xmmm64 : Code::EVEX_Vucomisd_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vucomisd_xmm_xmmm64 : Code::EVEX_Vucomisd_xmm_xmmm64_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vucomish(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vucomish_xmm_xmmm16_sae, dst, src), src.Flags);
	}

	void Assembler::vucomish(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vucomish_xmm_xmmm16_sae, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vucomiss_xmm_xmmm32 : Code::EVEX_Vucomiss_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src), src.Flags);
	}

	void Assembler::vucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vucomiss_xmm_xmmm32 : Code::EVEX_Vucomiss_xmm_xmmm32_sae;
		AddInstruction(Instruction::Create(code, dst, src.ToMemoryOperand(GetBitness())), src.Flags);
	}

	void Assembler::vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpckhpd_xmm_xmm_xmmm128 : Code::EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpckhpd_ymm_ymm_ymmm256 : Code::EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpckhpd_xmm_xmm_xmmm128 : Code::EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpckhpd_ymm_ymm_ymmm256 : Code::EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpckhps_xmm_xmm_xmmm128 : Code::EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpckhps_ymm_ymm_ymmm256 : Code::EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpckhps_xmm_xmm_xmmm128 : Code::EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpckhps_ymm_ymm_ymmm256 : Code::EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpcklpd_xmm_xmm_xmmm128 : Code::EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpcklpd_ymm_ymm_ymmm256 : Code::EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpcklpd_xmm_xmm_xmmm128 : Code::EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpcklpd_ymm_ymm_ymmm256 : Code::EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpcklps_xmm_xmm_xmmm128 : Code::EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vunpcklps_ymm_ymm_ymmm256 : Code::EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpcklps_xmm_xmm_xmmm128 : Code::EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vunpcklps_ymm_ymm_ymmm256 : Code::EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vxorpd_xmm_xmm_xmmm128 : Code::EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vxorpd_ymm_ymm_ymmm256 : Code::EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2), dst.Flags);
	}

	void Assembler::vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vxorpd_xmm_xmm_xmmm128 : Code::EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vxorpd_ymm_ymm_ymmm256 : Code::EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vxorps_xmm_xmm_xmmm128 : Code::EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2)
	{
		Code code;
		code = GetInstructionPreferVex() ? Code::VEX_Vxorps_ymm_ymm_ymmm256 : Code::EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
		AddInstruction(Instruction::Create(code, dst, src1, src2), dst.Flags);
	}

	void Assembler::vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2), dst.Flags);
	}

	void Assembler::vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vxorps_xmm_xmm_xmmm128 : Code::EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2)
	{
		Code code;
		if (src2.IsBroadcast())
		{
			code = Code::EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
		}
		else
		{
			code = GetInstructionPreferVex() ? Code::VEX_Vxorps_ymm_ymm_ymmm256 : Code::EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
		}
		AddInstruction(Instruction::Create(code, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2)
	{
		AddInstruction(Instruction::Create(Code::EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, dst, src1, src2.ToMemoryOperand(GetBitness())), dst.Flags | src2.Flags);
	}

	void Assembler::vzeroall()
	{
		AddInstruction(Instruction::Create(Code::VEX_Vzeroall));
	}

	void Assembler::vzeroupper()
	{
		AddInstruction(Instruction::Create(Code::VEX_Vzeroupper));
	}

	void Assembler::wait()
	{
		AddInstruction(Instruction::Create(Code::Wait));
	}

	void Assembler::wbinvd()
	{
		AddInstruction(Instruction::Create(Code::Wbinvd));
	}

	void Assembler::wbnoinvd()
	{
		AddInstruction(Instruction::Create(Code::Wbnoinvd));
	}

	void Assembler::wrfsbase(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Wrfsbase_r32, dst));
	}

	void Assembler::wrfsbase(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Wrfsbase_r64, dst));
	}

	void Assembler::wrgsbase(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Wrgsbase_r32, dst));
	}

	void Assembler::wrgsbase(AssemblerRegister64 dst)
	{
		AddInstruction(Instruction::Create(Code::Wrgsbase_r64, dst));
	}

	void Assembler::wrmsr()
	{
		AddInstruction(Instruction::Create(Code::Wrmsr));
	}

	void Assembler::wrpkru()
	{
		AddInstruction(Instruction::Create(Code::Wrpkru));
	}

	void Assembler::wrshr(AssemblerRegister32 dst)
	{
		AddInstruction(Instruction::Create(Code::Wrshr_rm32, dst));
	}

	void Assembler::wrshr(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Wrshr_rm32, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::wrssd(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Wrssd_m32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::wrssq(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Wrssq_m64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::wrudbg()
	{
		AddInstruction(Instruction::Create(Code::Wrudbg));
	}

	void Assembler::wrussd(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Wrussd_m32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::wrussq(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Wrussq_m64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xabort(std::int8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Xabort_imm8, imm));
	}

	void Assembler::xabort(std::uint8_t imm)
	{
		AddInstruction(Instruction::Create(Code::Xabort_imm8, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::xadd(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm8_r8, dst, src));
	}

	void Assembler::xadd(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xadd(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm16_r16, dst, src));
	}

	void Assembler::xadd(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xadd(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm32_r32, dst, src));
	}

	void Assembler::xadd(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xadd(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm64_r64, dst, src));
	}

	void Assembler::xadd(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Xadd_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xbegin(Iced::Intel::Label dst)
	{
		AddInstruction(Instruction::CreateXbegin(GetBitness(), dst.Id));
	}

	void Assembler::xbegin(std::uint64_t dst)
	{
		AddInstruction(Instruction::CreateXbegin(GetBitness(), dst));
	}

	void Assembler::xbts(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Xbts_r16_rm16, dst, src));
	}

	void Assembler::xbts(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Xbts_r32_rm32, dst, src));
	}

	void Assembler::xbts(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xbts_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xbts(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xbts_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xchg(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Xchg_rm8_r8, dst, src));
	}

	void Assembler::xchg(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Xchg_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xchg(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		Code code;
		code = src == Register::AX ? Code::Xchg_r16_AX : Code::Xchg_rm16_r16;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::xchg(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Xchg_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xchg(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		Code code;
		code = src == Register::EAX ? Code::Xchg_r32_EAX : Code::Xchg_rm32_r32;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::xchg(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Xchg_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xchg(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		Code code;
		code = src == Register::RAX ? Code::Xchg_r64_RAX : Code::Xchg_rm64_r64;
		AddInstruction(Instruction::Create(code, dst, src));
	}

	void Assembler::xchg(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Xchg_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xcryptcbc()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xcryptcbc_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xcryptcbc_32 : Code::Xcryptcbc_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xcryptcfb()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xcryptcfb_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xcryptcfb_32 : Code::Xcryptcfb_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xcryptctr()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xcryptctr_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xcryptctr_32 : Code::Xcryptctr_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xcryptecb()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xcryptecb_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xcryptecb_32 : Code::Xcryptecb_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xcryptofb()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xcryptofb_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xcryptofb_32 : Code::Xcryptofb_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xend()
	{
		AddInstruction(Instruction::Create(Code::Xend));
	}

	void Assembler::xgetbv()
	{
		AddInstruction(Instruction::Create(Code::Xgetbv));
	}

	void Assembler::xor_(AssemblerRegister8 dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm8_r8, dst, src));
	}

	void Assembler::xor_(AssemblerMemoryOperand dst, AssemblerRegister8 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm8_r8, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xor_(AssemblerRegister16 dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm16_r16, dst, src));
	}

	void Assembler::xor_(AssemblerMemoryOperand dst, AssemblerRegister16 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm16_r16, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xor_(AssemblerRegister32 dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm32_r32, dst, src));
	}

	void Assembler::xor_(AssemblerMemoryOperand dst, AssemblerRegister32 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm32_r32, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xor_(AssemblerRegister64 dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm64_r64, dst, src));
	}

	void Assembler::xor_(AssemblerMemoryOperand dst, AssemblerRegister64 src)
	{
		AddInstruction(Instruction::Create(Code::Xor_rm64_r64, dst.ToMemoryOperand(GetBitness()), src));
	}

	void Assembler::xor_(AssemblerRegister8 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xor_r8_rm8, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xor_(AssemblerRegister16 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xor_r16_rm16, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xor_(AssemblerRegister32 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xor_r32_rm32, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xor_(AssemblerRegister64 dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xor_r64_rm64, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xor_(AssemblerRegister8 dst, std::int8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Xor_AL_imm8 : Code::Xor_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::xor_(AssemblerRegister16 dst, std::int16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Xor_AX_imm16;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Xor_rm16_imm8 : Code::Xor_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::xor_(AssemblerRegister32 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Xor_EAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Xor_rm32_imm8 : Code::Xor_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::xor_(AssemblerRegister64 dst, std::int32_t imm)
	{
		Code code;
		if (dst == Register::RAX)
		{
			code = Code::Xor_RAX_imm32;
		}
		else
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Xor_rm64_imm8 : Code::Xor_rm64_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::xor_(AssemblerMemoryOperand dst, std::int32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Qword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Xor_rm64_imm8 : Code::Xor_rm64_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Xor_rm32_imm8 : Code::Xor_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm >= std::numeric_limits<std::int8_t>::min() && imm <= std::numeric_limits<std::int8_t>::max() ? Code::Xor_rm16_imm8 : Code::Xor_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Xor_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Xor, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::xor_(AssemblerRegister8 dst, std::uint8_t imm)
	{
		Code code;
		code = dst == Register::AL ? Code::Xor_AL_imm8 : Code::Xor_rm8_imm8;
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::xor_(AssemblerRegister16 dst, std::uint16_t imm)
	{
		Code code;
		if (dst == Register::AX)
		{
			code = Code::Xor_AX_imm16;
		}
		else
		{
			code = imm <= static_cast<std::uint16_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Xor_rm16_imm8 : Code::Xor_rm16_imm16;
		}
		AddInstruction(Instruction::Create(code, dst, static_cast<std::uint32_t>(imm)));
	}

	void Assembler::xor_(AssemblerRegister32 dst, std::uint32_t imm)
	{
		Code code;
		if (dst == Register::EAX)
		{
			code = Code::Xor_EAX_imm32;
		}
		else
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Xor_rm32_imm8 : Code::Xor_rm32_imm32;
		}
		AddInstruction(Instruction::Create(code, dst, imm));
	}

	void Assembler::xor_(AssemblerMemoryOperand dst, std::uint32_t imm)
	{
		Code code;
		if (dst.Size == MemoryOperandSize::Dword)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || 0xFFFF'FF80 <= imm ? Code::Xor_rm32_imm8 : Code::Xor_rm32_imm32;
		}
		else if (dst.Size == MemoryOperandSize::Word)
		{
			code = imm <= static_cast<std::uint32_t>(std::numeric_limits<std::int8_t>::max()) || (0xFF80 <= imm && imm <= 0xFFFF) ? Code::Xor_rm16_imm8 : Code::Xor_rm16_imm16;
		}
		else if (dst.Size == MemoryOperandSize::Byte)
		{
			code = Code::Xor_rm8_imm8;
		}
		else
		{
			throw NoOpCodeFoundFor(Mnemonic::Xor, dst, imm);
		}
		AddInstruction(Instruction::Create(code, dst.ToMemoryOperand(GetBitness()), imm));
	}

	void Assembler::xorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Xorpd_xmm_xmmm128, dst, src));
	}

	void Assembler::xorpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xorpd_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src)
	{
		AddInstruction(Instruction::Create(Code::Xorps_xmm_xmmm128, dst, src));
	}

	void Assembler::xorps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src)
	{
		AddInstruction(Instruction::Create(Code::Xorps_xmm_xmmm128, dst, src.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xresldtrk()
	{
		AddInstruction(Instruction::Create(Code::Xresldtrk));
	}

	void Assembler::xrstor(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xrstor_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xrstor64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xrstor64_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xrstors(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xrstors_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xrstors64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xrstors64_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsave(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsave_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsave64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsave64_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsavec(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsavec_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsavec64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsavec64_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsaveopt(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsaveopt_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsaveopt64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsaveopt64_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsaves(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsaves_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsaves64(AssemblerMemoryOperand dst)
	{
		AddInstruction(Instruction::Create(Code::Xsaves64_mem, dst.ToMemoryOperand(GetBitness())));
	}

	void Assembler::xsetbv()
	{
		AddInstruction(Instruction::Create(Code::Xsetbv));
	}

	void Assembler::xsha1()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xsha1_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xsha1_32 : Code::Xsha1_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xsha256()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xsha256_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xsha256_32 : Code::Xsha256_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xstore()
	{
		Code code;
		if (GetBitness() == 64)
		{
			code = Code::Xstore_64;
		}
		else
		{
			code = GetBitness() >= 32 ? Code::Xstore_32 : Code::Xstore_16;
		}
		AddInstruction(Instruction::Create(code));
	}

	void Assembler::xsusldtrk()
	{
		AddInstruction(Instruction::Create(Code::Xsusldtrk));
	}

	void Assembler::xtest()
	{
		AddInstruction(Instruction::Create(Code::Xtest));
	}

	void Assembler::db(std::uint8_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12, std::uint8_t imm13)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12, std::uint8_t imm13, std::uint8_t imm14)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13, imm14));
	}

	void Assembler::db(std::uint8_t imm0, std::uint8_t imm1, std::uint8_t imm2, std::uint8_t imm3, std::uint8_t imm4, std::uint8_t imm5, std::uint8_t imm6, std::uint8_t imm7, std::uint8_t imm8, std::uint8_t imm9, std::uint8_t imm10, std::uint8_t imm11, std::uint8_t imm12, std::uint8_t imm13, std::uint8_t imm14, std::uint8_t imm15)
	{
		AddInstruction(Instruction::CreateDeclareByte(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7, imm8, imm9, imm10, imm11, imm12, imm13, imm14, imm15));
	}

	void Assembler::db(std::int8_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9), static_cast<std::uint8_t>(imm10)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9), static_cast<std::uint8_t>(imm10), static_cast<std::uint8_t>(imm11)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9), static_cast<std::uint8_t>(imm10), static_cast<std::uint8_t>(imm11), static_cast<std::uint8_t>(imm12)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12, std::int8_t imm13)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9), static_cast<std::uint8_t>(imm10), static_cast<std::uint8_t>(imm11), static_cast<std::uint8_t>(imm12), static_cast<std::uint8_t>(imm13)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12, std::int8_t imm13, std::int8_t imm14)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9), static_cast<std::uint8_t>(imm10), static_cast<std::uint8_t>(imm11), static_cast<std::uint8_t>(imm12), static_cast<std::uint8_t>(imm13), static_cast<std::uint8_t>(imm14)));
	}

	void Assembler::db(std::int8_t imm0, std::int8_t imm1, std::int8_t imm2, std::int8_t imm3, std::int8_t imm4, std::int8_t imm5, std::int8_t imm6, std::int8_t imm7, std::int8_t imm8, std::int8_t imm9, std::int8_t imm10, std::int8_t imm11, std::int8_t imm12, std::int8_t imm13, std::int8_t imm14, std::int8_t imm15)
	{
		AddInstruction(Instruction::CreateDeclareByte(static_cast<std::uint8_t>(imm0), static_cast<std::uint8_t>(imm1), static_cast<std::uint8_t>(imm2), static_cast<std::uint8_t>(imm3), static_cast<std::uint8_t>(imm4), static_cast<std::uint8_t>(imm5), static_cast<std::uint8_t>(imm6), static_cast<std::uint8_t>(imm7), static_cast<std::uint8_t>(imm8), static_cast<std::uint8_t>(imm9), static_cast<std::uint8_t>(imm10), static_cast<std::uint8_t>(imm11), static_cast<std::uint8_t>(imm12), static_cast<std::uint8_t>(imm13), static_cast<std::uint8_t>(imm14), static_cast<std::uint8_t>(imm15)));
	}

	void Assembler::dw(std::uint16_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1, imm2));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1, imm2, imm3));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1, imm2, imm3, imm4));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4, std::uint16_t imm5)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4, std::uint16_t imm5, std::uint16_t imm6)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5, imm6));
	}

	void Assembler::dw(std::uint16_t imm0, std::uint16_t imm1, std::uint16_t imm2, std::uint16_t imm3, std::uint16_t imm4, std::uint16_t imm5, std::uint16_t imm6, std::uint16_t imm7)
	{
		AddInstruction(Instruction::CreateDeclareWord(imm0, imm1, imm2, imm3, imm4, imm5, imm6, imm7));
	}

	void Assembler::dw(std::int16_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1), static_cast<std::uint16_t>(imm2)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1), static_cast<std::uint16_t>(imm2), static_cast<std::uint16_t>(imm3)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1), static_cast<std::uint16_t>(imm2), static_cast<std::uint16_t>(imm3), static_cast<std::uint16_t>(imm4)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4, std::int16_t imm5)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1), static_cast<std::uint16_t>(imm2), static_cast<std::uint16_t>(imm3), static_cast<std::uint16_t>(imm4), static_cast<std::uint16_t>(imm5)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4, std::int16_t imm5, std::int16_t imm6)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1), static_cast<std::uint16_t>(imm2), static_cast<std::uint16_t>(imm3), static_cast<std::uint16_t>(imm4), static_cast<std::uint16_t>(imm5), static_cast<std::uint16_t>(imm6)));
	}

	void Assembler::dw(std::int16_t imm0, std::int16_t imm1, std::int16_t imm2, std::int16_t imm3, std::int16_t imm4, std::int16_t imm5, std::int16_t imm6, std::int16_t imm7)
	{
		AddInstruction(Instruction::CreateDeclareWord(static_cast<std::uint16_t>(imm0), static_cast<std::uint16_t>(imm1), static_cast<std::uint16_t>(imm2), static_cast<std::uint16_t>(imm3), static_cast<std::uint16_t>(imm4), static_cast<std::uint16_t>(imm5), static_cast<std::uint16_t>(imm6), static_cast<std::uint16_t>(imm7)));
	}

	void Assembler::dd(std::uint32_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareDword(imm0));
	}

	void Assembler::dd(std::uint32_t imm0, std::uint32_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareDword(imm0, imm1));
	}

	void Assembler::dd(std::uint32_t imm0, std::uint32_t imm1, std::uint32_t imm2)
	{
		AddInstruction(Instruction::CreateDeclareDword(imm0, imm1, imm2));
	}

	void Assembler::dd(std::uint32_t imm0, std::uint32_t imm1, std::uint32_t imm2, std::uint32_t imm3)
	{
		AddInstruction(Instruction::CreateDeclareDword(imm0, imm1, imm2, imm3));
	}

	void Assembler::dd(std::int32_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareDword(static_cast<std::uint32_t>(imm0)));
	}

	void Assembler::dd(std::int32_t imm0, std::int32_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareDword(static_cast<std::uint32_t>(imm0), static_cast<std::uint32_t>(imm1)));
	}

	void Assembler::dd(std::int32_t imm0, std::int32_t imm1, std::int32_t imm2)
	{
		AddInstruction(Instruction::CreateDeclareDword(static_cast<std::uint32_t>(imm0), static_cast<std::uint32_t>(imm1), static_cast<std::uint32_t>(imm2)));
	}

	void Assembler::dd(std::int32_t imm0, std::int32_t imm1, std::int32_t imm2, std::int32_t imm3)
	{
		AddInstruction(Instruction::CreateDeclareDword(static_cast<std::uint32_t>(imm0), static_cast<std::uint32_t>(imm1), static_cast<std::uint32_t>(imm2), static_cast<std::uint32_t>(imm3)));
	}

	void Assembler::dq(std::uint64_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareQword(imm0));
	}

	void Assembler::dq(std::uint64_t imm0, std::uint64_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareQword(imm0, imm1));
	}

	void Assembler::dq(std::int64_t imm0)
	{
		AddInstruction(Instruction::CreateDeclareQword(static_cast<std::uint64_t>(imm0)));
	}

	void Assembler::dq(std::int64_t imm0, std::int64_t imm1)
	{
		AddInstruction(Instruction::CreateDeclareQword(static_cast<std::uint64_t>(imm0), static_cast<std::uint64_t>(imm1)));
	}
}
