/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(ENCODER) && defined(OPCODE_INFO)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MandatoryPrefix {
		/// <summary>No mandatory prefix (legacy and 3DNow! tables only)</summary>
		None  = 0,
		/// <summary>Empty mandatory prefix (no <c>66</c>, <c>F3</c> or <c>F2</c> prefix)</summary>
		PNP  = 1,
		/// <summary><c>66</c> prefix</summary>
		P66  = 2,
		/// <summary><c>F3</c> prefix</summary>
		PF3  = 3,
		/// <summary><c>F2</c> prefix</summary>
		PF2  = 4,
	};
	constexpr int operator+(const MandatoryPrefix& a, const MandatoryPrefix& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MandatoryPrefix& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MandatoryPrefix& b) { return (a + (int)b); }
	constexpr int operator-(const MandatoryPrefix& a, const MandatoryPrefix& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MandatoryPrefix& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MandatoryPrefix& b) { return (a - (int)b); }
	constexpr MandatoryPrefix operator++(MandatoryPrefix& a, int) { auto temp = a; a = MandatoryPrefix(a + 1); return temp; }
	constexpr MandatoryPrefix& operator++(MandatoryPrefix& a) { return a = MandatoryPrefix(a + 1); }
	constexpr MandatoryPrefix operator--(MandatoryPrefix& a, int) { auto temp = a; a = MandatoryPrefix(a - 1); return temp; }
	constexpr MandatoryPrefix& operator--(MandatoryPrefix& a) { return a = MandatoryPrefix(a - 1); }
	constexpr bool operator==(const MandatoryPrefix& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MandatoryPrefix& b) { return (a == (int)b); }
	constexpr bool operator>=(const MandatoryPrefix& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MandatoryPrefix& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MandatoryPrefix& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MandatoryPrefix& b) { return (a <= (int)b); }
	constexpr bool operator>(const MandatoryPrefix& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MandatoryPrefix& b) { return (a > (int)b); }
	constexpr bool operator<(const MandatoryPrefix& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MandatoryPrefix& b) { return (a < (int)b); }
	constexpr bool operator!=(const MandatoryPrefix& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MandatoryPrefix& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MandatoryPrefix& e) {
	switch (e) {
		case Iced::Intel::MandatoryPrefix::None: return "None";
		case Iced::Intel::MandatoryPrefix::PNP: return "PNP";
		case Iced::Intel::MandatoryPrefix::P66: return "P66";
		case Iced::Intel::MandatoryPrefix::PF3: return "PF3";
		case Iced::Intel::MandatoryPrefix::PF2: return "PF2";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
