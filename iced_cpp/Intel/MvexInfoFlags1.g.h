/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(MVEX)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MvexInfoFlags1 {
		None  = 0x00000000,
		NDD  = 0x00000001,
		NDS  = 0x00000002,
		EvictionHint  = 0x00000004,
		ImmRoundingControl  = 0x00000008,
		RoundingControl  = 0x00000010,
		SuppressAllExceptions  = 0x00000020,
		IgnoresOpMaskRegister  = 0x00000040,
		RequireOpMaskRegister  = 0x00000080,
	};
	constexpr MvexInfoFlags1& operator^=(MvexInfoFlags1& a, const MvexInfoFlags1& b) { return a = (MvexInfoFlags1)((int)a ^ (int)b); }
	constexpr MvexInfoFlags1 operator^(const MvexInfoFlags1& a, const MvexInfoFlags1& b) { return (MvexInfoFlags1)((int)a ^ (int)b); }
	constexpr MvexInfoFlags1& operator|=(MvexInfoFlags1& a, const MvexInfoFlags1& b) { return a = (MvexInfoFlags1)((int)a | (int)b); }
	constexpr MvexInfoFlags1 operator|(const MvexInfoFlags1& a, const MvexInfoFlags1& b) { return (MvexInfoFlags1)((int)a | (int)b); }
	constexpr MvexInfoFlags1& operator&=(MvexInfoFlags1& a, const MvexInfoFlags1& b) { return a = (MvexInfoFlags1)((int)a & (int)b); }
	constexpr MvexInfoFlags1 operator&(const MvexInfoFlags1& a, const MvexInfoFlags1& b) { return (MvexInfoFlags1)((int)a & (int)b); }
	constexpr MvexInfoFlags1 operator~(const MvexInfoFlags1& a) { return (MvexInfoFlags1)(~((int)a)); }
	constexpr int operator+(const MvexInfoFlags1& a, const MvexInfoFlags1& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MvexInfoFlags1& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MvexInfoFlags1& b) { return (a + (int)b); }
	constexpr int operator-(const MvexInfoFlags1& a, const MvexInfoFlags1& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MvexInfoFlags1& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MvexInfoFlags1& b) { return (a - (int)b); }
	constexpr MvexInfoFlags1 operator++(MvexInfoFlags1& a, int) { auto temp = a; a = MvexInfoFlags1(a + 1); return temp; }
	constexpr MvexInfoFlags1& operator++(MvexInfoFlags1& a) { return a = MvexInfoFlags1(a + 1); }
	constexpr MvexInfoFlags1 operator--(MvexInfoFlags1& a, int) { auto temp = a; a = MvexInfoFlags1(a - 1); return temp; }
	constexpr MvexInfoFlags1& operator--(MvexInfoFlags1& a) { return a = MvexInfoFlags1(a - 1); }
	constexpr bool operator==(const MvexInfoFlags1& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MvexInfoFlags1& b) { return (a == (int)b); }
	constexpr bool operator>=(const MvexInfoFlags1& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MvexInfoFlags1& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MvexInfoFlags1& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MvexInfoFlags1& b) { return (a <= (int)b); }
	constexpr bool operator>(const MvexInfoFlags1& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MvexInfoFlags1& b) { return (a > (int)b); }
	constexpr bool operator<(const MvexInfoFlags1& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MvexInfoFlags1& b) { return (a < (int)b); }
	constexpr bool operator!=(const MvexInfoFlags1& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MvexInfoFlags1& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MvexInfoFlags1& e) {
	std::string result;
	auto temp = e;
	if (temp == Iced::Intel::MvexInfoFlags1::None) {
		return "None";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::NDD) == Iced::Intel::MvexInfoFlags1::NDD) {
		temp ^= Iced::Intel::MvexInfoFlags1::NDD;
		result += "NDD, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::NDS) == Iced::Intel::MvexInfoFlags1::NDS) {
		temp ^= Iced::Intel::MvexInfoFlags1::NDS;
		result += "NDS, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::EvictionHint) == Iced::Intel::MvexInfoFlags1::EvictionHint) {
		temp ^= Iced::Intel::MvexInfoFlags1::EvictionHint;
		result += "EvictionHint, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::ImmRoundingControl) == Iced::Intel::MvexInfoFlags1::ImmRoundingControl) {
		temp ^= Iced::Intel::MvexInfoFlags1::ImmRoundingControl;
		result += "ImmRoundingControl, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::RoundingControl) == Iced::Intel::MvexInfoFlags1::RoundingControl) {
		temp ^= Iced::Intel::MvexInfoFlags1::RoundingControl;
		result += "RoundingControl, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::SuppressAllExceptions) == Iced::Intel::MvexInfoFlags1::SuppressAllExceptions) {
		temp ^= Iced::Intel::MvexInfoFlags1::SuppressAllExceptions;
		result += "SuppressAllExceptions, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::IgnoresOpMaskRegister) == Iced::Intel::MvexInfoFlags1::IgnoresOpMaskRegister) {
		temp ^= Iced::Intel::MvexInfoFlags1::IgnoresOpMaskRegister;
		result += "IgnoresOpMaskRegister, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags1::RequireOpMaskRegister) == Iced::Intel::MvexInfoFlags1::RequireOpMaskRegister) {
		temp ^= Iced::Intel::MvexInfoFlags1::RequireOpMaskRegister;
		result += "RequireOpMaskRegister, ";
	}
	if (temp != 0 || result.empty()) return Internal::StringHelpers::ToDec((int)e);
	return result.substr(0, result.size() - 2);
}
#endif
