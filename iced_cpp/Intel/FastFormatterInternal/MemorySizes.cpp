// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#include "MemorySizes.h"
#include "../Iced.Intel.IcedConstants.h"

namespace Iced::Intel::FastFormatterInternal
{

	std::vector<std::string> MemorySizes::AllMemorySizes = GetMemorySizes();

	std::vector<std::string> MemorySizes::GetMemorySizes()
	{
		auto memSizes = std::vector<std::string>(IcedConstants::MemorySizeEnumCount);
		std::vector<std::uint8_t> data = { 0x00, 0x01, 0x0D, 0x03, 0x0B, 0x0B, 0x0E, 0x0F, 0x10, 0x01, 0x0D, 0x03, 0x0B, 0x0E, 0x0F, 0x10, 0x03, 0x08, 0x0C, 0x0D, 0x03, 0x0B, 0x03, 0x0B, 0x0B, 0x09, 0x08, 0x08, 0x0D, 0x03, 0x0B, 0x0C, 0x0E, 0x0D, 0x04, 0x05, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x0C, 0x11, 0x10, 0x0D, 0x0D, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x12, 0x02, 0x02, 0x12, 0x02, 0x12, 0x12, 0x02, 0x02, 0x0A, 0x0A, 0x0A, 0x12, 0x02, 0x0A, 0x02, 0x0A, 0x0A, 0x02, 0x02, 0x12, 0x12, 0x02, 0x02, 0x0A, 0x0A, 0x0A, 0x12, 0x02, 0x0A, 0x02, 0x0A, 0x0A, 0x02, 0x02, 0x12, 0x12, 0x02, 0x02, 0x0A, 0x0A, 0x0A, 0x12, 0x02, 0x0A, 0x02, 0x02, 0x0A, 0x0A, 0x02 };
		for (std::int32_t i = 0; i < memSizes.size(); i++)
		{
			auto switchTempVar_0 = data[i];
			// GENERATOR-BEGIN: Switch
			// ⚠️This was generated by GENERATOR!🦹‍♂️
			// GENERATOR-END: Switch

	 //C# TO C++ CONVERTER TODO TASK: Throw expressions are not converted by C# to C++ Converter:
	 //ORIGINAL LINE: var keywords = (switchTempVar_0 == 0) ? "" : (switchTempVar_0 == 1) ? "byte ptr " : (switchTempVar_0 == 2) ? "dword bcst " : (switchTempVar_0 == 3) ? "dword ptr " : (switchTempVar_0 == 4) ? "fpuenv14 ptr " : (switchTempVar_0 == 5) ? "fpuenv28 ptr " : (switchTempVar_0 == 6) ? "fpustate108 ptr " : (switchTempVar_0 == 7) ? "fpustate94 ptr " : (switchTempVar_0 == 8) ? "fword ptr " : (switchTempVar_0 == 9) ? "oword ptr " : (switchTempVar_0 == 10) ? "qword bcst " : (switchTempVar_0 == 11) ? "qword ptr " : (switchTempVar_0 == 12) ? "tbyte ptr " : (switchTempVar_0 == 13) ? "word ptr " : (switchTempVar_0 == 14) ? "xmmword ptr " : (switchTempVar_0 == 15) ? "ymmword ptr " : (switchTempVar_0 == 16) ? "zmmword ptr " : (switchTempVar_0 == 17) ? "mem384 ptr " : (switchTempVar_0 == 18) ? "word bcst " : throw new InvalidOperationException();
			auto keywords = (switchTempVar_0 == 0) ? "" : (switchTempVar_0 == 1) ? "byte ptr " : (switchTempVar_0 == 2) ? "dword bcst " : (switchTempVar_0 == 3) ? "dword ptr " : (switchTempVar_0 == 4) ? "fpuenv14 ptr " : (switchTempVar_0 == 5) ? "fpuenv28 ptr " : (switchTempVar_0 == 6) ? "fpustate108 ptr " : (switchTempVar_0 == 7) ? "fpustate94 ptr " : (switchTempVar_0 == 8) ? "fword ptr " : (switchTempVar_0 == 9) ? "oword ptr " : (switchTempVar_0 == 10) ? "qword bcst " : (switchTempVar_0 == 11) ? "qword ptr " : (switchTempVar_0 == 12) ? "tbyte ptr " : (switchTempVar_0 == 13) ? "word ptr " : (switchTempVar_0 == 14) ? "xmmword ptr " : (switchTempVar_0 == 15) ? "ymmword ptr " : (switchTempVar_0 == 16) ? "zmmword ptr " : (switchTempVar_0 == 17) ? "mem384 ptr " : (switchTempVar_0 == 18) ? "word bcst " : throw InvalidOperationException();
			memSizes[i] = keywords;
		}
		return memSizes;
	}
}
