#pragma once

#include <string>

#include "../Iced.Intel.IcedConstants.h"

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
namespace Iced::Intel::FastFormatterInternal
{
	namespace MemorySizes
	{
		constexpr std::array<std::string_view, IcedConstants::MemorySizeEnumCount> GetMemorySizes()
		{
			auto memSizes = std::array<std::string_view, IcedConstants::MemorySizeEnumCount>();
			constexpr std::array data = std::to_array<std::uint8_t>({ 0x00, 0x01, 0x0D, 0x03, 0x0B, 0x0B, 0x0E, 0x0F, 0x10, 0x01, 0x0D, 0x03, 0x0B, 0x0E, 0x0F, 0x10, 0x03, 0x08, 0x0C, 0x0D, 0x03, 0x0B, 0x03, 0x0B, 0x0B, 0x09, 0x08, 0x08, 0x0D, 0x03, 0x0B, 0x0C, 0x0E, 0x0D, 0x04, 0x05, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x0C, 0x11, 0x10, 0x0D, 0x0D, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x12, 0x02, 0x02, 0x12, 0x02, 0x12, 0x12, 0x02, 0x02, 0x0A, 0x0A, 0x0A, 0x12, 0x02, 0x0A, 0x02, 0x0A, 0x0A, 0x02, 0x02, 0x12, 0x12, 0x02, 0x02, 0x0A, 0x0A, 0x0A, 0x12, 0x02, 0x0A, 0x02, 0x0A, 0x0A, 0x02, 0x02, 0x12, 0x12, 0x02, 0x02, 0x0A, 0x0A, 0x0A, 0x12, 0x02, 0x0A, 0x02, 0x02, 0x0A, 0x0A, 0x02 });
			for (std::int32_t i = 0; i < memSizes.size(); i++)
			{
				auto switchTempVar_0 = data[i];
				// GENERATOR-BEGIN: Switch
				// ⚠️This was generated by GENERATOR!🦹‍♂️
				// GENERATOR-END: Switch

				auto keywords = (switchTempVar_0 == 0) ? "" : (switchTempVar_0 == 1) ? "byte ptr " : (switchTempVar_0 == 2) ? "dword bcst " : (switchTempVar_0 == 3) ? "dword ptr " : (switchTempVar_0 == 4) ? "fpuenv14 ptr " : (switchTempVar_0 == 5) ? "fpuenv28 ptr " : (switchTempVar_0 == 6) ? "fpustate108 ptr " : (switchTempVar_0 == 7) ? "fpustate94 ptr " : (switchTempVar_0 == 8) ? "fword ptr " : (switchTempVar_0 == 9) ? "oword ptr " : (switchTempVar_0 == 10) ? "qword bcst " : (switchTempVar_0 == 11) ? "qword ptr " : (switchTempVar_0 == 12) ? "tbyte ptr " : (switchTempVar_0 == 13) ? "word ptr " : (switchTempVar_0 == 14) ? "xmmword ptr " : (switchTempVar_0 == 15) ? "ymmword ptr " : (switchTempVar_0 == 16) ? "zmmword ptr " : (switchTempVar_0 == 17) ? "mem384 ptr " : (switchTempVar_0 == 18) ? "word bcst " : throw std::runtime_error("invalid operation");
				memSizes[i] = keywords;
			}
			return memSizes;
		}

		inline static constexpr std::array<std::string_view, IcedConstants::MemorySizeEnumCount> AllMemorySizes = GetMemorySizes();
	}

}
