/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(MVEX)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MvexInfoFlags2 {
		None  = 0x00000000,
		NoSaeRoundingControl  = 0x00000001,
		ConvFn32  = 0x00000002,
		IgnoresEvictionHint  = 0x00000004,
	};
	constexpr MvexInfoFlags2& operator^=(MvexInfoFlags2& a, const MvexInfoFlags2& b) { return a = (MvexInfoFlags2)((int)a ^ (int)b); }
	constexpr MvexInfoFlags2 operator^(const MvexInfoFlags2& a, const MvexInfoFlags2& b) { return (MvexInfoFlags2)((int)a ^ (int)b); }
	constexpr MvexInfoFlags2& operator|=(MvexInfoFlags2& a, const MvexInfoFlags2& b) { return a = (MvexInfoFlags2)((int)a | (int)b); }
	constexpr MvexInfoFlags2 operator|(const MvexInfoFlags2& a, const MvexInfoFlags2& b) { return (MvexInfoFlags2)((int)a | (int)b); }
	constexpr MvexInfoFlags2& operator&=(MvexInfoFlags2& a, const MvexInfoFlags2& b) { return a = (MvexInfoFlags2)((int)a & (int)b); }
	constexpr MvexInfoFlags2 operator&(const MvexInfoFlags2& a, const MvexInfoFlags2& b) { return (MvexInfoFlags2)((int)a & (int)b); }
	constexpr MvexInfoFlags2 operator~(const MvexInfoFlags2& a) { return (MvexInfoFlags2)(~((int)a)); }
	constexpr int operator+(const MvexInfoFlags2& a, const MvexInfoFlags2& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MvexInfoFlags2& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MvexInfoFlags2& b) { return (a + (int)b); }
	constexpr int operator-(const MvexInfoFlags2& a, const MvexInfoFlags2& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MvexInfoFlags2& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MvexInfoFlags2& b) { return (a - (int)b); }
	constexpr MvexInfoFlags2 operator++(MvexInfoFlags2& a, int) { auto temp = a; a = MvexInfoFlags2(a + 1); return temp; }
	constexpr MvexInfoFlags2& operator++(MvexInfoFlags2& a) { return a = MvexInfoFlags2(a + 1); }
	constexpr MvexInfoFlags2 operator--(MvexInfoFlags2& a, int) { auto temp = a; a = MvexInfoFlags2(a - 1); return temp; }
	constexpr MvexInfoFlags2& operator--(MvexInfoFlags2& a) { return a = MvexInfoFlags2(a - 1); }
	constexpr bool operator==(const MvexInfoFlags2& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MvexInfoFlags2& b) { return (a == (int)b); }
	constexpr bool operator>=(const MvexInfoFlags2& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MvexInfoFlags2& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MvexInfoFlags2& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MvexInfoFlags2& b) { return (a <= (int)b); }
	constexpr bool operator>(const MvexInfoFlags2& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MvexInfoFlags2& b) { return (a > (int)b); }
	constexpr bool operator<(const MvexInfoFlags2& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MvexInfoFlags2& b) { return (a < (int)b); }
	constexpr bool operator!=(const MvexInfoFlags2& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MvexInfoFlags2& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MvexInfoFlags2& e) {
	std::string result;
	auto temp = e;
	if (temp == Iced::Intel::MvexInfoFlags2::None) {
		return "None";
	}
	if ((temp & Iced::Intel::MvexInfoFlags2::NoSaeRoundingControl) == Iced::Intel::MvexInfoFlags2::NoSaeRoundingControl) {
		temp ^= Iced::Intel::MvexInfoFlags2::NoSaeRoundingControl;
		result += "NoSaeRoundingControl, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags2::ConvFn32) == Iced::Intel::MvexInfoFlags2::ConvFn32) {
		temp ^= Iced::Intel::MvexInfoFlags2::ConvFn32;
		result += "ConvFn32, ";
	}
	if ((temp & Iced::Intel::MvexInfoFlags2::IgnoresEvictionHint) == Iced::Intel::MvexInfoFlags2::IgnoresEvictionHint) {
		temp ^= Iced::Intel::MvexInfoFlags2::IgnoresEvictionHint;
		result += "IgnoresEvictionHint, ";
	}
	if (temp != 0 || result.empty()) return Internal::StringHelpers::ToDec((int)e);
	return result.substr(0, result.size() - 2);
}
#endif
