// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>



// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
namespace Iced::Intel
{
	/// <summary>Operand, register and memory access</summary>
	enum class OpAccess
	{
		/// <summary>Nothing is read and nothing is written</summary>
		None = 0,
		/// <summary>The value is read</summary>
		Read = 1,
		/// <summary>The value is sometimes read and sometimes not</summary>
		CondRead = 2,
		/// <summary>The value is completely overwritten</summary>
		Write = 3,
		/// <summary>Conditional write, sometimes it&apos;s written and sometimes it&apos;s not modified</summary>
		CondWrite = 4,
		/// <summary>The value is read and written</summary>
		ReadWrite = 5,
		/// <summary>The value is read and sometimes written</summary>
		ReadCondWrite = 6,
		/// <summary>The memory operand doesn&apos;t refer to memory (eg. <c>LEA</c> instruction) or it&apos;s an instruction that doesn&apos;t read the data to a register or doesn&apos;t write to the memory location, it just prefetches/invalidates it, eg. <c>INVLPG</c>, <c>PREFETCHNTA</c>, <c>VGATHERPF0DPS</c>, etc. Some of those instructions still check if the code can access the memory location.</summary>
		NoMemAccess = 7
	};

	DEFINE_COMP(OpAccess)
		DEFINE_ARITH(OpAccess)

}
