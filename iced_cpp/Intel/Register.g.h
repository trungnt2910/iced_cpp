/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	/// <summary>A register</summary>
	enum class Register {
		None  = 0,
		AL  = 1,
		CL  = 2,
		DL  = 3,
		BL  = 4,
		AH  = 5,
		CH  = 6,
		DH  = 7,
		BH  = 8,
		SPL  = 9,
		BPL  = 10,
		SIL  = 11,
		DIL  = 12,
		R8L  = 13,
		R9L  = 14,
		R10L  = 15,
		R11L  = 16,
		R12L  = 17,
		R13L  = 18,
		R14L  = 19,
		R15L  = 20,
		AX  = 21,
		CX  = 22,
		DX  = 23,
		BX  = 24,
		SP  = 25,
		BP  = 26,
		SI  = 27,
		DI  = 28,
		R8W  = 29,
		R9W  = 30,
		R10W  = 31,
		R11W  = 32,
		R12W  = 33,
		R13W  = 34,
		R14W  = 35,
		R15W  = 36,
		EAX  = 37,
		ECX  = 38,
		EDX  = 39,
		EBX  = 40,
		ESP  = 41,
		EBP  = 42,
		ESI  = 43,
		EDI  = 44,
		R8D  = 45,
		R9D  = 46,
		R10D  = 47,
		R11D  = 48,
		R12D  = 49,
		R13D  = 50,
		R14D  = 51,
		R15D  = 52,
		RAX  = 53,
		RCX  = 54,
		RDX  = 55,
		RBX  = 56,
		RSP  = 57,
		RBP  = 58,
		RSI  = 59,
		RDI  = 60,
		R8  = 61,
		R9  = 62,
		R10  = 63,
		R11  = 64,
		R12  = 65,
		R13  = 66,
		R14  = 67,
		R15  = 68,
		EIP  = 69,
		RIP  = 70,
		ES  = 71,
		CS  = 72,
		SS  = 73,
		DS  = 74,
		FS  = 75,
		GS  = 76,
		XMM0  = 77,
		XMM1  = 78,
		XMM2  = 79,
		XMM3  = 80,
		XMM4  = 81,
		XMM5  = 82,
		XMM6  = 83,
		XMM7  = 84,
		XMM8  = 85,
		XMM9  = 86,
		XMM10  = 87,
		XMM11  = 88,
		XMM12  = 89,
		XMM13  = 90,
		XMM14  = 91,
		XMM15  = 92,
		XMM16  = 93,
		XMM17  = 94,
		XMM18  = 95,
		XMM19  = 96,
		XMM20  = 97,
		XMM21  = 98,
		XMM22  = 99,
		XMM23  = 100,
		XMM24  = 101,
		XMM25  = 102,
		XMM26  = 103,
		XMM27  = 104,
		XMM28  = 105,
		XMM29  = 106,
		XMM30  = 107,
		XMM31  = 108,
		YMM0  = 109,
		YMM1  = 110,
		YMM2  = 111,
		YMM3  = 112,
		YMM4  = 113,
		YMM5  = 114,
		YMM6  = 115,
		YMM7  = 116,
		YMM8  = 117,
		YMM9  = 118,
		YMM10  = 119,
		YMM11  = 120,
		YMM12  = 121,
		YMM13  = 122,
		YMM14  = 123,
		YMM15  = 124,
		YMM16  = 125,
		YMM17  = 126,
		YMM18  = 127,
		YMM19  = 128,
		YMM20  = 129,
		YMM21  = 130,
		YMM22  = 131,
		YMM23  = 132,
		YMM24  = 133,
		YMM25  = 134,
		YMM26  = 135,
		YMM27  = 136,
		YMM28  = 137,
		YMM29  = 138,
		YMM30  = 139,
		YMM31  = 140,
		ZMM0  = 141,
		ZMM1  = 142,
		ZMM2  = 143,
		ZMM3  = 144,
		ZMM4  = 145,
		ZMM5  = 146,
		ZMM6  = 147,
		ZMM7  = 148,
		ZMM8  = 149,
		ZMM9  = 150,
		ZMM10  = 151,
		ZMM11  = 152,
		ZMM12  = 153,
		ZMM13  = 154,
		ZMM14  = 155,
		ZMM15  = 156,
		ZMM16  = 157,
		ZMM17  = 158,
		ZMM18  = 159,
		ZMM19  = 160,
		ZMM20  = 161,
		ZMM21  = 162,
		ZMM22  = 163,
		ZMM23  = 164,
		ZMM24  = 165,
		ZMM25  = 166,
		ZMM26  = 167,
		ZMM27  = 168,
		ZMM28  = 169,
		ZMM29  = 170,
		ZMM30  = 171,
		ZMM31  = 172,
		K0  = 173,
		K1  = 174,
		K2  = 175,
		K3  = 176,
		K4  = 177,
		K5  = 178,
		K6  = 179,
		K7  = 180,
		BND0  = 181,
		BND1  = 182,
		BND2  = 183,
		BND3  = 184,
		CR0  = 185,
		CR1  = 186,
		CR2  = 187,
		CR3  = 188,
		CR4  = 189,
		CR5  = 190,
		CR6  = 191,
		CR7  = 192,
		CR8  = 193,
		CR9  = 194,
		CR10  = 195,
		CR11  = 196,
		CR12  = 197,
		CR13  = 198,
		CR14  = 199,
		CR15  = 200,
		DR0  = 201,
		DR1  = 202,
		DR2  = 203,
		DR3  = 204,
		DR4  = 205,
		DR5  = 206,
		DR6  = 207,
		DR7  = 208,
		DR8  = 209,
		DR9  = 210,
		DR10  = 211,
		DR11  = 212,
		DR12  = 213,
		DR13  = 214,
		DR14  = 215,
		DR15  = 216,
		ST0  = 217,
		ST1  = 218,
		ST2  = 219,
		ST3  = 220,
		ST4  = 221,
		ST5  = 222,
		ST6  = 223,
		ST7  = 224,
		MM0  = 225,
		MM1  = 226,
		MM2  = 227,
		MM3  = 228,
		MM4  = 229,
		MM5  = 230,
		MM6  = 231,
		MM7  = 232,
		TR0  = 233,
		TR1  = 234,
		TR2  = 235,
		TR3  = 236,
		TR4  = 237,
		TR5  = 238,
		TR6  = 239,
		TR7  = 240,
		TMM0  = 241,
		TMM1  = 242,
		TMM2  = 243,
		TMM3  = 244,
		TMM4  = 245,
		TMM5  = 246,
		TMM6  = 247,
		TMM7  = 248,
		/// <summary>Don&apos;t use it!</summary>
		DontUse0 [[deprecated("Not part of the public API")]] = 249,
		/// <summary>Don&apos;t use it!</summary>
		DontUseFA [[deprecated("Not part of the public API")]] = 250,
		/// <summary>Don&apos;t use it!</summary>
		DontUseFB [[deprecated("Not part of the public API")]] = 251,
		/// <summary>Don&apos;t use it!</summary>
		DontUseFC [[deprecated("Not part of the public API")]] = 252,
		/// <summary>Don&apos;t use it!</summary>
		DontUseFD [[deprecated("Not part of the public API")]] = 253,
		/// <summary>Don&apos;t use it!</summary>
		DontUseFE [[deprecated("Not part of the public API")]] = 254,
		/// <summary>Don&apos;t use it!</summary>
		DontUseFF [[deprecated("Not part of the public API")]] = 255,
	};
	constexpr int operator+(const Register& a, const Register& b) { return ((int)a + (int)b); }
	constexpr int operator+(const Register& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const Register& b) { return (a + (int)b); }
	constexpr int operator-(const Register& a, const Register& b) { return ((int)a - (int)b); }
	constexpr int operator-(const Register& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const Register& b) { return (a - (int)b); }
	constexpr Register operator++(Register& a, int) { auto temp = a; a = Register(a + 1); return temp; }
	constexpr Register& operator++(Register& a) { return a = Register(a + 1); }
	constexpr Register operator--(Register& a, int) { auto temp = a; a = Register(a - 1); return temp; }
	constexpr Register& operator--(Register& a) { return a = Register(a - 1); }
	constexpr bool operator==(const Register& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const Register& b) { return (a == (int)b); }
	constexpr bool operator>=(const Register& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const Register& b) { return (a >= (int)b); }
	constexpr bool operator<=(const Register& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const Register& b) { return (a <= (int)b); }
	constexpr bool operator>(const Register& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const Register& b) { return (a > (int)b); }
	constexpr bool operator<(const Register& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const Register& b) { return (a < (int)b); }
	constexpr bool operator!=(const Register& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const Register& b) { return (a != (int)b); }
	template <>
	constexpr std::string ToString(const Register& e) {
		switch (e) {
			case Register::None: return "None";
			case Register::AL: return "AL";
			case Register::CL: return "CL";
			case Register::DL: return "DL";
			case Register::BL: return "BL";
			case Register::AH: return "AH";
			case Register::CH: return "CH";
			case Register::DH: return "DH";
			case Register::BH: return "BH";
			case Register::SPL: return "SPL";
			case Register::BPL: return "BPL";
			case Register::SIL: return "SIL";
			case Register::DIL: return "DIL";
			case Register::R8L: return "R8L";
			case Register::R9L: return "R9L";
			case Register::R10L: return "R10L";
			case Register::R11L: return "R11L";
			case Register::R12L: return "R12L";
			case Register::R13L: return "R13L";
			case Register::R14L: return "R14L";
			case Register::R15L: return "R15L";
			case Register::AX: return "AX";
			case Register::CX: return "CX";
			case Register::DX: return "DX";
			case Register::BX: return "BX";
			case Register::SP: return "SP";
			case Register::BP: return "BP";
			case Register::SI: return "SI";
			case Register::DI: return "DI";
			case Register::R8W: return "R8W";
			case Register::R9W: return "R9W";
			case Register::R10W: return "R10W";
			case Register::R11W: return "R11W";
			case Register::R12W: return "R12W";
			case Register::R13W: return "R13W";
			case Register::R14W: return "R14W";
			case Register::R15W: return "R15W";
			case Register::EAX: return "EAX";
			case Register::ECX: return "ECX";
			case Register::EDX: return "EDX";
			case Register::EBX: return "EBX";
			case Register::ESP: return "ESP";
			case Register::EBP: return "EBP";
			case Register::ESI: return "ESI";
			case Register::EDI: return "EDI";
			case Register::R8D: return "R8D";
			case Register::R9D: return "R9D";
			case Register::R10D: return "R10D";
			case Register::R11D: return "R11D";
			case Register::R12D: return "R12D";
			case Register::R13D: return "R13D";
			case Register::R14D: return "R14D";
			case Register::R15D: return "R15D";
			case Register::RAX: return "RAX";
			case Register::RCX: return "RCX";
			case Register::RDX: return "RDX";
			case Register::RBX: return "RBX";
			case Register::RSP: return "RSP";
			case Register::RBP: return "RBP";
			case Register::RSI: return "RSI";
			case Register::RDI: return "RDI";
			case Register::R8: return "R8";
			case Register::R9: return "R9";
			case Register::R10: return "R10";
			case Register::R11: return "R11";
			case Register::R12: return "R12";
			case Register::R13: return "R13";
			case Register::R14: return "R14";
			case Register::R15: return "R15";
			case Register::EIP: return "EIP";
			case Register::RIP: return "RIP";
			case Register::ES: return "ES";
			case Register::CS: return "CS";
			case Register::SS: return "SS";
			case Register::DS: return "DS";
			case Register::FS: return "FS";
			case Register::GS: return "GS";
			case Register::XMM0: return "XMM0";
			case Register::XMM1: return "XMM1";
			case Register::XMM2: return "XMM2";
			case Register::XMM3: return "XMM3";
			case Register::XMM4: return "XMM4";
			case Register::XMM5: return "XMM5";
			case Register::XMM6: return "XMM6";
			case Register::XMM7: return "XMM7";
			case Register::XMM8: return "XMM8";
			case Register::XMM9: return "XMM9";
			case Register::XMM10: return "XMM10";
			case Register::XMM11: return "XMM11";
			case Register::XMM12: return "XMM12";
			case Register::XMM13: return "XMM13";
			case Register::XMM14: return "XMM14";
			case Register::XMM15: return "XMM15";
			case Register::XMM16: return "XMM16";
			case Register::XMM17: return "XMM17";
			case Register::XMM18: return "XMM18";
			case Register::XMM19: return "XMM19";
			case Register::XMM20: return "XMM20";
			case Register::XMM21: return "XMM21";
			case Register::XMM22: return "XMM22";
			case Register::XMM23: return "XMM23";
			case Register::XMM24: return "XMM24";
			case Register::XMM25: return "XMM25";
			case Register::XMM26: return "XMM26";
			case Register::XMM27: return "XMM27";
			case Register::XMM28: return "XMM28";
			case Register::XMM29: return "XMM29";
			case Register::XMM30: return "XMM30";
			case Register::XMM31: return "XMM31";
			case Register::YMM0: return "YMM0";
			case Register::YMM1: return "YMM1";
			case Register::YMM2: return "YMM2";
			case Register::YMM3: return "YMM3";
			case Register::YMM4: return "YMM4";
			case Register::YMM5: return "YMM5";
			case Register::YMM6: return "YMM6";
			case Register::YMM7: return "YMM7";
			case Register::YMM8: return "YMM8";
			case Register::YMM9: return "YMM9";
			case Register::YMM10: return "YMM10";
			case Register::YMM11: return "YMM11";
			case Register::YMM12: return "YMM12";
			case Register::YMM13: return "YMM13";
			case Register::YMM14: return "YMM14";
			case Register::YMM15: return "YMM15";
			case Register::YMM16: return "YMM16";
			case Register::YMM17: return "YMM17";
			case Register::YMM18: return "YMM18";
			case Register::YMM19: return "YMM19";
			case Register::YMM20: return "YMM20";
			case Register::YMM21: return "YMM21";
			case Register::YMM22: return "YMM22";
			case Register::YMM23: return "YMM23";
			case Register::YMM24: return "YMM24";
			case Register::YMM25: return "YMM25";
			case Register::YMM26: return "YMM26";
			case Register::YMM27: return "YMM27";
			case Register::YMM28: return "YMM28";
			case Register::YMM29: return "YMM29";
			case Register::YMM30: return "YMM30";
			case Register::YMM31: return "YMM31";
			case Register::ZMM0: return "ZMM0";
			case Register::ZMM1: return "ZMM1";
			case Register::ZMM2: return "ZMM2";
			case Register::ZMM3: return "ZMM3";
			case Register::ZMM4: return "ZMM4";
			case Register::ZMM5: return "ZMM5";
			case Register::ZMM6: return "ZMM6";
			case Register::ZMM7: return "ZMM7";
			case Register::ZMM8: return "ZMM8";
			case Register::ZMM9: return "ZMM9";
			case Register::ZMM10: return "ZMM10";
			case Register::ZMM11: return "ZMM11";
			case Register::ZMM12: return "ZMM12";
			case Register::ZMM13: return "ZMM13";
			case Register::ZMM14: return "ZMM14";
			case Register::ZMM15: return "ZMM15";
			case Register::ZMM16: return "ZMM16";
			case Register::ZMM17: return "ZMM17";
			case Register::ZMM18: return "ZMM18";
			case Register::ZMM19: return "ZMM19";
			case Register::ZMM20: return "ZMM20";
			case Register::ZMM21: return "ZMM21";
			case Register::ZMM22: return "ZMM22";
			case Register::ZMM23: return "ZMM23";
			case Register::ZMM24: return "ZMM24";
			case Register::ZMM25: return "ZMM25";
			case Register::ZMM26: return "ZMM26";
			case Register::ZMM27: return "ZMM27";
			case Register::ZMM28: return "ZMM28";
			case Register::ZMM29: return "ZMM29";
			case Register::ZMM30: return "ZMM30";
			case Register::ZMM31: return "ZMM31";
			case Register::K0: return "K0";
			case Register::K1: return "K1";
			case Register::K2: return "K2";
			case Register::K3: return "K3";
			case Register::K4: return "K4";
			case Register::K5: return "K5";
			case Register::K6: return "K6";
			case Register::K7: return "K7";
			case Register::BND0: return "BND0";
			case Register::BND1: return "BND1";
			case Register::BND2: return "BND2";
			case Register::BND3: return "BND3";
			case Register::CR0: return "CR0";
			case Register::CR1: return "CR1";
			case Register::CR2: return "CR2";
			case Register::CR3: return "CR3";
			case Register::CR4: return "CR4";
			case Register::CR5: return "CR5";
			case Register::CR6: return "CR6";
			case Register::CR7: return "CR7";
			case Register::CR8: return "CR8";
			case Register::CR9: return "CR9";
			case Register::CR10: return "CR10";
			case Register::CR11: return "CR11";
			case Register::CR12: return "CR12";
			case Register::CR13: return "CR13";
			case Register::CR14: return "CR14";
			case Register::CR15: return "CR15";
			case Register::DR0: return "DR0";
			case Register::DR1: return "DR1";
			case Register::DR2: return "DR2";
			case Register::DR3: return "DR3";
			case Register::DR4: return "DR4";
			case Register::DR5: return "DR5";
			case Register::DR6: return "DR6";
			case Register::DR7: return "DR7";
			case Register::DR8: return "DR8";
			case Register::DR9: return "DR9";
			case Register::DR10: return "DR10";
			case Register::DR11: return "DR11";
			case Register::DR12: return "DR12";
			case Register::DR13: return "DR13";
			case Register::DR14: return "DR14";
			case Register::DR15: return "DR15";
			case Register::ST0: return "ST0";
			case Register::ST1: return "ST1";
			case Register::ST2: return "ST2";
			case Register::ST3: return "ST3";
			case Register::ST4: return "ST4";
			case Register::ST5: return "ST5";
			case Register::ST6: return "ST6";
			case Register::ST7: return "ST7";
			case Register::MM0: return "MM0";
			case Register::MM1: return "MM1";
			case Register::MM2: return "MM2";
			case Register::MM3: return "MM3";
			case Register::MM4: return "MM4";
			case Register::MM5: return "MM5";
			case Register::MM6: return "MM6";
			case Register::MM7: return "MM7";
			case Register::TR0: return "TR0";
			case Register::TR1: return "TR1";
			case Register::TR2: return "TR2";
			case Register::TR3: return "TR3";
			case Register::TR4: return "TR4";
			case Register::TR5: return "TR5";
			case Register::TR6: return "TR6";
			case Register::TR7: return "TR7";
			case Register::TMM0: return "TMM0";
			case Register::TMM1: return "TMM1";
			case Register::TMM2: return "TMM2";
			case Register::TMM3: return "TMM3";
			case Register::TMM4: return "TMM4";
			case Register::TMM5: return "TMM5";
			case Register::TMM6: return "TMM6";
			case Register::TMM7: return "TMM7";
			default: return Internal::StringHelpers::ToDec((int)e);
		}
		}
}
