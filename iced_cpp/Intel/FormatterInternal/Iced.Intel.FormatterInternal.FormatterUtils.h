// C# helper headers
#include <csharp/classes.h>
#include <csharp/enum.h>
#include <csharp/interfaces.h>
#include <csharp/primitives.h>

// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#pragma once

#include "../Code.g.h"
#include "../CodeSize.g.h"
#include "../Register.g.h"
#include "../Iced.Intel.Instruction.h"
#include "../FormatterOutput.h"
#include "FormatterUtils.h"
#include "../FormatterOptions.h"
#include <string>
#include <vector>
#include <csharp/exceptionhelper.h>
#include <cassert>

// Code generated from Iced. Do not edit.
// Commit tag: badb6147c0994a4954fa27645aba2b02c2bb9502.
// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors
namespace Iced::Intel::FormatterInternal
{
	// GENERATOR-BEGIN: FormatterFlowControl
	// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

			// GENERATOR-END: FormatterFlowControl
		class FormatterUtils final
	{
	public:
		//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
		//ORIGINAL LINE: [MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool IsNotrackPrefixBranch(Code code)
		static bool IsNotrackPrefixBranch(Code code);
	private:
		static bool IsCode64(CodeSize codeSize);
		static Register GetDefaultSegmentRegister(const Instruction& instruction);
	public:
		static bool ShowSegmentPrefix(Register defaultSegReg, const Instruction& instruction, bool showUselessPrefixes);
		static bool ShowRepOrRepePrefix(Code code, bool showUselessPrefixes);
		static bool ShowRepnePrefix(Code code, bool showUselessPrefixes);
		static bool IsRepeOrRepneInstruction(Code code);
	private:
		static bool IsRepRepeRepneInstruction(Code code);


		static std::vector<std::string> spaceStrings;
		static std::vector<std::string> tabStrings;
		static std::vector<std::string> CreateStrings(char c, std::int32_t max);
	public:
		static void AddTabs(FormatterOutput& output, std::int32_t column, std::int32_t firstOperandCharIndex, std::int32_t tabSize);
	private:
		static void AddStrings(FormatterOutput& output, std::vector<std::string>& strings, std::int32_t count);
	public:
		static bool IsCall(FormatterFlowControl kind);
		static FormatterFlowControl GetFlowControl(const Instruction& instruction);
		static bool ShowRepOrRepePrefix(Code code, const FormatterOptions& options);
		static bool ShowRepnePrefix(Code code, const FormatterOptions& options);
		//C# TO C++ CONVERTER NOTE: The following .NET attribute has no direct equivalent in C++:
		//ORIGINAL LINE: [MethodImpl(MethodImplOptions.AggressiveInlining)] public static PrefixKind GetSegmentRegisterPrefixKind(Register register)
		static PrefixKind GetSegmentRegisterPrefixKind(Register register_);
		static bool ShowIndexScale(const Instruction& instruction, const FormatterOptions& options);
		static bool ShowSegmentPrefix(Register defaultSegReg, const Instruction& instruction, const FormatterOptions& options);
		static bool CanShowRoundingControl(const Instruction& instruction, const FormatterOptions& options);
	};
}
