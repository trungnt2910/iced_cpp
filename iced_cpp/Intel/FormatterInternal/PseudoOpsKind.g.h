/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(GAS) || defined(INTEL) || defined(MASM) || defined(NASM) || defined(FAST_FMT)
#include <array>
#include <stdexcept>
#include <string>
#include "../ToString.h"
#include "../Internal/StringHelpers.h"
namespace Iced::Intel::FormatterInternal {
	enum class PseudoOpsKind {
		cmpps ,
		vcmpps ,
		cmppd ,
		vcmppd ,
		cmpss ,
		vcmpss ,
		cmpsd ,
		vcmpsd ,
		pclmulqdq ,
		vpclmulqdq ,
		vpcomb ,
		vpcomw ,
		vpcomd ,
		vpcomq ,
		vpcomub ,
		vpcomuw ,
		vpcomud ,
		vpcomuq ,
		vpcmpb ,
		vpcmpw ,
		vpcmpd ,
		vpcmpq ,
		vpcmpub ,
		vpcmpuw ,
		vpcmpud ,
		vpcmpuq ,
		vcmpph ,
		vcmpsh ,
		vcmpps8 ,
		vcmppd8 ,
		vpcmpd6 ,
		vpcmpud6 ,
	};
	constexpr int operator+(const PseudoOpsKind& a, const PseudoOpsKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const PseudoOpsKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const PseudoOpsKind& b) { return (a + (int)b); }
	constexpr int operator-(const PseudoOpsKind& a, const PseudoOpsKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const PseudoOpsKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const PseudoOpsKind& b) { return (a - (int)b); }
	constexpr PseudoOpsKind operator++(PseudoOpsKind& a, int) { auto temp = a; a = PseudoOpsKind(a + 1); return temp; }
	constexpr PseudoOpsKind& operator++(PseudoOpsKind& a) { return a = PseudoOpsKind(a + 1); }
	constexpr PseudoOpsKind operator--(PseudoOpsKind& a, int) { auto temp = a; a = PseudoOpsKind(a - 1); return temp; }
	constexpr PseudoOpsKind& operator--(PseudoOpsKind& a) { return a = PseudoOpsKind(a - 1); }
	constexpr bool operator==(const PseudoOpsKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const PseudoOpsKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const PseudoOpsKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const PseudoOpsKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const PseudoOpsKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const PseudoOpsKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const PseudoOpsKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const PseudoOpsKind& b) { return (a > (int)b); }
	constexpr bool operator<(const PseudoOpsKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const PseudoOpsKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const PseudoOpsKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const PseudoOpsKind& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::FormatterInternal::PseudoOpsKind& e) {
	switch (e) {
		case Iced::Intel::FormatterInternal::PseudoOpsKind::cmpps: return "cmpps";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmpps: return "vcmpps";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::cmppd: return "cmppd";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmppd: return "vcmppd";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::cmpss: return "cmpss";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmpss: return "vcmpss";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::cmpsd: return "cmpsd";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmpsd: return "vcmpsd";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::pclmulqdq: return "pclmulqdq";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpclmulqdq: return "vpclmulqdq";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomb: return "vpcomb";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomw: return "vpcomw";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomd: return "vpcomd";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomq: return "vpcomq";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomub: return "vpcomub";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomuw: return "vpcomuw";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomud: return "vpcomud";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcomuq: return "vpcomuq";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpb: return "vpcmpb";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpw: return "vpcmpw";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpd: return "vpcmpd";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpq: return "vpcmpq";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpub: return "vpcmpub";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpuw: return "vpcmpuw";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpud: return "vpcmpud";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpuq: return "vpcmpuq";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmpph: return "vcmpph";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmpsh: return "vcmpsh";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmpps8: return "vcmpps8";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vcmppd8: return "vcmppd8";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpd6: return "vpcmpd6";
		case Iced::Intel::FormatterInternal::PseudoOpsKind::vpcmpud6: return "vpcmpud6";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
