/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(MVEX)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class MvexConvFn {
		/// <summary>No conversion function</summary>
		None  = 0,
		/// <summary>Sf32(xxx)</summary>
		Sf32  = 1,
		/// <summary>Sf64(xxx)</summary>
		Sf64  = 2,
		/// <summary>Si32(xxx)</summary>
		Si32  = 3,
		/// <summary>Si64(xxx)</summary>
		Si64  = 4,
		/// <summary>Uf32(xxx)</summary>
		Uf32  = 5,
		/// <summary>Uf64(xxx)</summary>
		Uf64  = 6,
		/// <summary>Ui32(xxx)</summary>
		Ui32  = 7,
		/// <summary>Ui64(xxx)</summary>
		Ui64  = 8,
		/// <summary>Df32(xxx)</summary>
		Df32  = 9,
		/// <summary>Df64(xxx)</summary>
		Df64  = 10,
		/// <summary>Di32(xxx)</summary>
		Di32  = 11,
		/// <summary>Di64(xxx)</summary>
		Di64  = 12,
	};
	constexpr int operator+(const MvexConvFn& a, const MvexConvFn& b) { return ((int)a + (int)b); }
	constexpr int operator+(const MvexConvFn& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const MvexConvFn& b) { return (a + (int)b); }
	constexpr int operator-(const MvexConvFn& a, const MvexConvFn& b) { return ((int)a - (int)b); }
	constexpr int operator-(const MvexConvFn& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const MvexConvFn& b) { return (a - (int)b); }
	constexpr MvexConvFn operator++(MvexConvFn& a, int) { auto temp = a; a = MvexConvFn(a + 1); return temp; }
	constexpr MvexConvFn& operator++(MvexConvFn& a) { return a = MvexConvFn(a + 1); }
	constexpr MvexConvFn operator--(MvexConvFn& a, int) { auto temp = a; a = MvexConvFn(a - 1); return temp; }
	constexpr MvexConvFn& operator--(MvexConvFn& a) { return a = MvexConvFn(a - 1); }
	constexpr bool operator==(const MvexConvFn& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const MvexConvFn& b) { return (a == (int)b); }
	constexpr bool operator>=(const MvexConvFn& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const MvexConvFn& b) { return (a >= (int)b); }
	constexpr bool operator<=(const MvexConvFn& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const MvexConvFn& b) { return (a <= (int)b); }
	constexpr bool operator>(const MvexConvFn& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const MvexConvFn& b) { return (a > (int)b); }
	constexpr bool operator<(const MvexConvFn& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const MvexConvFn& b) { return (a < (int)b); }
	constexpr bool operator!=(const MvexConvFn& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const MvexConvFn& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::MvexConvFn& e) {
	switch (e) {
		case Iced::Intel::MvexConvFn::None: return "None";
		case Iced::Intel::MvexConvFn::Sf32: return "Sf32";
		case Iced::Intel::MvexConvFn::Sf64: return "Sf64";
		case Iced::Intel::MvexConvFn::Si32: return "Si32";
		case Iced::Intel::MvexConvFn::Si64: return "Si64";
		case Iced::Intel::MvexConvFn::Uf32: return "Uf32";
		case Iced::Intel::MvexConvFn::Uf64: return "Uf64";
		case Iced::Intel::MvexConvFn::Ui32: return "Ui32";
		case Iced::Intel::MvexConvFn::Ui64: return "Ui64";
		case Iced::Intel::MvexConvFn::Df32: return "Df32";
		case Iced::Intel::MvexConvFn::Df64: return "Df64";
		case Iced::Intel::MvexConvFn::Di32: return "Di32";
		case Iced::Intel::MvexConvFn::Di64: return "Di64";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
