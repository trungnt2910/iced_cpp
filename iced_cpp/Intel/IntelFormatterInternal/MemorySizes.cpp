// C# helper headers




// Commonly used headers
#include <cstdint>
#include <format>
#include <functional>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#include "MemorySizes.h"
#include "../Iced.Intel.IcedConstants.h"

using namespace Iced::Intel::FormatterInternal;

namespace Iced::Intel::IntelFormatterInternal
{

	MemorySizes::Info::Info(const std::vector<FormatterString>& keywords, FormatterString bcstTo)
	{
		this->keywords = keywords;
		this->bcstTo = bcstTo;
	}

	std::vector<MemorySizes::Info> MemorySizes::AllMemorySizes = GetMemorySizes();

	std::vector<MemorySizes::Info> MemorySizes::GetMemorySizes()
	{
		// GENERATOR-BEGIN: ConstData
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		constexpr std::int32_t BroadcastToKindShift = 5;
		constexpr std::int32_t MemoryKeywordsMask = 31;
		auto byte = FormatterString("byte");
		auto ptr = FormatterString("ptr");
		auto byte_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ byte, ptr };
		auto dword = FormatterString("dword");
		auto dword_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ dword, ptr };
		auto fpuenv14 = FormatterString("fpuenv14");
		auto fpuenv14_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ fpuenv14, ptr };
		auto fpuenv28 = FormatterString("fpuenv28");
		auto fpuenv28_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ fpuenv28, ptr };
		auto fpustate108 = FormatterString("fpustate108");
		auto fpustate108_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ fpustate108, ptr };
		auto fpustate94 = FormatterString("fpustate94");
		auto fpustate94_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ fpustate94, ptr };
		auto fword = FormatterString("fword");
		auto fword_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ fword, ptr };
		auto qword = FormatterString("qword");
		auto qword_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ qword, ptr };
		auto tbyte = FormatterString("tbyte");
		auto tbyte_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ tbyte, ptr };
		auto word = FormatterString("word");
		auto word_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ word, ptr };
		auto xmmword = FormatterString("xmmword");
		auto xmmword_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ xmmword, ptr };
		auto ymmword = FormatterString("ymmword");
		auto ymmword_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ ymmword, ptr };
		auto zmmword = FormatterString("zmmword");
		auto zmmword_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ zmmword, ptr };
		auto mem384 = FormatterString("mem384");
		auto mem384_ptr = std::vector<Iced::Intel::FormatterInternal::FormatterString>{ mem384, ptr };
		auto empty = FormatterString("");
		auto b1to2 = FormatterString("1to2");
		auto b1to4 = FormatterString("1to4");
		auto b1to8 = FormatterString("1to8");
		auto b1to16 = FormatterString("1to16");
		auto b1to32 = FormatterString("1to32");
		// GENERATOR-END: ConstData
		auto infos = std::vector<Info>(IcedConstants::MemorySizeEnumCount);
		std::vector<std::uint8_t> data = { 0x00, 0x01, 0x0A, 0x02, 0x08, 0x08, 0x0B, 0x0C, 0x0D, 0x01, 0x0A, 0x02, 0x08, 0x0B, 0x0C, 0x0D, 0x02, 0x07, 0x09, 0x0A, 0x02, 0x08, 0x02, 0x08, 0x08, 0x0B, 0x07, 0x07, 0x0A, 0x02, 0x08, 0x09, 0x0B, 0x0A, 0x03, 0x04, 0x06, 0x05, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0D, 0x00, 0x09, 0x0E, 0x0D, 0x0A, 0x0A, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x2A, 0x22, 0x22, 0x4A, 0x22, 0x6A, 0x6A, 0x42, 0x42, 0x28, 0x28, 0x28, 0x6A, 0x42, 0x28, 0x42, 0x28, 0x28, 0x42, 0x42, 0x8A, 0x8A, 0x62, 0x62, 0x48, 0x48, 0x48, 0x8A, 0x62, 0x48, 0x62, 0x48, 0x48, 0x62, 0x62, 0xAA, 0xAA, 0x82, 0x82, 0x68, 0x68, 0x68, 0xAA, 0x82, 0x68, 0x82, 0x82, 0x68, 0x68, 0x82 };
		for (std::int32_t i = 0; i < infos.size(); i++)
		{
			auto d = data[i];
			auto switchTempVar_0 = (d & MemoryKeywordsMask);
			// GENERATOR-BEGIN: MemoryKeywordsSwitch
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			// GENERATOR-END: MemoryKeywordsSwitch

	 //C# TO C++ CONVERTER TODO TASK: Throw expressions are not converted by C# to C++ Converter:
	 //ORIGINAL LINE: var keywords = (switchTempVar_0 == 0x00) ? Array2.Empty<FormatterString>() : (switchTempVar_0 == 0x01) ? byte_ptr : (switchTempVar_0 == 0x02) ? dword_ptr : (switchTempVar_0 == 0x03) ? fpuenv14_ptr : (switchTempVar_0 == 0x04) ? fpuenv28_ptr : (switchTempVar_0 == 0x05) ? fpustate108_ptr : (switchTempVar_0 == 0x06) ? fpustate94_ptr : (switchTempVar_0 == 0x07) ? fword_ptr : (switchTempVar_0 == 0x08) ? qword_ptr : (switchTempVar_0 == 0x09) ? tbyte_ptr : (switchTempVar_0 == 0x0A) ? word_ptr : (switchTempVar_0 == 0x0B) ? xmmword_ptr : (switchTempVar_0 == 0x0C) ? ymmword_ptr : (switchTempVar_0 == 0x0D) ? zmmword_ptr : (switchTempVar_0 == 0x0E) ? mem384_ptr : throw new InvalidOperationException();
			auto keywords = (switchTempVar_0 == 0x00) ? std::vector<FormatterString>() : (switchTempVar_0 == 0x01) ? byte_ptr : (switchTempVar_0 == 0x02) ? dword_ptr : (switchTempVar_0 == 0x03) ? fpuenv14_ptr : (switchTempVar_0 == 0x04) ? fpuenv28_ptr : (switchTempVar_0 == 0x05) ? fpustate108_ptr : (switchTempVar_0 == 0x06) ? fpustate94_ptr : (switchTempVar_0 == 0x07) ? fword_ptr : (switchTempVar_0 == 0x08) ? qword_ptr : (switchTempVar_0 == 0x09) ? tbyte_ptr : (switchTempVar_0 == 0x0A) ? word_ptr : (switchTempVar_0 == 0x0B) ? xmmword_ptr : (switchTempVar_0 == 0x0C) ? ymmword_ptr : (switchTempVar_0 == 0x0D) ? zmmword_ptr : (switchTempVar_0 == 0x0E) ? mem384_ptr : throw std::runtime_error("unexpected");
			auto switchTempVar_1 = (d >> BroadcastToKindShift);
			// GENERATOR-BEGIN: BroadcastToKindSwitch
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			// GENERATOR-END: BroadcastToKindSwitch

	 //C# TO C++ CONVERTER TODO TASK: Throw expressions are not converted by C# to C++ Converter:
	 //ORIGINAL LINE: var bcstTo = (switchTempVar_1 == 0x00) ? empty : (switchTempVar_1 == 0x01) ? b1to2 : (switchTempVar_1 == 0x02) ? b1to4 : (switchTempVar_1 == 0x03) ? b1to8 : (switchTempVar_1 == 0x04) ? b1to16 : (switchTempVar_1 == 0x05) ? b1to32 : throw new InvalidOperationException();
			auto bcstTo = (switchTempVar_1 == 0x00) ? empty : (switchTempVar_1 == 0x01) ? b1to2 : (switchTempVar_1 == 0x02) ? b1to4 : (switchTempVar_1 == 0x03) ? b1to8 : (switchTempVar_1 == 0x04) ? b1to16 : (switchTempVar_1 == 0x05) ? b1to32 : throw std::runtime_error("unexpected");
			infos[i] = Info(keywords, bcstTo);
		}
		return infos;
	}
}
