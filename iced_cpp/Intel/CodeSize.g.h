/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class CodeSize {
		/// <summary>Unknown size</summary>
		Unknown  = 0,
		/// <summary>16-bit code</summary>
		Code16  = 1,
		/// <summary>32-bit code</summary>
		Code32  = 2,
		/// <summary>64-bit code</summary>
		Code64  = 3,
	};
	constexpr int operator+(const CodeSize& a, const CodeSize& b) { return ((int)a + (int)b); }
	constexpr int operator+(const CodeSize& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const CodeSize& b) { return (a + (int)b); }
	constexpr int operator-(const CodeSize& a, const CodeSize& b) { return ((int)a - (int)b); }
	constexpr int operator-(const CodeSize& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const CodeSize& b) { return (a - (int)b); }
	constexpr CodeSize operator++(CodeSize& a, int) { auto temp = a; a = CodeSize(a + 1); return temp; }
	constexpr CodeSize& operator++(CodeSize& a) { return a = CodeSize(a + 1); }
	constexpr CodeSize operator--(CodeSize& a, int) { auto temp = a; a = CodeSize(a - 1); return temp; }
	constexpr CodeSize& operator--(CodeSize& a) { return a = CodeSize(a - 1); }
	constexpr bool operator==(const CodeSize& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const CodeSize& b) { return (a == (int)b); }
	constexpr bool operator>=(const CodeSize& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const CodeSize& b) { return (a >= (int)b); }
	constexpr bool operator<=(const CodeSize& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const CodeSize& b) { return (a <= (int)b); }
	constexpr bool operator>(const CodeSize& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const CodeSize& b) { return (a > (int)b); }
	constexpr bool operator<(const CodeSize& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const CodeSize& b) { return (a < (int)b); }
	constexpr bool operator!=(const CodeSize& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const CodeSize& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::CodeSize& e) {
	switch (e) {
		case Iced::Intel::CodeSize::Unknown: return "Unknown";
		case Iced::Intel::CodeSize::Code16: return "Code16";
		case Iced::Intel::CodeSize::Code32: return "Code32";
		case Iced::Intel::CodeSize::Code64: return "Code64";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
