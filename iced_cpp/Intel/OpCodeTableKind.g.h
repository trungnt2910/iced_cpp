/* 
SPDX-License-Identifier: MIT
Copyright (C) 2018-present iced project and contributors
 */

// ‚ö†Ô∏èThis file was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è

#pragma once

#if defined(ENCODER) && defined(OPCODE_INFO)
#include <array>
#include <stdexcept>
#include <string>
#include "ToString.h"
#include "Internal/StringHelpers.h"
namespace Iced::Intel {
	enum class OpCodeTableKind {
		/// <summary>Legacy/<c>MAP0</c> table</summary>
		Normal  = 0,
		/// <summary><c>0F</c>/<c>MAP1</c> table (legacy, VEX, EVEX, MVEX)</summary>
		T0F  = 1,
		/// <summary><c>0F38</c>/<c>MAP2</c> table (legacy, VEX, EVEX, MVEX)</summary>
		T0F38  = 2,
		/// <summary><c>0F3A</c>/<c>MAP3</c> table (legacy, VEX, EVEX, MVEX)</summary>
		T0F3A  = 3,
		/// <summary><c>MAP5</c> table (EVEX)</summary>
		MAP5  = 4,
		/// <summary><c>MAP6</c> table (EVEX)</summary>
		MAP6  = 5,
		/// <summary><c>MAP8</c> table (XOP)</summary>
		MAP8  = 6,
		/// <summary><c>MAP9</c> table (XOP)</summary>
		MAP9  = 7,
		/// <summary><c>MAP10</c> table (XOP)</summary>
		MAP10  = 8,
	};
	constexpr int operator+(const OpCodeTableKind& a, const OpCodeTableKind& b) { return ((int)a + (int)b); }
	constexpr int operator+(const OpCodeTableKind& a, const int& b) { return ((int)a + b); }
	constexpr int operator+(const int& a, const OpCodeTableKind& b) { return (a + (int)b); }
	constexpr int operator-(const OpCodeTableKind& a, const OpCodeTableKind& b) { return ((int)a - (int)b); }
	constexpr int operator-(const OpCodeTableKind& a, const int& b) { return ((int)a - b); }
	constexpr int operator-(const int& a, const OpCodeTableKind& b) { return (a - (int)b); }
	constexpr OpCodeTableKind operator++(OpCodeTableKind& a, int) { auto temp = a; a = OpCodeTableKind(a + 1); return temp; }
	constexpr OpCodeTableKind& operator++(OpCodeTableKind& a) { return a = OpCodeTableKind(a + 1); }
	constexpr OpCodeTableKind operator--(OpCodeTableKind& a, int) { auto temp = a; a = OpCodeTableKind(a - 1); return temp; }
	constexpr OpCodeTableKind& operator--(OpCodeTableKind& a) { return a = OpCodeTableKind(a - 1); }
	constexpr bool operator==(const OpCodeTableKind& a, const int& b) { return ((int)a == b); }
	constexpr bool operator==(const int& a, const OpCodeTableKind& b) { return (a == (int)b); }
	constexpr bool operator>=(const OpCodeTableKind& a, const int& b) { return ((int)a >= b); }
	constexpr bool operator>=(const int& a, const OpCodeTableKind& b) { return (a >= (int)b); }
	constexpr bool operator<=(const OpCodeTableKind& a, const int& b) { return ((int)a <= b); }
	constexpr bool operator<=(const int& a, const OpCodeTableKind& b) { return (a <= (int)b); }
	constexpr bool operator>(const OpCodeTableKind& a, const int& b) { return ((int)a > b); }
	constexpr bool operator>(const int& a, const OpCodeTableKind& b) { return (a > (int)b); }
	constexpr bool operator<(const OpCodeTableKind& a, const int& b) { return ((int)a < b); }
	constexpr bool operator<(const int& a, const OpCodeTableKind& b) { return (a < (int)b); }
	constexpr bool operator!=(const OpCodeTableKind& a, const int& b) { return ((int)a != b); }
	constexpr bool operator!=(const int& a, const OpCodeTableKind& b) { return (a != (int)b); }
}
template <>
constexpr std::string Iced::Intel::ToString(const Iced::Intel::OpCodeTableKind& e) {
	switch (e) {
		case Iced::Intel::OpCodeTableKind::Normal: return "Normal";
		case Iced::Intel::OpCodeTableKind::T0F: return "T0F";
		case Iced::Intel::OpCodeTableKind::T0F38: return "T0F38";
		case Iced::Intel::OpCodeTableKind::T0F3A: return "T0F3A";
		case Iced::Intel::OpCodeTableKind::MAP5: return "MAP5";
		case Iced::Intel::OpCodeTableKind::MAP6: return "MAP6";
		case Iced::Intel::OpCodeTableKind::MAP8: return "MAP8";
		case Iced::Intel::OpCodeTableKind::MAP9: return "MAP9";
		case Iced::Intel::OpCodeTableKind::MAP10: return "MAP10";
		default: return Internal::StringHelpers::ToDec((int)e);
	}
}
#endif
